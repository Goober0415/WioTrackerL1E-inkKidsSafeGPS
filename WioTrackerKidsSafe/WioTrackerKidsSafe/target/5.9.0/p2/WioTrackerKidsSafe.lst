
h:/WioTrackerKidsSafe/WioTrackerKidsSafe/target/5.9.0/p2/WioTrackerKidsSafe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fc000  085fc000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fc018  085fc018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fc818  085fc0a8  0000c818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000037d8  023fc820  085fc0b0  0000c820  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000640  10079c68  085ff888  00019c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d54  1007a2a8  1007a2a8  0002a2a8  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffec8  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000000ec  085ffecc  085ffecc  0001fecc  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fecc  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0015ffd5  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00016b57  00000000  00000000  0017ffd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00041ff0  00000000  00000000  00196b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003108  00000000  00000000  001d8b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000bd08  00000000  00000000  001dbc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ed35  00000000  00000000  001e792c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005073f  00000000  00000000  00216661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ea820  00000000  00000000  00266da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008c24  00000000  00000000  003515c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fc018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc018:	4813      	ldr	r0, [pc, #76]	; (85fc068 <module_user_pre_init+0x50>)
 85fc01a:	4914      	ldr	r1, [pc, #80]	; (85fc06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fc01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc01e:	4288      	cmp	r0, r1
 85fc020:	d005      	beq.n	85fc02e <module_user_pre_init+0x16>
 85fc022:	4a13      	ldr	r2, [pc, #76]	; (85fc070 <module_user_pre_init+0x58>)
 85fc024:	4282      	cmp	r2, r0
 85fc026:	d002      	beq.n	85fc02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fc028:	4b12      	ldr	r3, [pc, #72]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc02a:	1a12      	subs	r2, r2, r0
 85fc02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fc02e:	4812      	ldr	r0, [pc, #72]	; (85fc078 <module_user_pre_init+0x60>)
 85fc030:	4a12      	ldr	r2, [pc, #72]	; (85fc07c <module_user_pre_init+0x64>)
 85fc032:	2100      	movs	r1, #0
 85fc034:	4b12      	ldr	r3, [pc, #72]	; (85fc080 <module_user_pre_init+0x68>)
 85fc036:	1a12      	subs	r2, r2, r0
 85fc038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fc03a:	4812      	ldr	r0, [pc, #72]	; (85fc084 <module_user_pre_init+0x6c>)
 85fc03c:	4912      	ldr	r1, [pc, #72]	; (85fc088 <module_user_pre_init+0x70>)
 85fc03e:	4288      	cmp	r0, r1
 85fc040:	d005      	beq.n	85fc04e <module_user_pre_init+0x36>
 85fc042:	4a12      	ldr	r2, [pc, #72]	; (85fc08c <module_user_pre_init+0x74>)
 85fc044:	4282      	cmp	r2, r0
 85fc046:	d002      	beq.n	85fc04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fc048:	4b0a      	ldr	r3, [pc, #40]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc04a:	1a12      	subs	r2, r2, r0
 85fc04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fc04e:	4810      	ldr	r0, [pc, #64]	; (85fc090 <module_user_pre_init+0x78>)
 85fc050:	4910      	ldr	r1, [pc, #64]	; (85fc094 <module_user_pre_init+0x7c>)
 85fc052:	4288      	cmp	r0, r1
 85fc054:	d005      	beq.n	85fc062 <module_user_pre_init+0x4a>
 85fc056:	4a10      	ldr	r2, [pc, #64]	; (85fc098 <module_user_pre_init+0x80>)
 85fc058:	4282      	cmp	r2, r0
 85fc05a:	d002      	beq.n	85fc062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fc05c:	4b05      	ldr	r3, [pc, #20]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc05e:	1a12      	subs	r2, r2, r0
 85fc060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fc062:	4801      	ldr	r0, [pc, #4]	; (85fc068 <module_user_pre_init+0x50>)
 85fc064:	bd08      	pop	{r3, pc}
 85fc066:	bf00      	nop
 85fc068:	10079c68 	.word	0x10079c68
 85fc06c:	085ff888 	.word	0x085ff888
 85fc070:	1007a2a8 	.word	0x1007a2a8
 85fc074:	10110d2d 	.word	0x10110d2d
 85fc078:	1007a2a8 	.word	0x1007a2a8
 85fc07c:	1007affc 	.word	0x1007affc
 85fc080:	10110ea1 	.word	0x10110ea1
 85fc084:	023fc818 	.word	0x023fc818
 85fc088:	085fc0a8 	.word	0x085fc0a8
 85fc08c:	023fc820 	.word	0x023fc820
 85fc090:	023fc820 	.word	0x023fc820
 85fc094:	085fc0b0 	.word	0x085fc0b0
 85fc098:	023ffff8 	.word	0x023ffff8

085fc09c <dynalib_preinit>:
 85fc09c:	085fc019 00000000                       .._.....

Disassembly of section .psram_text:

023fc820 <strlen>:
 23fc820:	4603      	mov	r3, r0
 23fc822:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fc826:	2a00      	cmp	r2, #0
 23fc828:	d1fb      	bne.n	23fc822 <strlen+0x2>
 23fc82a:	1a18      	subs	r0, r3, r0
 23fc82c:	3801      	subs	r0, #1
 23fc82e:	4770      	bx	lr

023fc830 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fc830:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fc832:	f002 f9d3 	bl	23febdc <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fc836:	2500      	movs	r5, #0
 23fc838:	4e05      	ldr	r6, [pc, #20]	; (23fc850 <module_user_init+0x20>)
 23fc83a:	4c06      	ldr	r4, [pc, #24]	; (23fc854 <module_user_init+0x24>)
 23fc83c:	1ba4      	subs	r4, r4, r6
 23fc83e:	08a4      	lsrs	r4, r4, #2
 23fc840:	42ac      	cmp	r4, r5
 23fc842:	d100      	bne.n	23fc846 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fc844:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fc846:	f856 3b04 	ldr.w	r3, [r6], #4
 23fc84a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fc84c:	3501      	adds	r5, #1
 23fc84e:	e7f7      	b.n	23fc840 <module_user_init+0x10>
 23fc850:	023fffd0 	.word	0x023fffd0
 23fc854:	023ffff8 	.word	0x023ffff8

023fc858 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fc858:	f000 b820 	b.w	23fc89c <setup>

023fc85c <module_user_loop>:
}

void module_user_loop() {
 23fc85c:	b508      	push	{r3, lr}
    loop();
 23fc85e:	f000 f87f 	bl	23fc960 <loop>
    _post_loop();
}
 23fc862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fc866:	f002 b971 	b.w	23feb4c <_post_loop>

023fc86a <_Znaj>:
 23fc86a:	f001 be31 	b.w	23fe4d0 <malloc>

023fc86e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fc86e:	f001 be3d 	b.w	23fe4ec <free>
	...

023fc874 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fc874:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fc876:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fc878:	4a02      	ldr	r2, [pc, #8]	; (23fc884 <__cxa_pure_virtual+0x10>)
 23fc87a:	4903      	ldr	r1, [pc, #12]	; (23fc888 <__cxa_pure_virtual+0x14>)
 23fc87c:	f001 fd02 	bl	23fe284 <panic_>
  while (1);
 23fc880:	e7fe      	b.n	23fc880 <__cxa_pure_virtual+0xc>
 23fc882:	bf00      	nop
 23fc884:	023fddd1 	.word	0x023fddd1
 23fc888:	023ff688 	.word	0x023ff688

023fc88c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fc88c:	7800      	ldrb	r0, [r0, #0]
 23fc88e:	fab0 f080 	clz	r0, r0
 23fc892:	0940      	lsrs	r0, r0, #5
 23fc894:	4770      	bx	lr

023fc896 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fc896:	2301      	movs	r3, #1
 23fc898:	7003      	strb	r3, [r0, #0]
 23fc89a:	4770      	bx	lr

023fc89c <setup>:

// Let Device OS manage the connection to the Particle Cloud
SYSTEM_MODE(AUTOMATIC);


void setup() {
 23fc89c:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);
 23fc89e:	f002 faa9 	bl	23fedf4 <_Z16_fetch_usbserialv>
 23fc8a2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc8a6:	f002 fa95 	bl	23fedd4 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fc8aa:	2000      	movs	r0, #0
 23fc8ac:	f001 faac 	bl	23fde08 <hal_timer_millis>
        while (_while() && !_condition()) {
 23fc8b0:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
 23fc8b4:	4604      	mov	r4, r0
 23fc8b6:	2000      	movs	r0, #0
 23fc8b8:	f001 faa6 	bl	23fde08 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fc8bc:	1b00      	subs	r0, r0, r4
 23fc8be:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fc8c2:	42a8      	cmp	r0, r5
 23fc8c4:	f171 0300 	sbcs.w	r3, r1, #0
 23fc8c8:	d207      	bcs.n	23fc8da <setup+0x3e>
  waitFor(Serial.isConnected,10000);
 23fc8ca:	f002 fa93 	bl	23fedf4 <_Z16_fetch_usbserialv>
 23fc8ce:	f002 fa85 	bl	23feddc <_ZN9USBSerial11isConnectedEv>
 23fc8d2:	b910      	cbnz	r0, 23fc8da <setup+0x3e>
            spark_process();
 23fc8d4:	f001 fde0 	bl	23fe498 <spark_process>
        while (_while() && !_condition()) {
 23fc8d8:	e7ed      	b.n	23fc8b6 <setup+0x1a>
 23fc8da:	f002 fa8b 	bl	23fedf4 <_Z16_fetch_usbserialv>
 23fc8de:	f002 fa7d 	bl	23feddc <_ZN9USBSerial11isConnectedEv>

  display.begin();
 23fc8e2:	223c      	movs	r2, #60	; 0x3c
 23fc8e4:	2102      	movs	r1, #2
 23fc8e6:	4816      	ldr	r0, [pc, #88]	; (23fc940 <setup+0xa4>)
 23fc8e8:	f000 ff93 	bl	23fd812 <_ZN16Adafruit_SSD13065beginEhh>
  display.setCursor(0,0);
 23fc8ec:	2200      	movs	r2, #0
 23fc8ee:	4814      	ldr	r0, [pc, #80]	; (23fc940 <setup+0xa4>)
 23fc8f0:	4611      	mov	r1, r2
 23fc8f2:	f001 fa0d 	bl	23fdd10 <_ZN12Adafruit_GFX9setCursorEss>

  Serial1.begin(115200);
 23fc8f6:	f002 fd2d 	bl	23ff354 <_Z22__fetch_global_Serial1v>
 23fc8fa:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23fc8fe:	f002 faf3 	bl	23feee8 <_ZN11USARTSerial5beginEm>
  //reyaxSetup(password);
   //Initialize GPS
  GPS.begin(0x10);  // The I2C address to use is 0x10
 23fc902:	2110      	movs	r1, #16
 23fc904:	480f      	ldr	r0, [pc, #60]	; (23fc944 <setup+0xa8>)
 23fc906:	f000 fb91 	bl	23fd02c <_ZN12Adafruit_GPS5beginEm>
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 23fc90a:	490f      	ldr	r1, [pc, #60]	; (23fc948 <setup+0xac>)
 23fc90c:	480d      	ldr	r0, [pc, #52]	; (23fc944 <setup+0xa8>)
 23fc90e:	f000 fd35 	bl	23fd37c <_ZN12Adafruit_GPS11sendCommandEPKc>
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); 
  GPS.sendCommand(PGCMD_ANTENNA);

  if ((currentTime -lastTime)>1000){
 23fc912:	4d0e      	ldr	r5, [pc, #56]	; (23fc94c <setup+0xb0>)
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); 
 23fc914:	490e      	ldr	r1, [pc, #56]	; (23fc950 <setup+0xb4>)
 23fc916:	480b      	ldr	r0, [pc, #44]	; (23fc944 <setup+0xa8>)
  if ((currentTime -lastTime)>1000){
 23fc918:	4c0e      	ldr	r4, [pc, #56]	; (23fc954 <setup+0xb8>)
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); 
 23fc91a:	f000 fd2f 	bl	23fd37c <_ZN12Adafruit_GPS11sendCommandEPKc>
  GPS.sendCommand(PGCMD_ANTENNA);
 23fc91e:	490e      	ldr	r1, [pc, #56]	; (23fc958 <setup+0xbc>)
 23fc920:	4808      	ldr	r0, [pc, #32]	; (23fc944 <setup+0xa8>)
 23fc922:	f000 fd2b 	bl	23fd37c <_ZN12Adafruit_GPS11sendCommandEPKc>
  if ((currentTime -lastTime)>1000){
 23fc926:	682b      	ldr	r3, [r5, #0]
 23fc928:	6822      	ldr	r2, [r4, #0]
 23fc92a:	1a9b      	subs	r3, r3, r2
 23fc92c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 23fc930:	d905      	bls.n	23fc93e <setup+0xa2>
  GPS.println(PMTK_Q_RELEASE);
 23fc932:	490a      	ldr	r1, [pc, #40]	; (23fc95c <setup+0xc0>)
 23fc934:	4803      	ldr	r0, [pc, #12]	; (23fc944 <setup+0xa8>)
 23fc936:	f002 f83c 	bl	23fe9b2 <_ZN5Print7printlnEPKc>
  lastTime = currentTime;
 23fc93a:	682b      	ldr	r3, [r5, #0]
 23fc93c:	6023      	str	r3, [r4, #0]
  }
}
 23fc93e:	bd38      	pop	{r3, r4, r5, pc}
 23fc940:	1007ae38 	.word	0x1007ae38
 23fc944:	1007a2a8 	.word	0x1007a2a8
 23fc948:	023ff69d 	.word	0x023ff69d
 23fc94c:	1007ae34 	.word	0x1007ae34
 23fc950:	023ff6cf 	.word	0x023ff6cf
 23fc954:	1007ae5c 	.word	0x1007ae5c
 23fc958:	023ff6e0 	.word	0x023ff6e0
 23fc95c:	023ff6ef 	.word	0x023ff6ef

023fc960 <loop>:

void loop() {
 
}
 23fc960:	4770      	bx	lr
	...

023fc964 <_GLOBAL__sub_I_currentTime>:
 23fc964:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fc966:	f001 fa41 	bl	23fddec <HAL_Timer_Get_Milli_Seconds>
unsigned int currentTime = millis();
 23fc96a:	4b10      	ldr	r3, [pc, #64]	; (23fc9ac <_GLOBAL__sub_I_currentTime+0x48>)
String password = "AA4104132968BA2224299079021594AB"; // AES128 password
 23fc96c:	4910      	ldr	r1, [pc, #64]	; (23fc9b0 <_GLOBAL__sub_I_currentTime+0x4c>)
unsigned int currentTime = millis();
 23fc96e:	6018      	str	r0, [r3, #0]
String password = "AA4104132968BA2224299079021594AB"; // AES128 password
 23fc970:	4810      	ldr	r0, [pc, #64]	; (23fc9b4 <_GLOBAL__sub_I_currentTime+0x50>)
 23fc972:	f001 ffc7 	bl	23fe904 <_ZN6StringC1EPK19__FlashStringHelper>
String myName = "IoTStudent";
 23fc976:	4910      	ldr	r1, [pc, #64]	; (23fc9b8 <_GLOBAL__sub_I_currentTime+0x54>)
 23fc978:	4810      	ldr	r0, [pc, #64]	; (23fc9bc <_GLOBAL__sub_I_currentTime+0x58>)
 23fc97a:	f001 ffc3 	bl	23fe904 <_ZN6StringC1EPK19__FlashStringHelper>
Adafruit_SSD1306 display(OLEDRESET);
 23fc97e:	f04f 31ff 	mov.w	r1, #4294967295
 23fc982:	480f      	ldr	r0, [pc, #60]	; (23fc9c0 <_GLOBAL__sub_I_currentTime+0x5c>)
 23fc984:	f000 fec2 	bl	23fd70c <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_GPS GPS(&Wire);
 23fc988:	f002 fd90 	bl	23ff4ac <_Z19__fetch_global_Wirev>
 23fc98c:	4601      	mov	r1, r0
 23fc98e:	480d      	ldr	r0, [pc, #52]	; (23fc9c4 <_GLOBAL__sub_I_currentTime+0x60>)
 23fc990:	f000 fbb8 	bl	23fd104 <_ZN12Adafruit_GPSC1EP7TwoWire>
              error_(SYSTEM_ERROR_NONE) {
 23fc994:	2200      	movs	r2, #0
 23fc996:	4b0c      	ldr	r3, [pc, #48]	; (23fc9c8 <_GLOBAL__sub_I_currentTime+0x64>)
        set_system_mode(mode);
 23fc998:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 23fc99a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
 23fc99e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 23fc9a2:	609a      	str	r2, [r3, #8]
}
 23fc9a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
 23fc9a8:	f001 bc7a 	b.w	23fe2a0 <set_system_mode>
 23fc9ac:	1007ae34 	.word	0x1007ae34
 23fc9b0:	023ff6fb 	.word	0x023ff6fb
 23fc9b4:	1007ae70 	.word	0x1007ae70
 23fc9b8:	023ff71c 	.word	0x023ff71c
 23fc9bc:	1007ae60 	.word	0x1007ae60
 23fc9c0:	1007ae38 	.word	0x1007ae38
 23fc9c4:	1007a2a8 	.word	0x1007a2a8
 23fc9c8:	1007ae28 	.word	0x1007ae28

023fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>:
    @return none
*/
/**************************************************************************/
void Adafruit_GPS::initDataValue(nmea_index_t idx, char *label, char *fmt,
                                 char *unit, unsigned long response,
                                 nmea_value_type_t type) {
 23fc9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (response)
      val[idx].response = response;
    val[idx].type = type;
    if ((int)(val[idx].type / 10) ==
        1) { // angle with sin/cos component recording
      initDataValue((nmea_index_t)(
 23fc9ce:	2600      	movs	r6, #0
                                 nmea_value_type_t type) {
 23fc9d0:	b085      	sub	sp, #20
 23fc9d2:	460c      	mov	r4, r1
 23fc9d4:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 23fc9d8:	4605      	mov	r5, r0
 23fc9da:	e9dd 070a 	ldrd	r0, r7, [sp, #40]	; 0x28
  if (idx < NMEA_MAX_INDEX) {
 23fc9de:	2c3f      	cmp	r4, #63	; 0x3f
 23fc9e0:	d82a      	bhi.n	23fca38 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x6c>
    if (label)
 23fc9e2:	b11a      	cbz	r2, 23fc9ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x20>
      val[idx].label = label;
 23fc9e4:	eb05 1c44 	add.w	ip, r5, r4, lsl #5
 23fc9e8:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    if (fmt)
 23fc9ec:	0162      	lsls	r2, r4, #5
 23fc9ee:	b11b      	cbz	r3, 23fc9f8 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x2c>
      val[idx].fmt = fmt;
 23fc9f0:	eb05 0c02 	add.w	ip, r5, r2
 23fc9f4:	f8cc 30ac 	str.w	r3, [ip, #172]	; 0xac
    if (unit)
 23fc9f8:	b110      	cbz	r0, 23fca00 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x34>
      val[idx].unit = unit;
 23fc9fa:	18ab      	adds	r3, r5, r2
 23fc9fc:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    if (response)
 23fca00:	b117      	cbz	r7, 23fca08 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x3c>
      val[idx].response = response;
 23fca02:	18ab      	adds	r3, r5, r2
 23fca04:	f8a3 709c 	strh.w	r7, [r3, #156]	; 0x9c
    val[idx].type = type;
 23fca08:	442a      	add	r2, r5
 23fca0a:	f882 109e 	strb.w	r1, [r2, #158]	; 0x9e
    if ((int)(val[idx].type / 10) ==
 23fca0e:	390a      	subs	r1, #10
 23fca10:	2909      	cmp	r1, #9
 23fca12:	d811      	bhi.n	23fca38 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x6c>
      initDataValue((nmea_index_t)(
 23fca14:	2300      	movs	r3, #0
 23fca16:	1c61      	adds	r1, r4, #1
 23fca18:	461a      	mov	r2, r3
 23fca1a:	4628      	mov	r0, r5
 23fca1c:	b2c9      	uxtb	r1, r1
 23fca1e:	e9cd 6601 	strd	r6, r6, [sp, #4]
 23fca22:	9600      	str	r6, [sp, #0]
 23fca24:	f7ff ffd2 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
          idx + 1)); // initialize the next two data values as well
      initDataValue((nmea_index_t)(idx + 2));
 23fca28:	2100      	movs	r1, #0
 23fca2a:	3402      	adds	r4, #2
 23fca2c:	460f      	mov	r7, r1
 23fca2e:	4608      	mov	r0, r1
 23fca30:	460b      	mov	r3, r1
 23fca32:	460a      	mov	r2, r1
 23fca34:	b2e4      	uxtb	r4, r4
 23fca36:	e7d2      	b.n	23fc9de <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x12>
    }
  }
}
 23fca38:	b005      	add	sp, #20
 23fca3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fca3c <_ZN12Adafruit_GPS9data_initEv>:
void Adafruit_GPS::data_init() {
 23fca3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
 23fca40:	2600      	movs	r6, #0
void Adafruit_GPS::data_init() {
 23fca42:	4605      	mov	r5, r0
    initDataValue((nmea_index_t)i, c, NULL, NULL, 0, (nmea_value_type_t)0);
 23fca44:	4634      	mov	r4, r6
 23fca46:	4fc5      	ldr	r7, [pc, #788]	; (23fcd5c <_ZN12Adafruit_GPS9data_initEv+0x320>)
void Adafruit_GPS::data_init() {
 23fca48:	b085      	sub	sp, #20
    initDataValue((nmea_index_t)i, c, NULL, NULL, 0, (nmea_value_type_t)0);
 23fca4a:	b2f1      	uxtb	r1, r6
 23fca4c:	2300      	movs	r3, #0
 23fca4e:	463a      	mov	r2, r7
 23fca50:	4628      	mov	r0, r5
 23fca52:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fca56:	9400      	str	r4, [sp, #0]
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
 23fca58:	3601      	adds	r6, #1
    initDataValue((nmea_index_t)i, c, NULL, NULL, 0, (nmea_value_type_t)0);
 23fca5a:	f7ff ffb7 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
 23fca5e:	2e40      	cmp	r6, #64	; 0x40
 23fca60:	d1f3      	bne.n	23fca4a <_ZN12Adafruit_GPS9data_initEv+0xe>
  initDataValue(NMEA_HDOP, HDOPlabel);
 23fca62:	2300      	movs	r3, #0
  initDataValue(
 23fca64:	2602      	movs	r6, #2
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
 23fca66:	f04f 080b 	mov.w	r8, #11
  initDataValue(
 23fca6a:	4fbd      	ldr	r7, [pc, #756]	; (23fcd60 <_ZN12Adafruit_GPS9data_initEv+0x324>)
  initDataValue(NMEA_HDOP, HDOPlabel);
 23fca6c:	4619      	mov	r1, r3
 23fca6e:	4628      	mov	r0, r5
 23fca70:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fca74:	4abb      	ldr	r2, [pc, #748]	; (23fcd64 <_ZN12Adafruit_GPS9data_initEv+0x328>)
 23fca76:	9400      	str	r4, [sp, #0]
 23fca78:	f7ff ffa8 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(
 23fca7c:	4628      	mov	r0, r5
 23fca7e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 23fca82:	9700      	str	r7, [sp, #0]
 23fca84:	2101      	movs	r1, #1
 23fca86:	4bb8      	ldr	r3, [pc, #736]	; (23fcd68 <_ZN12Adafruit_GPS9data_initEv+0x32c>)
 23fca88:	4ab8      	ldr	r2, [pc, #736]	; (23fcd6c <_ZN12Adafruit_GPS9data_initEv+0x330>)
 23fca8a:	f7ff ff9f 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_LON, LONlabel, LATfmt, LATunit, 0,
 23fca8e:	4631      	mov	r1, r6
 23fca90:	4628      	mov	r0, r5
 23fca92:	e9cd 4601 	strd	r4, r6, [sp, #4]
 23fca96:	9700      	str	r7, [sp, #0]
 23fca98:	4bb3      	ldr	r3, [pc, #716]	; (23fcd68 <_ZN12Adafruit_GPS9data_initEv+0x32c>)
 23fca9a:	4ab5      	ldr	r2, [pc, #724]	; (23fcd70 <_ZN12Adafruit_GPS9data_initEv+0x334>)
 23fca9c:	f7ff ff96 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_LATWP, LATWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
 23fcaa0:	4628      	mov	r0, r5
 23fcaa2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 23fcaa6:	9700      	str	r7, [sp, #0]
 23fcaa8:	2103      	movs	r1, #3
 23fcaaa:	4baf      	ldr	r3, [pc, #700]	; (23fcd68 <_ZN12Adafruit_GPS9data_initEv+0x32c>)
 23fcaac:	4ab1      	ldr	r2, [pc, #708]	; (23fcd74 <_ZN12Adafruit_GPS9data_initEv+0x338>)
 23fcaae:	f7ff ff8d 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_LONWP, LONWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
 23fcab2:	9700      	str	r7, [sp, #0]
  initDataValue(NMEA_SOG, SOGlabel, BoatSpeedfmt, Speedunit);
 23fcab4:	4fb0      	ldr	r7, [pc, #704]	; (23fcd78 <_ZN12Adafruit_GPS9data_initEv+0x33c>)
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
 23fcab6:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 23fce60 <_ZN12Adafruit_GPS9data_initEv+0x424>
  initDataValue(NMEA_LONWP, LONWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
 23fcaba:	4628      	mov	r0, r5
 23fcabc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 23fcac0:	2104      	movs	r1, #4
 23fcac2:	4ba9      	ldr	r3, [pc, #676]	; (23fcd68 <_ZN12Adafruit_GPS9data_initEv+0x32c>)
 23fcac4:	4aad      	ldr	r2, [pc, #692]	; (23fcd7c <_ZN12Adafruit_GPS9data_initEv+0x340>)
 23fcac6:	f7ff ff81 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_SOG, SOGlabel, BoatSpeedfmt, Speedunit);
 23fcaca:	4628      	mov	r0, r5
 23fcacc:	9700      	str	r7, [sp, #0]
 23fcace:	2105      	movs	r1, #5
 23fcad0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcad4:	4baa      	ldr	r3, [pc, #680]	; (23fcd80 <_ZN12Adafruit_GPS9data_initEv+0x344>)
 23fcad6:	4aab      	ldr	r2, [pc, #684]	; (23fcd84 <_ZN12Adafruit_GPS9data_initEv+0x348>)
 23fcad8:	f7ff ff78 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
 23fcadc:	4628      	mov	r0, r5
 23fcade:	e9cd 4801 	strd	r4, r8, [sp, #4]
 23fcae2:	f8cd 9000 	str.w	r9, [sp]
 23fcae6:	2106      	movs	r1, #6
 23fcae8:	4ba7      	ldr	r3, [pc, #668]	; (23fcd88 <_ZN12Adafruit_GPS9data_initEv+0x34c>)
 23fcaea:	4aa8      	ldr	r2, [pc, #672]	; (23fcd8c <_ZN12Adafruit_GPS9data_initEv+0x350>)
 23fcaec:	f7ff ff6e 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_COGWP, COGWPlabel, Anglefmt, TrueAngleunit, 0,
 23fcaf0:	2301      	movs	r3, #1
  initDataValue(NMEA_XTE, XTElabel, XTEfmt, XTEunit);
 23fcaf2:	f8df a370 	ldr.w	sl, [pc, #880]	; 23fce64 <_ZN12Adafruit_GPS9data_initEv+0x428>
  initDataValue(NMEA_COGWP, COGWPlabel, Anglefmt, TrueAngleunit, 0,
 23fcaf6:	4628      	mov	r0, r5
 23fcaf8:	e9cd 4301 	strd	r4, r3, [sp, #4]
 23fcafc:	f8cd 9000 	str.w	r9, [sp]
 23fcb00:	2109      	movs	r1, #9
 23fcb02:	4ba1      	ldr	r3, [pc, #644]	; (23fcd88 <_ZN12Adafruit_GPS9data_initEv+0x34c>)
 23fcb04:	4aa2      	ldr	r2, [pc, #648]	; (23fcd90 <_ZN12Adafruit_GPS9data_initEv+0x354>)
 23fcb06:	f7ff ff61 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_XTE, XTElabel, XTEfmt, XTEunit);
 23fcb0a:	4628      	mov	r0, r5
 23fcb0c:	f8cd a000 	str.w	sl, [sp]
 23fcb10:	210a      	movs	r1, #10
 23fcb12:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcb16:	4b9f      	ldr	r3, [pc, #636]	; (23fcd94 <_ZN12Adafruit_GPS9data_initEv+0x358>)
 23fcb18:	4a9f      	ldr	r2, [pc, #636]	; (23fcd98 <_ZN12Adafruit_GPS9data_initEv+0x35c>)
 23fcb1a:	f7ff ff57 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_DISTWP, DISTWPlabel, XTEfmt, XTEunit);
 23fcb1e:	f8cd a000 	str.w	sl, [sp]
  initDataValue(NMEA_AWA, AWAlabel, Anglefmt, BoatAngleunit, 0,
 23fcb22:	f04f 0a0c 	mov.w	sl, #12
 23fcb26:	f8df b340 	ldr.w	fp, [pc, #832]	; 23fce68 <_ZN12Adafruit_GPS9data_initEv+0x42c>
  initDataValue(NMEA_DISTWP, DISTWPlabel, XTEfmt, XTEunit);
 23fcb2a:	4641      	mov	r1, r8
 23fcb2c:	4628      	mov	r0, r5
 23fcb2e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcb32:	4b98      	ldr	r3, [pc, #608]	; (23fcd94 <_ZN12Adafruit_GPS9data_initEv+0x358>)
 23fcb34:	4a99      	ldr	r2, [pc, #612]	; (23fcd9c <_ZN12Adafruit_GPS9data_initEv+0x360>)
 23fcb36:	f7ff ff49 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_AWA, AWAlabel, Anglefmt, BoatAngleunit, 0,
 23fcb3a:	4651      	mov	r1, sl
 23fcb3c:	4628      	mov	r0, r5
 23fcb3e:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 23fcb42:	4b91      	ldr	r3, [pc, #580]	; (23fcd88 <_ZN12Adafruit_GPS9data_initEv+0x34c>)
 23fcb44:	4a96      	ldr	r2, [pc, #600]	; (23fcda0 <_ZN12Adafruit_GPS9data_initEv+0x364>)
 23fcb46:	f8cd b000 	str.w	fp, [sp]
 23fcb4a:	f7ff ff3f 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_AWS, AWSlabel, WindSpeedfmt, Speedunit);
 23fcb4e:	4628      	mov	r0, r5
 23fcb50:	9700      	str	r7, [sp, #0]
 23fcb52:	210f      	movs	r1, #15
 23fcb54:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcb58:	4b92      	ldr	r3, [pc, #584]	; (23fcda4 <_ZN12Adafruit_GPS9data_initEv+0x368>)
 23fcb5a:	4a93      	ldr	r2, [pc, #588]	; (23fcda8 <_ZN12Adafruit_GPS9data_initEv+0x36c>)
 23fcb5c:	f7ff ff36 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TWA, TWAlabel, Anglefmt, BoatAngleunit, 0,
 23fcb60:	4628      	mov	r0, r5
 23fcb62:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 23fcb66:	2110      	movs	r1, #16
 23fcb68:	4b87      	ldr	r3, [pc, #540]	; (23fcd88 <_ZN12Adafruit_GPS9data_initEv+0x34c>)
 23fcb6a:	4a90      	ldr	r2, [pc, #576]	; (23fcdac <_ZN12Adafruit_GPS9data_initEv+0x370>)
 23fcb6c:	f8cd b000 	str.w	fp, [sp]
 23fcb70:	f7ff ff2c 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TWD, TWDlabel, Anglefmt, TrueAngleunit, 0,
 23fcb74:	4628      	mov	r0, r5
 23fcb76:	e9cd 4801 	strd	r4, r8, [sp, #4]
 23fcb7a:	f8cd 9000 	str.w	r9, [sp]
 23fcb7e:	2113      	movs	r1, #19
 23fcb80:	4b81      	ldr	r3, [pc, #516]	; (23fcd88 <_ZN12Adafruit_GPS9data_initEv+0x34c>)
 23fcb82:	4a8b      	ldr	r2, [pc, #556]	; (23fcdb0 <_ZN12Adafruit_GPS9data_initEv+0x374>)
 23fcb84:	f7ff ff22 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TWS, TWSlabel, WindSpeedfmt, Speedunit);
 23fcb88:	4628      	mov	r0, r5
 23fcb8a:	9700      	str	r7, [sp, #0]
 23fcb8c:	2116      	movs	r1, #22
 23fcb8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcb92:	4b84      	ldr	r3, [pc, #528]	; (23fcda4 <_ZN12Adafruit_GPS9data_initEv+0x368>)
 23fcb94:	4a87      	ldr	r2, [pc, #540]	; (23fcdb4 <_ZN12Adafruit_GPS9data_initEv+0x378>)
 23fcb96:	f7ff ff19 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VMG, VMGlabel, BoatSpeedfmt, Speedunit);
 23fcb9a:	4628      	mov	r0, r5
 23fcb9c:	9700      	str	r7, [sp, #0]
 23fcb9e:	2117      	movs	r1, #23
 23fcba0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcba4:	4b76      	ldr	r3, [pc, #472]	; (23fcd80 <_ZN12Adafruit_GPS9data_initEv+0x344>)
 23fcba6:	4a84      	ldr	r2, [pc, #528]	; (23fcdb8 <_ZN12Adafruit_GPS9data_initEv+0x37c>)
 23fcba8:	f7ff ff10 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VMGWP, VMGWPlabel, BoatSpeedfmt, Speedunit);
 23fcbac:	4628      	mov	r0, r5
 23fcbae:	9700      	str	r7, [sp, #0]
 23fcbb0:	2118      	movs	r1, #24
 23fcbb2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcbb6:	4b72      	ldr	r3, [pc, #456]	; (23fcd80 <_ZN12Adafruit_GPS9data_initEv+0x344>)
 23fcbb8:	4a80      	ldr	r2, [pc, #512]	; (23fcdbc <_ZN12Adafruit_GPS9data_initEv+0x380>)
 23fcbba:	f7ff ff07 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_HEEL, HEELlabel, Anglefmt, HEELunit, 0,
 23fcbbe:	4b80      	ldr	r3, [pc, #512]	; (23fcdc0 <_ZN12Adafruit_GPS9data_initEv+0x384>)
 23fcbc0:	4628      	mov	r0, r5
 23fcbc2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 23fcbc6:	9300      	str	r3, [sp, #0]
 23fcbc8:	2119      	movs	r1, #25
 23fcbca:	4b6f      	ldr	r3, [pc, #444]	; (23fcd88 <_ZN12Adafruit_GPS9data_initEv+0x34c>)
 23fcbcc:	4a7d      	ldr	r2, [pc, #500]	; (23fcdc4 <_ZN12Adafruit_GPS9data_initEv+0x388>)
 23fcbce:	f7ff fefd 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_PITCH, PITCHlabel, Anglefmt, PITCHunit, 0,
 23fcbd2:	4b7d      	ldr	r3, [pc, #500]	; (23fcdc8 <_ZN12Adafruit_GPS9data_initEv+0x38c>)
 23fcbd4:	4628      	mov	r0, r5
 23fcbd6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 23fcbda:	9300      	str	r3, [sp, #0]
 23fcbdc:	211a      	movs	r1, #26
 23fcbde:	4b6a      	ldr	r3, [pc, #424]	; (23fcd88 <_ZN12Adafruit_GPS9data_initEv+0x34c>)
 23fcbe0:	4a7a      	ldr	r2, [pc, #488]	; (23fcdcc <_ZN12Adafruit_GPS9data_initEv+0x390>)
 23fcbe2:	f7ff fef3 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_HDG, HDGlabel, Anglefmt, MagAngleunit, 0,
 23fcbe6:	4b7a      	ldr	r3, [pc, #488]	; (23fcdd0 <_ZN12Adafruit_GPS9data_initEv+0x394>)
 23fcbe8:	4628      	mov	r0, r5
 23fcbea:	e9cd 4801 	strd	r4, r8, [sp, #4]
 23fcbee:	9300      	str	r3, [sp, #0]
 23fcbf0:	211b      	movs	r1, #27
 23fcbf2:	4b65      	ldr	r3, [pc, #404]	; (23fcd88 <_ZN12Adafruit_GPS9data_initEv+0x34c>)
 23fcbf4:	4a77      	ldr	r2, [pc, #476]	; (23fcdd4 <_ZN12Adafruit_GPS9data_initEv+0x398>)
 23fcbf6:	f7ff fee9 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_LOG, LOGlabel, LOGfmt, LOGunit);
 23fcbfa:	4e77      	ldr	r6, [pc, #476]	; (23fcdd8 <_ZN12Adafruit_GPS9data_initEv+0x39c>)
  initDataValue(NMEA_HDT, HDTlabel, Anglefmt, TrueAngleunit, 0,
 23fcbfc:	4628      	mov	r0, r5
 23fcbfe:	e9cd 4801 	strd	r4, r8, [sp, #4]
 23fcc02:	f8cd 9000 	str.w	r9, [sp]
 23fcc06:	211e      	movs	r1, #30
 23fcc08:	4b5f      	ldr	r3, [pc, #380]	; (23fcd88 <_ZN12Adafruit_GPS9data_initEv+0x34c>)
 23fcc0a:	4a74      	ldr	r2, [pc, #464]	; (23fcddc <_ZN12Adafruit_GPS9data_initEv+0x3a0>)
 23fcc0c:	f7ff fede 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VTW, VTWlabel, BoatSpeedfmt, Speedunit);
 23fcc10:	4628      	mov	r0, r5
 23fcc12:	9700      	str	r7, [sp, #0]
 23fcc14:	2121      	movs	r1, #33	; 0x21
 23fcc16:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcc1a:	4b59      	ldr	r3, [pc, #356]	; (23fcd80 <_ZN12Adafruit_GPS9data_initEv+0x344>)
 23fcc1c:	4a70      	ldr	r2, [pc, #448]	; (23fcde0 <_ZN12Adafruit_GPS9data_initEv+0x3a4>)
 23fcc1e:	f7ff fed5 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_LOG, LOGlabel, LOGfmt, LOGunit);
 23fcc22:	4628      	mov	r0, r5
 23fcc24:	9600      	str	r6, [sp, #0]
 23fcc26:	2122      	movs	r1, #34	; 0x22
 23fcc28:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcc2c:	4b6d      	ldr	r3, [pc, #436]	; (23fcde4 <_ZN12Adafruit_GPS9data_initEv+0x3a8>)
 23fcc2e:	4a6e      	ldr	r2, [pc, #440]	; (23fcde8 <_ZN12Adafruit_GPS9data_initEv+0x3ac>)
 23fcc30:	f7ff fecc 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_LOG, LOGRlabel, LOGRfmt, LOGunit);
 23fcc34:	4628      	mov	r0, r5
 23fcc36:	9600      	str	r6, [sp, #0]
 23fcc38:	2122      	movs	r1, #34	; 0x22
 23fcc3a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcc3e:	4b6b      	ldr	r3, [pc, #428]	; (23fcdec <_ZN12Adafruit_GPS9data_initEv+0x3b0>)
 23fcc40:	4a6b      	ldr	r2, [pc, #428]	; (23fcdf0 <_ZN12Adafruit_GPS9data_initEv+0x3b4>)
 23fcc42:	f7ff fec3 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_DEPTH, DEPTHlabel, DEPTHfmt, DEPTHunit);
 23fcc46:	4b6b      	ldr	r3, [pc, #428]	; (23fcdf4 <_ZN12Adafruit_GPS9data_initEv+0x3b8>)
  initDataValue(NMEA_RPM_M1, RPM_M1label, RPM_M1fmt, RPM_M1unit);
 23fcc48:	f8df a220 	ldr.w	sl, [pc, #544]	; 23fce6c <_ZN12Adafruit_GPS9data_initEv+0x430>
  initDataValue(NMEA_DEPTH, DEPTHlabel, DEPTHfmt, DEPTHunit);
 23fcc4c:	4628      	mov	r0, r5
  initDataValue(NMEA_TEMPERATURE_M1, TEMPERATURE_M1label, TEMPERATURE_M1fmt,
 23fcc4e:	f8df 9220 	ldr.w	r9, [pc, #544]	; 23fce70 <_ZN12Adafruit_GPS9data_initEv+0x434>
  initDataValue(NMEA_DEPTH, DEPTHlabel, DEPTHfmt, DEPTHunit);
 23fcc52:	9300      	str	r3, [sp, #0]
 23fcc54:	2124      	movs	r1, #36	; 0x24
 23fcc56:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcc5a:	4b67      	ldr	r3, [pc, #412]	; (23fcdf8 <_ZN12Adafruit_GPS9data_initEv+0x3bc>)
 23fcc5c:	4a67      	ldr	r2, [pc, #412]	; (23fcdfc <_ZN12Adafruit_GPS9data_initEv+0x3c0>)
 23fcc5e:	f7ff feb5 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_PRESSURE_M1, PRESSURE_M1label, PRESSURE_M1fmt,
 23fcc62:	f8df 8210 	ldr.w	r8, [pc, #528]	; 23fce74 <_ZN12Adafruit_GPS9data_initEv+0x438>
  initDataValue(NMEA_RPM_M1, RPM_M1label, RPM_M1fmt, RPM_M1unit);
 23fcc66:	4628      	mov	r0, r5
 23fcc68:	2125      	movs	r1, #37	; 0x25
 23fcc6a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcc6e:	4b64      	ldr	r3, [pc, #400]	; (23fce00 <_ZN12Adafruit_GPS9data_initEv+0x3c4>)
 23fcc70:	4a64      	ldr	r2, [pc, #400]	; (23fce04 <_ZN12Adafruit_GPS9data_initEv+0x3c8>)
 23fcc72:	f8cd a000 	str.w	sl, [sp]
 23fcc76:	f7ff fea9 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VOLTAGE_M1, VOLTAGE_M1label, VOLTAGE_M1fmt,
 23fcc7a:	4f63      	ldr	r7, [pc, #396]	; (23fce08 <_ZN12Adafruit_GPS9data_initEv+0x3cc>)
  initDataValue(NMEA_TEMPERATURE_M1, TEMPERATURE_M1label, TEMPERATURE_M1fmt,
 23fcc7c:	4628      	mov	r0, r5
 23fcc7e:	2126      	movs	r1, #38	; 0x26
 23fcc80:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcc84:	4b61      	ldr	r3, [pc, #388]	; (23fce0c <_ZN12Adafruit_GPS9data_initEv+0x3d0>)
 23fcc86:	4a62      	ldr	r2, [pc, #392]	; (23fce10 <_ZN12Adafruit_GPS9data_initEv+0x3d4>)
 23fcc88:	f8cd 9000 	str.w	r9, [sp]
 23fcc8c:	f7ff fe9e 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_CURRENT_M1, CURRENT_M1label, CURRENT_M1fmt,
 23fcc90:	4e60      	ldr	r6, [pc, #384]	; (23fce14 <_ZN12Adafruit_GPS9data_initEv+0x3d8>)
  initDataValue(NMEA_PRESSURE_M1, PRESSURE_M1label, PRESSURE_M1fmt,
 23fcc92:	4628      	mov	r0, r5
 23fcc94:	2127      	movs	r1, #39	; 0x27
 23fcc96:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcc9a:	4b5f      	ldr	r3, [pc, #380]	; (23fce18 <_ZN12Adafruit_GPS9data_initEv+0x3dc>)
 23fcc9c:	4a5f      	ldr	r2, [pc, #380]	; (23fce1c <_ZN12Adafruit_GPS9data_initEv+0x3e0>)
 23fcc9e:	f8cd 8000 	str.w	r8, [sp]
 23fcca2:	f7ff fe93 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VOLTAGE_M1, VOLTAGE_M1label, VOLTAGE_M1fmt,
 23fcca6:	4628      	mov	r0, r5
 23fcca8:	2128      	movs	r1, #40	; 0x28
 23fccaa:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fccae:	4b5c      	ldr	r3, [pc, #368]	; (23fce20 <_ZN12Adafruit_GPS9data_initEv+0x3e4>)
 23fccb0:	4a5c      	ldr	r2, [pc, #368]	; (23fce24 <_ZN12Adafruit_GPS9data_initEv+0x3e8>)
 23fccb2:	9700      	str	r7, [sp, #0]
 23fccb4:	f7ff fe8a 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_CURRENT_M1, CURRENT_M1label, CURRENT_M1fmt,
 23fccb8:	4628      	mov	r0, r5
 23fccba:	2129      	movs	r1, #41	; 0x29
 23fccbc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fccc0:	4b59      	ldr	r3, [pc, #356]	; (23fce28 <_ZN12Adafruit_GPS9data_initEv+0x3ec>)
 23fccc2:	4a5a      	ldr	r2, [pc, #360]	; (23fce2c <_ZN12Adafruit_GPS9data_initEv+0x3f0>)
 23fccc4:	9600      	str	r6, [sp, #0]
 23fccc6:	f7ff fe81 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_RPM_M2, RPM_M2label, RPM_M1fmt, RPM_M1unit);
 23fccca:	4628      	mov	r0, r5
 23fcccc:	212a      	movs	r1, #42	; 0x2a
 23fccce:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fccd2:	4b4b      	ldr	r3, [pc, #300]	; (23fce00 <_ZN12Adafruit_GPS9data_initEv+0x3c4>)
 23fccd4:	4a56      	ldr	r2, [pc, #344]	; (23fce30 <_ZN12Adafruit_GPS9data_initEv+0x3f4>)
 23fccd6:	f8cd a000 	str.w	sl, [sp]
 23fccda:	f7ff fe77 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TEMPERATURE_M2, TEMPERATURE_M2label, TEMPERATURE_M1fmt,
 23fccde:	4628      	mov	r0, r5
 23fcce0:	212b      	movs	r1, #43	; 0x2b
 23fcce2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcce6:	4b49      	ldr	r3, [pc, #292]	; (23fce0c <_ZN12Adafruit_GPS9data_initEv+0x3d0>)
 23fcce8:	4a52      	ldr	r2, [pc, #328]	; (23fce34 <_ZN12Adafruit_GPS9data_initEv+0x3f8>)
 23fccea:	f8cd 9000 	str.w	r9, [sp]
 23fccee:	f7ff fe6d 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_PRESSURE_M2, PRESSURE_M2label, PRESSURE_M1fmt,
 23fccf2:	4628      	mov	r0, r5
 23fccf4:	212c      	movs	r1, #44	; 0x2c
 23fccf6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fccfa:	4b47      	ldr	r3, [pc, #284]	; (23fce18 <_ZN12Adafruit_GPS9data_initEv+0x3dc>)
 23fccfc:	4a4e      	ldr	r2, [pc, #312]	; (23fce38 <_ZN12Adafruit_GPS9data_initEv+0x3fc>)
 23fccfe:	f8cd 8000 	str.w	r8, [sp]
 23fcd02:	f7ff fe63 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VOLTAGE_M2, VOLTAGE_M2label, VOLTAGE_M1fmt,
 23fcd06:	4628      	mov	r0, r5
 23fcd08:	212d      	movs	r1, #45	; 0x2d
 23fcd0a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcd0e:	4b44      	ldr	r3, [pc, #272]	; (23fce20 <_ZN12Adafruit_GPS9data_initEv+0x3e4>)
 23fcd10:	4a4a      	ldr	r2, [pc, #296]	; (23fce3c <_ZN12Adafruit_GPS9data_initEv+0x400>)
 23fcd12:	9700      	str	r7, [sp, #0]
 23fcd14:	f7ff fe5a 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_CURRENT_M2, CURRENT_M2label, CURRENT_M1fmt,
 23fcd18:	4628      	mov	r0, r5
 23fcd1a:	212e      	movs	r1, #46	; 0x2e
 23fcd1c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcd20:	4b41      	ldr	r3, [pc, #260]	; (23fce28 <_ZN12Adafruit_GPS9data_initEv+0x3ec>)
 23fcd22:	4a47      	ldr	r2, [pc, #284]	; (23fce40 <_ZN12Adafruit_GPS9data_initEv+0x404>)
 23fcd24:	9600      	str	r6, [sp, #0]
 23fcd26:	f7ff fe51 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TEMPERATURE_AIR, TEMPERATURE_AIRlabel, TEMPERATURE_AIRfmt,
 23fcd2a:	4b46      	ldr	r3, [pc, #280]	; (23fce44 <_ZN12Adafruit_GPS9data_initEv+0x408>)
 23fcd2c:	4628      	mov	r0, r5
 23fcd2e:	9300      	str	r3, [sp, #0]
 23fcd30:	212f      	movs	r1, #47	; 0x2f
 23fcd32:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcd36:	4b44      	ldr	r3, [pc, #272]	; (23fce48 <_ZN12Adafruit_GPS9data_initEv+0x40c>)
 23fcd38:	4a44      	ldr	r2, [pc, #272]	; (23fce4c <_ZN12Adafruit_GPS9data_initEv+0x410>)
 23fcd3a:	f7ff fe47 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TEMPERATURE_WATER, TEMPERATURE_WATERlabel,
 23fcd3e:	4b44      	ldr	r3, [pc, #272]	; (23fce50 <_ZN12Adafruit_GPS9data_initEv+0x414>)
 23fcd40:	4628      	mov	r0, r5
 23fcd42:	9300      	str	r3, [sp, #0]
 23fcd44:	2130      	movs	r1, #48	; 0x30
 23fcd46:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fcd4a:	4b42      	ldr	r3, [pc, #264]	; (23fce54 <_ZN12Adafruit_GPS9data_initEv+0x418>)
 23fcd4c:	4a42      	ldr	r2, [pc, #264]	; (23fce58 <_ZN12Adafruit_GPS9data_initEv+0x41c>)
 23fcd4e:	f7ff fe3d 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_HUMIDITY, HUMIDITYlabel, HUMIDITYfmt, HUMIDITYunit);
 23fcd52:	4b42      	ldr	r3, [pc, #264]	; (23fce5c <_ZN12Adafruit_GPS9data_initEv+0x420>)
 23fcd54:	4628      	mov	r0, r5
 23fcd56:	9300      	str	r3, [sp, #0]
 23fcd58:	e08e      	b.n	23fce78 <_ZN12Adafruit_GPS9data_initEv+0x43c>
 23fcd5a:	bf00      	nop
 23fcd5c:	10079d6f 	.word	0x10079d6f
 23fcd60:	10079d9b 	.word	0x10079d9b
 23fcd64:	10079e03 	.word	0x10079e03
 23fcd68:	10079d89 	.word	0x10079d89
 23fcd6c:	10079dd9 	.word	0x10079dd9
 23fcd70:	10079de1 	.word	0x10079de1
 23fcd74:	10079c79 	.word	0x10079c79
 23fcd78:	10079e23 	.word	0x10079e23
 23fcd7c:	10079c80 	.word	0x10079c80
 23fcd80:	10079cbc 	.word	0x10079cbc
 23fcd84:	10079de5 	.word	0x10079de5
 23fcd88:	10079db8 	.word	0x10079db8
 23fcd8c:	10079dbe 	.word	0x10079dbe
 23fcd90:	10079c6c 	.word	0x10079c6c
 23fcd94:	10079d95 	.word	0x10079d95
 23fcd98:	10079dfd 	.word	0x10079dfd
 23fcd9c:	10079c98 	.word	0x10079c98
 23fcda0:	10079db0 	.word	0x10079db0
 23fcda4:	10079ccf 	.word	0x10079ccf
 23fcda8:	10079db4 	.word	0x10079db4
 23fcdac:	10079de9 	.word	0x10079de9
 23fcdb0:	10079ded 	.word	0x10079ded
 23fcdb4:	10079df1 	.word	0x10079df1
 23fcdb8:	10079df5 	.word	0x10079df5
 23fcdbc:	10079c91 	.word	0x10079c91
 23fcdc0:	10079dd0 	.word	0x10079dd0
 23fcdc4:	10079e08 	.word	0x10079e08
 23fcdc8:	10079e12 	.word	0x10079e12
 23fcdcc:	10079c87 	.word	0x10079c87
 23fcdd0:	10079cc7 	.word	0x10079cc7
 23fcdd4:	10079dc8 	.word	0x10079dc8
 23fcdd8:	10079daa 	.word	0x10079daa
 23fcddc:	10079dcc 	.word	0x10079dcc
 23fcde0:	10079df9 	.word	0x10079df9
 23fcde4:	10079d8f 	.word	0x10079d8f
 23fcde8:	10079ddd 	.word	0x10079ddd
 23fcdec:	10079da4 	.word	0x10079da4
 23fcdf0:	10079e0d 	.word	0x10079e0d
 23fcdf4:	10079e01 	.word	0x10079e01
 23fcdf8:	10079dc2 	.word	0x10079dc2
 23fcdfc:	10079c73 	.word	0x10079c73
 23fce00:	10079e1d 	.word	0x10079e1d
 23fce04:	10079ca6 	.word	0x10079ca6
 23fce08:	10079d13 	.word	0x10079d13
 23fce0c:	10079d49 	.word	0x10079d49
 23fce10:	10079d61 	.word	0x10079d61
 23fce14:	10079d08 	.word	0x10079d08
 23fce18:	10079d0d 	.word	0x10079d0d
 23fce1c:	10079d3d 	.word	0x10079d3d
 23fce20:	10079cf8 	.word	0x10079cf8
 23fce24:	10079d2d 	.word	0x10079d2d
 23fce28:	10079ce0 	.word	0x10079ce0
 23fce2c:	10079d19 	.word	0x10079d19
 23fce30:	10079cae 	.word	0x10079cae
 23fce34:	10079d68 	.word	0x10079d68
 23fce38:	10079d43 	.word	0x10079d43
 23fce3c:	10079d35 	.word	0x10079d35
 23fce40:	10079d21 	.word	0x10079d21
 23fce44:	10079d5b 	.word	0x10079d5b
 23fce48:	10079d4f 	.word	0x10079d4f
 23fce4c:	10079d73 	.word	0x10079d73
 23fce50:	10079d7d 	.word	0x10079d7d
 23fce54:	10079d77 	.word	0x10079d77
 23fce58:	10079d83 	.word	0x10079d83
 23fce5c:	10079cc2 	.word	0x10079cc2
 23fce60:	10079cef 	.word	0x10079cef
 23fce64:	10079dad 	.word	0x10079dad
 23fce68:	10079cd8 	.word	0x10079cd8
 23fce6c:	10079c8d 	.word	0x10079c8d
 23fce70:	10079d55 	.word	0x10079d55
 23fce74:	10079d29 	.word	0x10079d29
 23fce78:	2131      	movs	r1, #49	; 0x31
 23fce7a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fce7e:	4b08      	ldr	r3, [pc, #32]	; (23fcea0 <_ZN12Adafruit_GPS9data_initEv+0x464>)
 23fce80:	4a08      	ldr	r2, [pc, #32]	; (23fcea4 <_ZN12Adafruit_GPS9data_initEv+0x468>)
 23fce82:	f7ff fda3 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_BAROMETER, BAROMETERlabel, BAROMETERfmt, BAROMETERunit);
 23fce86:	4b08      	ldr	r3, [pc, #32]	; (23fcea8 <_ZN12Adafruit_GPS9data_initEv+0x46c>)
 23fce88:	2132      	movs	r1, #50	; 0x32
 23fce8a:	9300      	str	r3, [sp, #0]
 23fce8c:	4628      	mov	r0, r5
 23fce8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fce92:	4b06      	ldr	r3, [pc, #24]	; (23fceac <_ZN12Adafruit_GPS9data_initEv+0x470>)
 23fce94:	4a06      	ldr	r2, [pc, #24]	; (23fceb0 <_ZN12Adafruit_GPS9data_initEv+0x474>)
 23fce96:	f7ff fd99 	bl	23fc9cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
}
 23fce9a:	b005      	add	sp, #20
 23fce9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcea0:	10079ca0 	.word	0x10079ca0
 23fcea4:	10079ce6 	.word	0x10079ce6
 23fcea8:	10079cd5 	.word	0x10079cd5
 23fceac:	10079cb6 	.word	0x10079cb6
 23fceb0:	10079cfe 	.word	0x10079cfe

023fceb4 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t>:
    @param idx The data index for the value to have history removed
    @return none
*/
/**************************************************************************/
void Adafruit_GPS::removeHistory(nmea_index_t idx) {
  if (idx < NMEA_MAX_INDEX) {
 23fceb4:	293f      	cmp	r1, #63	; 0x3f
void Adafruit_GPS::removeHistory(nmea_index_t idx) {
 23fceb6:	b510      	push	{r4, lr}
  if (idx < NMEA_MAX_INDEX) {
 23fceb8:	d80e      	bhi.n	23fced8 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t+0x24>
    if (val[idx].hist == NULL)
 23fceba:	eb00 1441 	add.w	r4, r0, r1, lsl #5
 23fcebe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23fcec2:	b14b      	cbz	r3, 23fced8 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t+0x24>
      return;
    free(val[idx].hist->data);
 23fcec4:	6818      	ldr	r0, [r3, #0]
 23fcec6:	f001 fb11 	bl	23fe4ec <free>
    free(val[idx].hist);
 23fceca:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 23fcece:	f001 fb0d 	bl	23fe4ec <free>
    val[idx].hist = NULL;
 23fced2:	2300      	movs	r3, #0
 23fced4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  }
}
 23fced8:	bd10      	pop	{r4, pc}

023fceda <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 23fceda:	4770      	bx	lr

023fcedc <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 23fcedc:	b510      	push	{r4, lr}
 23fcede:	4604      	mov	r4, r0
  }
 23fcee0:	2110      	movs	r1, #16
 23fcee2:	f7ff fcc4 	bl	23fc86e <_ZdlPvj>
 23fcee6:	4620      	mov	r0, r4
 23fcee8:	bd10      	pop	{r4, pc}
	...

023fceec <_ZN12Adafruit_GPSD1Ev>:
/*!
    @brief    Destroy the object.
    @return   none
*/
/**************************************************************************/
Adafruit_GPS::~Adafruit_GPS() {
 23fceec:	b513      	push	{r0, r1, r4, lr}
#ifdef NMEA_EXTENSIONS
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
 23fceee:	2400      	movs	r4, #0
Adafruit_GPS::~Adafruit_GPS() {
 23fcef0:	4b05      	ldr	r3, [pc, #20]	; (23fcf08 <_ZN12Adafruit_GPSD1Ev+0x1c>)
 23fcef2:	6003      	str	r3, [r0, #0]
    removeHistory((nmea_index_t)i); // to free any history mallocs
 23fcef4:	b2e1      	uxtb	r1, r4
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
 23fcef6:	3401      	adds	r4, #1
    removeHistory((nmea_index_t)i); // to free any history mallocs
 23fcef8:	9001      	str	r0, [sp, #4]
 23fcefa:	f7ff ffdb 	bl	23fceb4 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t>
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
 23fcefe:	2c40      	cmp	r4, #64	; 0x40
 23fcf00:	9801      	ldr	r0, [sp, #4]
 23fcf02:	d1f7      	bne.n	23fcef4 <_ZN12Adafruit_GPSD1Ev+0x8>
#endif
}
 23fcf04:	b002      	add	sp, #8
 23fcf06:	bd10      	pop	{r4, pc}
 23fcf08:	023ff814 	.word	0x023ff814

023fcf0c <_ZN12Adafruit_GPSD0Ev>:
Adafruit_GPS::~Adafruit_GPS() {
 23fcf0c:	b510      	push	{r4, lr}
 23fcf0e:	4604      	mov	r4, r0
}
 23fcf10:	f7ff ffec 	bl	23fceec <_ZN12Adafruit_GPSD1Ev>
 23fcf14:	4620      	mov	r0, r4
 23fcf16:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 23fcf1a:	f7ff fca8 	bl	23fc86e <_ZdlPvj>
 23fcf1e:	4620      	mov	r0, r4
 23fcf20:	bd10      	pop	{r4, pc}

023fcf22 <_ZN12Adafruit_GPS5writeEh>:
   functionality
    @param c A single byte to send
    @return Bytes written - 1 on success, 0 on failure
*/
/**************************************************************************/
size_t Adafruit_GPS::write(uint8_t c) {
 23fcf22:	b570      	push	{r4, r5, r6, lr}
 23fcf24:	4604      	mov	r4, r0
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  if (gpsSwSerial) {
    return gpsSwSerial->write(c);
  }
#endif
  if (gpsHwSerial) {
 23fcf26:	f8d0 09d4 	ldr.w	r0, [r0, #2516]	; 0x9d4
size_t Adafruit_GPS::write(uint8_t c) {
 23fcf2a:	460e      	mov	r6, r1
  if (gpsHwSerial) {
 23fcf2c:	b120      	cbz	r0, 23fcf38 <_ZN12Adafruit_GPS5writeEh+0x16>
    gpsSPI->endTransaction();
    return 1;
  }

  return 0;
}
 23fcf2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return gpsStream->write(c);
 23fcf32:	6803      	ldr	r3, [r0, #0]
 23fcf34:	689b      	ldr	r3, [r3, #8]
 23fcf36:	4718      	bx	r3
  if (gpsStream) {
 23fcf38:	f8d4 09d8 	ldr.w	r0, [r4, #2520]	; 0x9d8
 23fcf3c:	2800      	cmp	r0, #0
 23fcf3e:	d1f6      	bne.n	23fcf2e <_ZN12Adafruit_GPS5writeEh+0xc>
  if (gpsI2C) {
 23fcf40:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
 23fcf44:	bb08      	cbnz	r0, 23fcf8a <_ZN12Adafruit_GPS5writeEh+0x68>
  if (gpsSPI) {
 23fcf46:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
 23fcf4a:	b358      	cbz	r0, 23fcfa4 <_ZN12Adafruit_GPS5writeEh+0x82>
    gpsSPI->beginTransaction(gpsSPI_settings);
 23fcf4c:	f604 11e8 	addw	r1, r4, #2536	; 0x9e8
 23fcf50:	f001 fbb6 	bl	23fe6c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    if (gpsSPI_cs >= 0) {
 23fcf54:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
 23fcf58:	2800      	cmp	r0, #0
 23fcf5a:	db03      	blt.n	23fcf64 <_ZN12Adafruit_GPS5writeEh+0x42>
      digitalWrite(gpsSPI_cs, LOW);
 23fcf5c:	2100      	movs	r1, #0
 23fcf5e:	b280      	uxth	r0, r0
 23fcf60:	f002 f98d 	bl	23ff27e <digitalWrite>
    c = gpsSPI->transfer(c);
 23fcf64:	4631      	mov	r1, r6
 23fcf66:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
 23fcf6a:	f001 fc6f 	bl	23fe84c <_ZN8SPIClass8transferEh>
    if (gpsSPI_cs >= 0) {
 23fcf6e:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
 23fcf72:	2800      	cmp	r0, #0
 23fcf74:	db03      	blt.n	23fcf7e <_ZN12Adafruit_GPS5writeEh+0x5c>
      digitalWrite(gpsSPI_cs, HIGH);
 23fcf76:	2101      	movs	r1, #1
 23fcf78:	b280      	uxth	r0, r0
 23fcf7a:	f002 f980 	bl	23ff27e <digitalWrite>
    gpsSPI->endTransaction();
 23fcf7e:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
 23fcf82:	f001 fb83 	bl	23fe68c <_ZN8SPIClass14endTransactionEv>
    return 1;
 23fcf86:	2501      	movs	r5, #1
 23fcf88:	e00d      	b.n	23fcfa6 <_ZN12Adafruit_GPS5writeEh+0x84>
    gpsI2C->beginTransmission(_i2caddr);
 23fcf8a:	f894 1a5c 	ldrb.w	r1, [r4, #2652]	; 0xa5c
 23fcf8e:	f002 f801 	bl	23fef94 <_ZN7TwoWire17beginTransmissionEh>
    if (gpsI2C->write(c) != 1) {
 23fcf92:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
 23fcf96:	4631      	mov	r1, r6
 23fcf98:	6803      	ldr	r3, [r0, #0]
 23fcf9a:	689b      	ldr	r3, [r3, #8]
 23fcf9c:	4798      	blx	r3
 23fcf9e:	2801      	cmp	r0, #1
 23fcfa0:	4605      	mov	r5, r0
 23fcfa2:	d002      	beq.n	23fcfaa <_ZN12Adafruit_GPS5writeEh+0x88>
      return 0;
 23fcfa4:	2500      	movs	r5, #0
}
 23fcfa6:	4628      	mov	r0, r5
 23fcfa8:	bd70      	pop	{r4, r5, r6, pc}
    if (gpsI2C->endTransmission(true) == 0) {
 23fcfaa:	4601      	mov	r1, r0
 23fcfac:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
 23fcfb0:	f001 fff7 	bl	23fefa2 <_ZN7TwoWire15endTransmissionEh>
 23fcfb4:	2800      	cmp	r0, #0
 23fcfb6:	d1c6      	bne.n	23fcf46 <_ZN12Adafruit_GPS5writeEh+0x24>
 23fcfb8:	e7f5      	b.n	23fcfa6 <_ZN12Adafruit_GPS5writeEh+0x84>

023fcfba <_ZN5Print6printfEPKcz>:

    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23fcfba:	b40e      	push	{r1, r2, r3}
 23fcfbc:	b503      	push	{r0, r1, lr}
 23fcfbe:	ab03      	add	r3, sp, #12
 23fcfc0:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23fcfc4:	2100      	movs	r1, #0
        va_start(args, format);
 23fcfc6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23fcfc8:	f001 fd1b 	bl	23fea02 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23fcfcc:	b002      	add	sp, #8
 23fcfce:	f85d eb04 	ldr.w	lr, [sp], #4
 23fcfd2:	b003      	add	sp, #12
 23fcfd4:	4770      	bx	lr
	...

023fcfd8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 23fcfd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fcfda:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 23fcfdc:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 23fcfde:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 23fcfe0:	68a3      	ldr	r3, [r4, #8]
 23fcfe2:	b132      	cbz	r2, 23fcff2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 23fcfe4:	b9a3      	cbnz	r3, 23fd010 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 23fcfe6:	490b      	ldr	r1, [pc, #44]	; (23fd014 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 23fcfe8:	b002      	add	sp, #8
 23fcfea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 23fcfee:	f001 bccd 	b.w	23fe98c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23fcff2:	4a09      	ldr	r2, [pc, #36]	; (23fd018 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 23fcff4:	7b26      	ldrb	r6, [r4, #12]
 23fcff6:	4d09      	ldr	r5, [pc, #36]	; (23fd01c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 23fcff8:	4909      	ldr	r1, [pc, #36]	; (23fd020 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 23fcffa:	7b64      	ldrb	r4, [r4, #13]
 23fcffc:	2e01      	cmp	r6, #1
 23fcffe:	bf18      	it	ne
 23fd000:	4629      	movne	r1, r5
 23fd002:	e9cd 1400 	strd	r1, r4, [sp]
 23fd006:	4907      	ldr	r1, [pc, #28]	; (23fd024 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 23fd008:	f7ff ffd7 	bl	23fcfba <_ZN5Print6printfEPKcz>
  }
 23fd00c:	b002      	add	sp, #8
 23fd00e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23fd010:	4a05      	ldr	r2, [pc, #20]	; (23fd028 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 23fd012:	e7ef      	b.n	23fcff4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 23fd014:	023ff74b 	.word	0x023ff74b
 23fd018:	023ff742 	.word	0x023ff742
 23fd01c:	023ff747 	.word	0x023ff747
 23fd020:	023ff743 	.word	0x023ff743
 23fd024:	023ff761 	.word	0x023ff761
 23fd028:	023ff73a 	.word	0x023ff73a

023fd02c <_ZN12Adafruit_GPS5beginEm>:
bool Adafruit_GPS::begin(uint32_t baud_or_i2caddr) {
 23fd02c:	b570      	push	{r4, r5, r6, lr}
 23fd02e:	4604      	mov	r4, r0
  if (gpsHwSerial) {
 23fd030:	f8d0 09d4 	ldr.w	r0, [r0, #2516]	; 0x9d4
bool Adafruit_GPS::begin(uint32_t baud_or_i2caddr) {
 23fd034:	460d      	mov	r5, r1
  if (gpsHwSerial) {
 23fd036:	b108      	cbz	r0, 23fd03c <_ZN12Adafruit_GPS5beginEm+0x10>
    gpsHwSerial->begin(baud_or_i2caddr);
 23fd038:	f001 ff56 	bl	23feee8 <_ZN11USARTSerial5beginEm>
  if (gpsI2C) {
 23fd03c:	f8d4 69dc 	ldr.w	r6, [r4, #2524]	; 0x9dc
 23fd040:	b1a6      	cbz	r6, 23fd06c <_ZN12Adafruit_GPS5beginEm+0x40>
    gpsI2C->begin();
 23fd042:	4630      	mov	r0, r6
 23fd044:	f001 ffa0 	bl	23fef88 <_ZN7TwoWire5beginEv>
    if (baud_or_i2caddr > 0x7F) {
 23fd048:	2d80      	cmp	r5, #128	; 0x80
 23fd04a:	bf28      	it	cs
 23fd04c:	2510      	movcs	r5, #16
 23fd04e:	b2e9      	uxtb	r1, r5
    gpsI2C->beginTransmission(_i2caddr);
 23fd050:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
 23fd054:	f884 1a5c 	strb.w	r1, [r4, #2652]	; 0xa5c
 23fd058:	f001 ff9c 	bl	23fef94 <_ZN7TwoWire17beginTransmissionEh>
    return (gpsI2C->endTransmission() == 0);
 23fd05c:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
 23fd060:	f001 ffa3 	bl	23fefaa <_ZN7TwoWire15endTransmissionEv>
 23fd064:	fab0 f080 	clz	r0, r0
 23fd068:	0940      	lsrs	r0, r0, #5
}
 23fd06a:	bd70      	pop	{r4, r5, r6, pc}
  if (gpsSPI) {
 23fd06c:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
 23fd070:	b1a8      	cbz	r0, 23fd09e <_ZN12Adafruit_GPS5beginEm+0x72>
    gpsSPI->begin();
 23fd072:	f001 facf 	bl	23fe614 <_ZN8SPIClass5beginEv>
class SPISettings : public Printable {
 23fd076:	2101      	movs	r1, #1
    if (gpsSPI_cs >= 0) {
 23fd078:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
 23fd07c:	f884 69ec 	strb.w	r6, [r4, #2540]	; 0x9ec
 23fd080:	2800      	cmp	r0, #0
 23fd082:	f8c4 59f0 	str.w	r5, [r4, #2544]	; 0x9f0
 23fd086:	f8a4 19f4 	strh.w	r1, [r4, #2548]	; 0x9f4
 23fd08a:	db08      	blt.n	23fd09e <_ZN12Adafruit_GPS5beginEm+0x72>
      pinMode(gpsSPI_cs, OUTPUT);
 23fd08c:	b280      	uxth	r0, r0
 23fd08e:	f002 f8e5 	bl	23ff25c <pinMode>
      digitalWrite(gpsSPI_cs, HIGH);
 23fd092:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
 23fd096:	2101      	movs	r1, #1
 23fd098:	b280      	uxth	r0, r0
 23fd09a:	f002 f8f0 	bl	23ff27e <digitalWrite>
  delay(10);
 23fd09e:	200a      	movs	r0, #10
 23fd0a0:	f001 fd1c 	bl	23feadc <delay>
  return true;
 23fd0a4:	2001      	movs	r0, #1
 23fd0a6:	e7e0      	b.n	23fd06a <_ZN12Adafruit_GPS5beginEm+0x3e>

023fd0a8 <_ZN12Adafruit_GPS11common_initEv>:
  currentline = line1;
 23fd0a8:	f500 6128 	add.w	r1, r0, #2688	; 0xa80
 23fd0ac:	f8c0 1b74 	str.w	r1, [r0, #2932]	; 0xb74
  lastline = line2;
 23fd0b0:	f600 21f8 	addw	r1, r0, #2808	; 0xaf8
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 23fd0b4:	2200      	movs	r2, #0
  lastline = line2;
 23fd0b6:	f8c0 1b78 	str.w	r1, [r0, #2936]	; 0xb78
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation =
 23fd0ba:	2100      	movs	r1, #0
  recvdflag = false;
 23fd0bc:	f880 2b7c 	strb.w	r2, [r0, #2940]	; 0xb7c
  hour = minute = seconds = year = month = day = fixquality = fixquality_3d =
 23fd0c0:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 23fd0c4:	f8c0 29d4 	str.w	r2, [r0, #2516]	; 0x9d4
  gpsStream = NULL;   // port pointer in corresponding constructor
 23fd0c8:	f8c0 29d8 	str.w	r2, [r0, #2520]	; 0x9d8
  gpsI2C = NULL;
 23fd0cc:	f8c0 29dc 	str.w	r2, [r0, #2524]	; 0x9dc
  gpsSPI = NULL;
 23fd0d0:	f8c0 29e0 	str.w	r2, [r0, #2528]	; 0x9e0
  paused = false;
 23fd0d4:	f880 29d0 	strb.w	r2, [r0, #2512]	; 0x9d0
  lineidx = 0;
 23fd0d8:	f880 2b70 	strb.w	r2, [r0, #2928]	; 0xb70
  hour = minute = seconds = year = month = day = fixquality = fixquality_3d =
 23fd0dc:	8742      	strh	r2, [r0, #58]	; 0x3a
 23fd0de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  milliseconds = 0;             // uint16_t
 23fd0e2:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hour = minute = seconds = year = month = day = fixquality = fixquality_3d =
 23fd0e4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 23fd0e8:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation =
 23fd0ec:	65c1      	str	r1, [r0, #92]	; 0x5c
 23fd0ee:	6601      	str	r1, [r0, #96]	; 0x60
 23fd0f0:	6641      	str	r1, [r0, #100]	; 0x64
 23fd0f2:	6681      	str	r1, [r0, #104]	; 0x68
 23fd0f4:	66c1      	str	r1, [r0, #108]	; 0x6c
      HDOP = VDOP = PDOP = 0.0; // nmea_float_t
 23fd0f6:	6701      	str	r1, [r0, #112]	; 0x70
 23fd0f8:	6741      	str	r1, [r0, #116]	; 0x74
 23fd0fa:	6781      	str	r1, [r0, #120]	; 0x78
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation =
 23fd0fc:	6481      	str	r1, [r0, #72]	; 0x48
 23fd0fe:	6441      	str	r1, [r0, #68]	; 0x44
  data_init();
 23fd100:	f7ff bc9c 	b.w	23fca3c <_ZN12Adafruit_GPS9data_initEv>

023fd104 <_ZN12Adafruit_GPSC1EP7TwoWire>:
Adafruit_GPS::Adafruit_GPS(TwoWire *theWire) {
 23fd104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Print() : write_error(0) {}
 23fd108:	2500      	movs	r5, #0
 23fd10a:	4604      	mov	r4, r0
 23fd10c:	4b76      	ldr	r3, [pc, #472]	; (23fd2e8 <_ZN12Adafruit_GPSC1EP7TwoWire+0x1e4>)
 23fd10e:	2214      	movs	r2, #20
 23fd110:	6003      	str	r3, [r0, #0]
 23fd112:	6045      	str	r5, [r0, #4]
 23fd114:	6085      	str	r5, [r0, #8]
 23fd116:	8185      	strh	r5, [r0, #12]
 23fd118:	7385      	strb	r5, [r0, #14]
 23fd11a:	4688      	mov	r8, r1
 23fd11c:	300f      	adds	r0, #15
 23fd11e:	4629      	mov	r1, r5
 23fd120:	f002 f9fd 	bl	23ff51e <memset>
 23fd124:	2214      	movs	r2, #20
 23fd126:	4629      	mov	r1, r5
 23fd128:	f8a4 5023 	strh.w	r5, [r4, #35]	; 0x23
 23fd12c:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 23fd130:	f104 0026 	add.w	r0, r4, #38	; 0x26
 23fd134:	f002 f9f3 	bl	23ff51e <memset>
 23fd138:	f645 0358 	movw	r3, #22616	; 0x5858
 23fd13c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 23fd140:	2358      	movs	r3, #88	; 0x58
 23fd142:	f44f 6200 	mov.w	r2, #2048	; 0x800
 23fd146:	4629      	mov	r1, r5
 23fd148:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
 23fd14c:	f104 0090 	add.w	r0, r4, #144	; 0x90
 23fd150:	f002 f9e5 	bl	23ff51e <memset>
 23fd154:	4623      	mov	r3, r4
 23fd156:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 23fd15a:	f504 6200 	add.w	r2, r4, #2048	; 0x800
 23fd15e:	f8a3 109c 	strh.w	r1, [r3, #156]	; 0x9c
 23fd162:	3320      	adds	r3, #32
 23fd164:	4293      	cmp	r3, r2
 23fd166:	d1fa      	bne.n	23fd15e <_ZN12Adafruit_GPSC1EP7TwoWire+0x5a>
 23fd168:	4a60      	ldr	r2, [pc, #384]	; (23fd2ec <_ZN12Adafruit_GPSC1EP7TwoWire+0x1e8>)
 23fd16a:	f504 6309 	add.w	r3, r4, #2192	; 0x890
 23fd16e:	601a      	str	r2, [r3, #0]
 23fd170:	2200      	movs	r2, #0
 23fd172:	2500      	movs	r5, #0
 23fd174:	f604 0394 	addw	r3, r4, #2196	; 0x894
 23fd178:	601a      	str	r2, [r3, #0]
 23fd17a:	2100      	movs	r1, #0
 23fd17c:	2214      	movs	r2, #20
 23fd17e:	f604 0098 	addw	r0, r4, #2200	; 0x898
 23fd182:	f002 f9cc 	bl	23ff51e <memset>
 23fd186:	4f5a      	ldr	r7, [pc, #360]	; (23fd2f0 <_ZN12Adafruit_GPSC1EP7TwoWire+0x1ec>)
 23fd188:	2214      	movs	r2, #20
 23fd18a:	2100      	movs	r1, #0
 23fd18c:	f604 00ac 	addw	r0, r4, #2220	; 0x8ac
 23fd190:	f002 f9c5 	bl	23ff51e <memset>
 23fd194:	f604 160c 	addw	r6, r4, #2316	; 0x90c
 23fd198:	223f      	movs	r2, #63	; 0x3f
 23fd19a:	2100      	movs	r1, #0
 23fd19c:	f504 600c 	add.w	r0, r4, #2240	; 0x8c0
 23fd1a0:	f002 f9bd 	bl	23ff51e <memset>
 23fd1a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 23fd1a6:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
 23fd1aa:	f8c4 5904 	str.w	r5, [r4, #2308]	; 0x904
 23fd1ae:	f8c4 5908 	str.w	r5, [r4, #2312]	; 0x908
 23fd1b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23fd1b4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 23fd1b8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 23fd1bc:	4629      	mov	r1, r5
 23fd1be:	2254      	movs	r2, #84	; 0x54
 23fd1c0:	f604 1028 	addw	r0, r4, #2344	; 0x928
 23fd1c4:	f002 f9ab 	bl	23ff51e <memset>
 23fd1c8:	4b4a      	ldr	r3, [pc, #296]	; (23fd2f4 <_ZN12Adafruit_GPSC1EP7TwoWire+0x1f0>)
 23fd1ca:	4e4b      	ldr	r6, [pc, #300]	; (23fd2f8 <_ZN12Adafruit_GPSC1EP7TwoWire+0x1f4>)
 23fd1cc:	f8c4 3928 	str.w	r3, [r4, #2344]	; 0x928
 23fd1d0:	4b4a      	ldr	r3, [pc, #296]	; (23fd2fc <_ZN12Adafruit_GPSC1EP7TwoWire+0x1f8>)
 23fd1d2:	4629      	mov	r1, r5
 23fd1d4:	f8c4 392c 	str.w	r3, [r4, #2348]	; 0x92c
 23fd1d8:	4b49      	ldr	r3, [pc, #292]	; (23fd300 <_ZN12Adafruit_GPSC1EP7TwoWire+0x1fc>)
 23fd1da:	223c      	movs	r2, #60	; 0x3c
 23fd1dc:	f8c4 3930 	str.w	r3, [r4, #2352]	; 0x930
 23fd1e0:	4b48      	ldr	r3, [pc, #288]	; (23fd304 <_ZN12Adafruit_GPSC1EP7TwoWire+0x200>)
 23fd1e2:	f8c4 6974 	str.w	r6, [r4, #2420]	; 0x974
 23fd1e6:	f8c4 3934 	str.w	r3, [r4, #2356]	; 0x934
 23fd1ea:	4b47      	ldr	r3, [pc, #284]	; (23fd308 <_ZN12Adafruit_GPSC1EP7TwoWire+0x204>)
 23fd1ec:	f604 107c 	addw	r0, r4, #2428	; 0x97c
 23fd1f0:	f8c4 3938 	str.w	r3, [r4, #2360]	; 0x938
 23fd1f4:	4b45      	ldr	r3, [pc, #276]	; (23fd30c <_ZN12Adafruit_GPSC1EP7TwoWire+0x208>)
 23fd1f6:	f8c4 393c 	str.w	r3, [r4, #2364]	; 0x93c
 23fd1fa:	4b45      	ldr	r3, [pc, #276]	; (23fd310 <_ZN12Adafruit_GPSC1EP7TwoWire+0x20c>)
 23fd1fc:	f8c4 3940 	str.w	r3, [r4, #2368]	; 0x940
 23fd200:	4b44      	ldr	r3, [pc, #272]	; (23fd314 <_ZN12Adafruit_GPSC1EP7TwoWire+0x210>)
 23fd202:	f8c4 3944 	str.w	r3, [r4, #2372]	; 0x944
 23fd206:	4b44      	ldr	r3, [pc, #272]	; (23fd318 <_ZN12Adafruit_GPSC1EP7TwoWire+0x214>)
 23fd208:	f8c4 3948 	str.w	r3, [r4, #2376]	; 0x948
 23fd20c:	4b43      	ldr	r3, [pc, #268]	; (23fd31c <_ZN12Adafruit_GPSC1EP7TwoWire+0x218>)
 23fd20e:	f8c4 394c 	str.w	r3, [r4, #2380]	; 0x94c
 23fd212:	4b43      	ldr	r3, [pc, #268]	; (23fd320 <_ZN12Adafruit_GPSC1EP7TwoWire+0x21c>)
 23fd214:	f8c4 3950 	str.w	r3, [r4, #2384]	; 0x950
 23fd218:	4b42      	ldr	r3, [pc, #264]	; (23fd324 <_ZN12Adafruit_GPSC1EP7TwoWire+0x220>)
 23fd21a:	f8c4 3954 	str.w	r3, [r4, #2388]	; 0x954
 23fd21e:	4b42      	ldr	r3, [pc, #264]	; (23fd328 <_ZN12Adafruit_GPSC1EP7TwoWire+0x224>)
 23fd220:	f8c4 3958 	str.w	r3, [r4, #2392]	; 0x958
 23fd224:	4b41      	ldr	r3, [pc, #260]	; (23fd32c <_ZN12Adafruit_GPSC1EP7TwoWire+0x228>)
 23fd226:	f8c4 395c 	str.w	r3, [r4, #2396]	; 0x95c
 23fd22a:	4b41      	ldr	r3, [pc, #260]	; (23fd330 <_ZN12Adafruit_GPSC1EP7TwoWire+0x22c>)
 23fd22c:	f8c4 3960 	str.w	r3, [r4, #2400]	; 0x960
 23fd230:	4b40      	ldr	r3, [pc, #256]	; (23fd334 <_ZN12Adafruit_GPSC1EP7TwoWire+0x230>)
 23fd232:	f8c4 3964 	str.w	r3, [r4, #2404]	; 0x964
 23fd236:	4b40      	ldr	r3, [pc, #256]	; (23fd338 <_ZN12Adafruit_GPSC1EP7TwoWire+0x234>)
 23fd238:	f8c4 3968 	str.w	r3, [r4, #2408]	; 0x968
 23fd23c:	4b3f      	ldr	r3, [pc, #252]	; (23fd33c <_ZN12Adafruit_GPSC1EP7TwoWire+0x238>)
 23fd23e:	f8c4 396c 	str.w	r3, [r4, #2412]	; 0x96c
 23fd242:	4b3f      	ldr	r3, [pc, #252]	; (23fd340 <_ZN12Adafruit_GPSC1EP7TwoWire+0x23c>)
 23fd244:	f8c4 3970 	str.w	r3, [r4, #2416]	; 0x970
 23fd248:	f002 f969 	bl	23ff51e <memset>
 23fd24c:	4b3d      	ldr	r3, [pc, #244]	; (23fd344 <_ZN12Adafruit_GPSC1EP7TwoWire+0x240>)
      dataMode_{dataMode}
 23fd24e:	4a3e      	ldr	r2, [pc, #248]	; (23fd348 <_ZN12Adafruit_GPSC1EP7TwoWire+0x244>)
 23fd250:	f8c4 397c 	str.w	r3, [r4, #2428]	; 0x97c
 23fd254:	4b3d      	ldr	r3, [pc, #244]	; (23fd34c <_ZN12Adafruit_GPSC1EP7TwoWire+0x248>)
 23fd256:	f8c4 29e8 	str.w	r2, [r4, #2536]	; 0x9e8
 23fd25a:	f8c4 3980 	str.w	r3, [r4, #2432]	; 0x980
 23fd25e:	4b3c      	ldr	r3, [pc, #240]	; (23fd350 <_ZN12Adafruit_GPSC1EP7TwoWire+0x24c>)
 23fd260:	4a3c      	ldr	r2, [pc, #240]	; (23fd354 <_ZN12Adafruit_GPSC1EP7TwoWire+0x250>)
 23fd262:	f8c4 3984 	str.w	r3, [r4, #2436]	; 0x984
 23fd266:	4b3c      	ldr	r3, [pc, #240]	; (23fd358 <_ZN12Adafruit_GPSC1EP7TwoWire+0x254>)
 23fd268:	f8c4 29f0 	str.w	r2, [r4, #2544]	; 0x9f0
 23fd26c:	f8c4 3988 	str.w	r3, [r4, #2440]	; 0x988
 23fd270:	4b3a      	ldr	r3, [pc, #232]	; (23fd35c <_ZN12Adafruit_GPSC1EP7TwoWire+0x258>)
 23fd272:	2201      	movs	r2, #1
 23fd274:	f8c4 398c 	str.w	r3, [r4, #2444]	; 0x98c
 23fd278:	4b39      	ldr	r3, [pc, #228]	; (23fd360 <_ZN12Adafruit_GPSC1EP7TwoWire+0x25c>)
  common_init();    // Set everything to common state, then...
 23fd27a:	4620      	mov	r0, r4
Adafruit_GPS::Adafruit_GPS(TwoWire *theWire) {
 23fd27c:	f8c4 3990 	str.w	r3, [r4, #2448]	; 0x990
 23fd280:	4b38      	ldr	r3, [pc, #224]	; (23fd364 <_ZN12Adafruit_GPSC1EP7TwoWire+0x260>)
 23fd282:	f8c4 69a8 	str.w	r6, [r4, #2472]	; 0x9a8
 23fd286:	f8c4 3994 	str.w	r3, [r4, #2452]	; 0x994
 23fd28a:	4b37      	ldr	r3, [pc, #220]	; (23fd368 <_ZN12Adafruit_GPSC1EP7TwoWire+0x264>)
 23fd28c:	f884 59d1 	strb.w	r5, [r4, #2513]	; 0x9d1
 23fd290:	f8c4 3998 	str.w	r3, [r4, #2456]	; 0x998
 23fd294:	4b35      	ldr	r3, [pc, #212]	; (23fd36c <_ZN12Adafruit_GPSC1EP7TwoWire+0x268>)
 23fd296:	f884 59ec 	strb.w	r5, [r4, #2540]	; 0x9ec
 23fd29a:	f8c4 399c 	str.w	r3, [r4, #2460]	; 0x99c
 23fd29e:	4b34      	ldr	r3, [pc, #208]	; (23fd370 <_ZN12Adafruit_GPSC1EP7TwoWire+0x26c>)
 23fd2a0:	f8a4 29f4 	strh.w	r2, [r4, #2548]	; 0x9f4
 23fd2a4:	f8c4 39a0 	str.w	r3, [r4, #2464]	; 0x9a0
 23fd2a8:	4b32      	ldr	r3, [pc, #200]	; (23fd374 <_ZN12Adafruit_GPSC1EP7TwoWire+0x270>)
 23fd2aa:	f8a4 5a7e 	strh.w	r5, [r4, #2686]	; 0xa7e
 23fd2ae:	f8c4 39a4 	str.w	r3, [r4, #2468]	; 0x9a4
 23fd2b2:	4b31      	ldr	r3, [pc, #196]	; (23fd378 <_ZN12Adafruit_GPSC1EP7TwoWire+0x274>)
 23fd2b4:	f884 5b70 	strb.w	r5, [r4, #2928]	; 0xb70
 23fd2b8:	f8c4 39b8 	str.w	r3, [r4, #2488]	; 0x9b8
 23fd2bc:	f8c4 39bc 	str.w	r3, [r4, #2492]	; 0x9bc
 23fd2c0:	f8c4 39c0 	str.w	r3, [r4, #2496]	; 0x9c0
 23fd2c4:	f8c4 39c4 	str.w	r3, [r4, #2500]	; 0x9c4
 23fd2c8:	f8c4 39c8 	str.w	r3, [r4, #2504]	; 0x9c8
 23fd2cc:	f8c4 39cc 	str.w	r3, [r4, #2508]	; 0x9cc
 23fd2d0:	23ff      	movs	r3, #255	; 0xff
 23fd2d2:	f884 39e4 	strb.w	r3, [r4, #2532]	; 0x9e4
 23fd2d6:	f884 3a7d 	strb.w	r3, [r4, #2685]	; 0xa7d
  common_init();    // Set everything to common state, then...
 23fd2da:	f7ff fee5 	bl	23fd0a8 <_ZN12Adafruit_GPS11common_initEv>
}
 23fd2de:	4620      	mov	r0, r4
  gpsI2C = theWire; // ...override gpsI2C
 23fd2e0:	f8c4 89dc 	str.w	r8, [r4, #2524]	; 0x9dc
}
 23fd2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fd2e8:	023ff814 	.word	0x023ff814
 23fd2ec:	4019999a 	.word	0x4019999a
 23fd2f0:	023ff65c 	.word	0x023ff65c
 23fd2f4:	023ff77e 	.word	0x023ff77e
 23fd2f8:	023ff736 	.word	0x023ff736
 23fd2fc:	023ff782 	.word	0x023ff782
 23fd300:	023ff786 	.word	0x023ff786
 23fd304:	023ff78a 	.word	0x023ff78a
 23fd308:	023ff78e 	.word	0x023ff78e
 23fd30c:	023ff792 	.word	0x023ff792
 23fd310:	023ff796 	.word	0x023ff796
 23fd314:	023ff79a 	.word	0x023ff79a
 23fd318:	023ff79e 	.word	0x023ff79e
 23fd31c:	023ff7a2 	.word	0x023ff7a2
 23fd320:	023ff7a6 	.word	0x023ff7a6
 23fd324:	023ff7aa 	.word	0x023ff7aa
 23fd328:	023ff7ae 	.word	0x023ff7ae
 23fd32c:	023ff7b2 	.word	0x023ff7b2
 23fd330:	023ff7b6 	.word	0x023ff7b6
 23fd334:	023ff7ba 	.word	0x023ff7ba
 23fd338:	023ff7be 	.word	0x023ff7be
 23fd33c:	023ff7c2 	.word	0x023ff7c2
 23fd340:	023ff7c6 	.word	0x023ff7c6
 23fd344:	023ff7ca 	.word	0x023ff7ca
 23fd348:	023ff800 	.word	0x023ff800
 23fd34c:	023ff7ce 	.word	0x023ff7ce
 23fd350:	023ff7d2 	.word	0x023ff7d2
 23fd354:	000f4240 	.word	0x000f4240
 23fd358:	023ff7d6 	.word	0x023ff7d6
 23fd35c:	023ff7da 	.word	0x023ff7da
 23fd360:	023ff7de 	.word	0x023ff7de
 23fd364:	023ff7e2 	.word	0x023ff7e2
 23fd368:	023ff7e6 	.word	0x023ff7e6
 23fd36c:	023ff7ea 	.word	0x023ff7ea
 23fd370:	023ff7ee 	.word	0x023ff7ee
 23fd374:	023ff7f2 	.word	0x023ff7f2
 23fd378:	77359400 	.word	0x77359400

023fd37c <_ZN12Adafruit_GPS11sendCommandEPKc>:
/*!
    @brief Send a command to the GPS device
    @param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void Adafruit_GPS::sendCommand(const char *str) { println(str); }
 23fd37c:	f001 bb19 	b.w	23fe9b2 <_ZN5Print7printlnEPKc>

023fd380 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23fd380:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
 23fd382:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23fd384:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
 23fd388:	2d02      	cmp	r5, #2
 23fd38a:	d069      	beq.n	23fd460 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
 23fd38c:	2d03      	cmp	r5, #3
 23fd38e:	f000 809b 	beq.w	23fd4c8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x148>
 23fd392:	2d01      	cmp	r5, #1
 23fd394:	d16c      	bne.n	23fd470 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
 23fd396:	43d2      	mvns	r2, r2
 23fd398:	8905      	ldrh	r5, [r0, #8]
 23fd39a:	442a      	add	r2, r5
 23fd39c:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 23fd39e:	2a00      	cmp	r2, #0
 23fd3a0:	db5d      	blt.n	23fd45e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fd3a2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 23fd3a6:	4295      	cmp	r5, r2
 23fd3a8:	dd59      	ble.n	23fd45e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 23fd3aa:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 23fd3ac:	bfbe      	ittt	lt
 23fd3ae:	185b      	addlt	r3, r3, r1
    __y = 0;
 23fd3b0:	2100      	movlt	r1, #0
    __h += __y;
 23fd3b2:	b21b      	sxthlt	r3, r3

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 23fd3b4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 23fd3b8:	18cd      	adds	r5, r1, r3
 23fd3ba:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
 23fd3bc:	bfc4      	itt	gt
 23fd3be:	1a43      	subgt	r3, r0, r1
 23fd3c0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 23fd3c2:	2b00      	cmp	r3, #0
 23fd3c4:	dd4b      	ble.n	23fd45e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 23fd3c6:	f3c1 00c4 	ubfx	r0, r1, #3, #5
 23fd3ca:	f8df c124 	ldr.w	ip, [pc, #292]	; 23fd4f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>
 23fd3ce:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 23fd3d2:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
 23fd3d6:	b2db      	uxtb	r3, r3
  pBuf += x;
 23fd3d8:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
 23fd3dc:	d01a      	beq.n	23fd414 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 23fd3de:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 23fd3e2:	4e41      	ldr	r6, [pc, #260]	; (23fd4e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
    mod = 8-mod;
 23fd3e4:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 23fd3e6:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
 23fd3e8:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
 23fd3ea:	bf3f      	itttt	cc
 23fd3ec:	26ff      	movcc	r6, #255	; 0xff
 23fd3ee:	eba5 0e03 	subcc.w	lr, r5, r3
 23fd3f2:	fa46 f60e 	asrcc.w	r6, r6, lr
 23fd3f6:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
 23fd3f8:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
 23fd3fc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
 23fd3fe:	bf0c      	ite	eq
 23fd400:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
 23fd402:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 23fd404:	42ab      	cmp	r3, r5
 23fd406:	f80c 6002 	strb.w	r6, [ip, r2]
 23fd40a:	d328      	bcc.n	23fd45e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
 23fd40c:	3908      	subs	r1, #8
 23fd40e:	440b      	add	r3, r1
 23fd410:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
 23fd412:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 23fd414:	2b07      	cmp	r3, #7
 23fd416:	d919      	bls.n	23fd44c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 23fd418:	2c01      	cmp	r4, #1
 23fd41a:	f04f 35ff 	mov.w	r5, #4294967295
 23fd41e:	bf18      	it	ne
 23fd420:	2500      	movne	r5, #0
 23fd422:	461a      	mov	r2, r3
 23fd424:	b2ed      	uxtb	r5, r5
 23fd426:	f100 0180 	add.w	r1, r0, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 23fd42a:	3a08      	subs	r2, #8
 23fd42c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 23fd42e:	2a07      	cmp	r2, #7
      *pBuf = val;
 23fd430:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
 23fd434:	f101 0180 	add.w	r1, r1, #128	; 0x80
 23fd438:	d8f7      	bhi.n	23fd42a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
 23fd43a:	f1a3 0208 	sub.w	r2, r3, #8
 23fd43e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 23fd442:	3201      	adds	r2, #1
 23fd444:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
 23fd448:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 23fd44c:	b13b      	cbz	r3, 23fd45e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 23fd44e:	4a27      	ldr	r2, [pc, #156]	; (23fd4ec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
    if(color == WHITE) { 
 23fd450:	2c01      	cmp	r4, #1
    register uint8_t mask = postmask[mod];
 23fd452:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
 23fd454:	7803      	ldrb	r3, [r0, #0]
 23fd456:	bf0c      	ite	eq
 23fd458:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
 23fd45a:	4393      	bicne	r3, r2
 23fd45c:	7003      	strb	r3, [r0, #0]
}
 23fd45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
 23fd460:	43d2      	mvns	r2, r2
 23fd462:	8945      	ldrh	r5, [r0, #10]
 23fd464:	442a      	add	r2, r5
      x -= (w-1);
 23fd466:	18cd      	adds	r5, r1, r3
 23fd468:	8901      	ldrh	r1, [r0, #8]
      y = HEIGHT - y - 1;
 23fd46a:	b212      	sxth	r2, r2
      x -= (w-1);
 23fd46c:	1b49      	subs	r1, r1, r5
 23fd46e:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
 23fd470:	2a00      	cmp	r2, #0
 23fd472:	dbf4      	blt.n	23fd45e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fd474:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 23fd478:	4295      	cmp	r5, r2
 23fd47a:	ddf0      	ble.n	23fd45e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
 23fd47c:	2900      	cmp	r1, #0
    w += x;
 23fd47e:	bfbe      	ittt	lt
 23fd480:	185b      	addlt	r3, r3, r1
    x = 0;
 23fd482:	2100      	movlt	r1, #0
    w += x;
 23fd484:	b21b      	sxthlt	r3, r3
  if( (x + w) > WIDTH) { 
 23fd486:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 23fd48a:	18ce      	adds	r6, r1, r3
 23fd48c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 23fd48e:	bfc4      	itt	gt
 23fd490:	1a6b      	subgt	r3, r5, r1
 23fd492:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
 23fd494:	2b00      	cmp	r3, #0
 23fd496:	dde2      	ble.n	23fd45e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += x;
 23fd498:	2580      	movs	r5, #128	; 0x80
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 23fd49a:	10d0      	asrs	r0, r2, #3
  pBuf += x;
 23fd49c:	fb10 1105 	smlabb	r1, r0, r5, r1
 23fd4a0:	4813      	ldr	r0, [pc, #76]	; (23fd4f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
  if(color == WHITE) { 
 23fd4a2:	2c01      	cmp	r4, #1
  pBuf += x;
 23fd4a4:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
 23fd4a6:	f002 0007 	and.w	r0, r2, #7
 23fd4aa:	f04f 0201 	mov.w	r2, #1
 23fd4ae:	fa02 f200 	lsl.w	r2, r2, r0
 23fd4b2:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
 23fd4b4:	440b      	add	r3, r1
 23fd4b6:	d10c      	bne.n	23fd4d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
 23fd4b8:	428b      	cmp	r3, r1
 23fd4ba:	d0d0      	beq.n	23fd45e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fd4bc:	f811 0b01 	ldrb.w	r0, [r1], #1
 23fd4c0:	4310      	orrs	r0, r2
 23fd4c2:	f801 0c01 	strb.w	r0, [r1, #-1]
 23fd4c6:	e7f7      	b.n	23fd4b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x138>
      y -= (w-1);
 23fd4c8:	18cd      	adds	r5, r1, r3
 23fd4ca:	8941      	ldrh	r1, [r0, #10]
 23fd4cc:	1b49      	subs	r1, r1, r5
 23fd4ce:	b209      	sxth	r1, r1
      break;
 23fd4d0:	e765      	b.n	23fd39e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
 23fd4d2:	43d2      	mvns	r2, r2
 23fd4d4:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
 23fd4d6:	428b      	cmp	r3, r1
 23fd4d8:	d0c1      	beq.n	23fd45e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fd4da:	f811 0b01 	ldrb.w	r0, [r1], #1
 23fd4de:	4010      	ands	r0, r2
 23fd4e0:	f801 0c01 	strb.w	r0, [r1, #-1]
 23fd4e4:	e7f7      	b.n	23fd4d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x156>
 23fd4e6:	bf00      	nop
 23fd4e8:	10079e31 	.word	0x10079e31
 23fd4ec:	10079e29 	.word	0x10079e29
 23fd4f0:	10079e39 	.word	0x10079e39

023fd4f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fd4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
 23fd4f6:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fd4f8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
 23fd4fc:	2d02      	cmp	r5, #2
 23fd4fe:	d036      	beq.n	23fd56e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x7a>
 23fd500:	2d03      	cmp	r5, #3
 23fd502:	f000 809d 	beq.w	23fd640 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14c>
 23fd506:	2d01      	cmp	r5, #1
 23fd508:	d139      	bne.n	23fd57e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x8a>
      x -= (h-1);
 23fd50a:	18d5      	adds	r5, r2, r3
 23fd50c:	8902      	ldrh	r2, [r0, #8]
 23fd50e:	1b52      	subs	r2, r2, r5
 23fd510:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
 23fd512:	2900      	cmp	r1, #0
 23fd514:	f2c0 8093 	blt.w	23fd63e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fd518:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 23fd51c:	428d      	cmp	r5, r1
 23fd51e:	f340 808e 	ble.w	23fd63e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  if(x < 0) { 
 23fd522:	2a00      	cmp	r2, #0
    w += x;
 23fd524:	bfbe      	ittt	lt
 23fd526:	189b      	addlt	r3, r3, r2
    x = 0;
 23fd528:	2200      	movlt	r2, #0
    w += x;
 23fd52a:	b21b      	sxthlt	r3, r3
  if( (x + w) > WIDTH) { 
 23fd52c:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 23fd530:	18d6      	adds	r6, r2, r3
 23fd532:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 23fd534:	bfc4      	itt	gt
 23fd536:	1aab      	subgt	r3, r5, r2
 23fd538:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
 23fd53a:	2b00      	cmp	r3, #0
 23fd53c:	dd7f      	ble.n	23fd63e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  pBuf += x;
 23fd53e:	2580      	movs	r5, #128	; 0x80
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 23fd540:	10c8      	asrs	r0, r1, #3
  pBuf += x;
 23fd542:	fb10 2205 	smlabb	r2, r0, r5, r2
 23fd546:	4846      	ldr	r0, [pc, #280]	; (23fd660 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
  if(color == WHITE) { 
 23fd548:	2c01      	cmp	r4, #1
  pBuf += x;
 23fd54a:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
 23fd54c:	f001 0007 	and.w	r0, r1, #7
 23fd550:	f04f 0101 	mov.w	r1, #1
 23fd554:	fa01 f100 	lsl.w	r1, r1, r0
 23fd558:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
 23fd55a:	4413      	add	r3, r2
 23fd55c:	d175      	bne.n	23fd64a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
    while(w--) { *pBuf++ |= mask; }
 23fd55e:	429a      	cmp	r2, r3
 23fd560:	d06d      	beq.n	23fd63e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fd562:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fd566:	4308      	orrs	r0, r1
 23fd568:	f802 0c01 	strb.w	r0, [r2, #-1]
 23fd56c:	e7f7      	b.n	23fd55e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x6a>
      x = WIDTH - x - 1;
 23fd56e:	43c9      	mvns	r1, r1
 23fd570:	8905      	ldrh	r5, [r0, #8]
 23fd572:	4429      	add	r1, r5
      y -= (h-1);
 23fd574:	18d5      	adds	r5, r2, r3
 23fd576:	8942      	ldrh	r2, [r0, #10]
      x = WIDTH - x - 1;
 23fd578:	b209      	sxth	r1, r1
      y -= (h-1);
 23fd57a:	1b52      	subs	r2, r2, r5
 23fd57c:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
 23fd57e:	2900      	cmp	r1, #0
 23fd580:	db5d      	blt.n	23fd63e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fd582:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 23fd586:	428d      	cmp	r5, r1
 23fd588:	dd59      	ble.n	23fd63e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  if(__y < 0) { 
 23fd58a:	2a00      	cmp	r2, #0
    __h += __y;
 23fd58c:	bfbe      	ittt	lt
 23fd58e:	189b      	addlt	r3, r3, r2
    __y = 0;
 23fd590:	2200      	movlt	r2, #0
    __h += __y;
 23fd592:	b21b      	sxthlt	r3, r3
  if( (__y + __h) > HEIGHT) { 
 23fd594:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 23fd598:	18d5      	adds	r5, r2, r3
 23fd59a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
 23fd59c:	bfc4      	itt	gt
 23fd59e:	1a83      	subgt	r3, r0, r2
 23fd5a0:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
 23fd5a2:	2b00      	cmp	r3, #0
 23fd5a4:	dd4b      	ble.n	23fd63e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  pBuf += x;
 23fd5a6:	f3c2 00c4 	ubfx	r0, r2, #3, #5
 23fd5aa:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 23fd660 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>
 23fd5ae:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
 23fd5b2:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
 23fd5b6:	b2db      	uxtb	r3, r3
  pBuf += x;
 23fd5b8:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
 23fd5bc:	d01a      	beq.n	23fd5f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x100>
    mod = 8-mod;
 23fd5be:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
 23fd5c2:	4e28      	ldr	r6, [pc, #160]	; (23fd664 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
    mod = 8-mod;
 23fd5c4:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
 23fd5c6:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
 23fd5c8:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
 23fd5ca:	bf3f      	itttt	cc
 23fd5cc:	26ff      	movcc	r6, #255	; 0xff
 23fd5ce:	eba5 0e03 	subcc.w	lr, r5, r3
 23fd5d2:	fa46 f60e 	asrcc.w	r6, r6, lr
 23fd5d6:	4037      	andcc	r7, r6
      *pBuf |= mask;
 23fd5d8:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
 23fd5dc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
 23fd5de:	bf0c      	ite	eq
 23fd5e0:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
 23fd5e2:	43be      	bicne	r6, r7
    if(h<mod) { return; }
 23fd5e4:	42ab      	cmp	r3, r5
 23fd5e6:	f80c 6001 	strb.w	r6, [ip, r1]
 23fd5ea:	d328      	bcc.n	23fd63e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
    h -= mod;
 23fd5ec:	3a08      	subs	r2, #8
 23fd5ee:	4413      	add	r3, r2
 23fd5f0:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
 23fd5f2:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
 23fd5f4:	2b07      	cmp	r3, #7
 23fd5f6:	d919      	bls.n	23fd62c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x138>
    register uint8_t val = (color == WHITE) ? 255 : 0;
 23fd5f8:	2c01      	cmp	r4, #1
 23fd5fa:	f04f 35ff 	mov.w	r5, #4294967295
 23fd5fe:	bf18      	it	ne
 23fd600:	2500      	movne	r5, #0
 23fd602:	461a      	mov	r2, r3
 23fd604:	b2ed      	uxtb	r5, r5
 23fd606:	f100 0180 	add.w	r1, r0, #128	; 0x80
      h -= 8;
 23fd60a:	3a08      	subs	r2, #8
 23fd60c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 23fd60e:	2a07      	cmp	r2, #7
      *pBuf = val;
 23fd610:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
 23fd614:	f101 0180 	add.w	r1, r1, #128	; 0x80
 23fd618:	d8f7      	bhi.n	23fd60a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x116>
      pBuf += SSD1306_LCDWIDTH;
 23fd61a:	f1a3 0208 	sub.w	r2, r3, #8
 23fd61e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 23fd622:	3201      	adds	r2, #1
 23fd624:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
 23fd628:	f003 0307 	and.w	r3, r3, #7
  if(h) {
 23fd62c:	b13b      	cbz	r3, 23fd63e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
    register uint8_t mask = postmask[mod];
 23fd62e:	4a0e      	ldr	r2, [pc, #56]	; (23fd668 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
    if(color == WHITE) { 
 23fd630:	2c01      	cmp	r4, #1
    register uint8_t mask = postmask[mod];
 23fd632:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
 23fd634:	7803      	ldrb	r3, [r0, #0]
 23fd636:	bf0c      	ite	eq
 23fd638:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
 23fd63a:	4393      	bicne	r3, r2
 23fd63c:	7003      	strb	r3, [r0, #0]
}
 23fd63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
 23fd640:	43c9      	mvns	r1, r1
 23fd642:	8945      	ldrh	r5, [r0, #10]
 23fd644:	4429      	add	r1, r5
 23fd646:	b209      	sxth	r1, r1
      break;
 23fd648:	e763      	b.n	23fd512 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
 23fd64a:	43c9      	mvns	r1, r1
 23fd64c:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
 23fd64e:	429a      	cmp	r2, r3
 23fd650:	d0f5      	beq.n	23fd63e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fd652:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fd656:	4008      	ands	r0, r1
 23fd658:	f802 0c01 	strb.w	r0, [r2, #-1]
 23fd65c:	e7f7      	b.n	23fd64e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x15a>
 23fd65e:	bf00      	nop
 23fd660:	10079e39 	.word	0x10079e39
 23fd664:	10079e31 	.word	0x10079e31
 23fd668:	10079e29 	.word	0x10079e29

023fd66c <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
 23fd66c:	4770      	bx	lr
	...

023fd670 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fd670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 23fd672:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fd674:	4606      	mov	r6, r0
 23fd676:	4614      	mov	r4, r2
 23fd678:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 23fd67a:	db2d      	blt.n	23fd6d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
 23fd67c:	f000 fb4d 	bl	23fdd1a <_ZN12Adafruit_GFX5widthEv>
 23fd680:	42a8      	cmp	r0, r5
 23fd682:	dd29      	ble.n	23fd6d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
 23fd684:	2c00      	cmp	r4, #0
 23fd686:	db27      	blt.n	23fd6d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
 23fd688:	4630      	mov	r0, r6
 23fd68a:	f000 fb49 	bl	23fdd20 <_ZN12Adafruit_GFX6heightEv>
 23fd68e:	42a0      	cmp	r0, r4
 23fd690:	dd22      	ble.n	23fd6d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
 23fd692:	4630      	mov	r0, r6
 23fd694:	f000 fb3f 	bl	23fdd16 <_ZN12Adafruit_GFX11getRotationEv>
 23fd698:	2802      	cmp	r0, #2
 23fd69a:	d01e      	beq.n	23fd6da <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
 23fd69c:	2803      	cmp	r0, #3
 23fd69e:	d025      	beq.n	23fd6ec <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
 23fd6a0:	2801      	cmp	r0, #1
 23fd6a2:	d104      	bne.n	23fd6ae <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
 23fd6a4:	43e2      	mvns	r2, r4
 23fd6a6:	8933      	ldrh	r3, [r6, #8]
    break;
 23fd6a8:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
 23fd6aa:	441a      	add	r2, r3
 23fd6ac:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 23fd6ae:	4622      	mov	r2, r4
 23fd6b0:	2180      	movs	r1, #128	; 0x80
 23fd6b2:	2c00      	cmp	r4, #0
 23fd6b4:	bfb8      	it	lt
 23fd6b6:	1de2      	addlt	r2, r4, #7
 23fd6b8:	10d2      	asrs	r2, r2, #3
 23fd6ba:	fb12 5501 	smlabb	r5, r2, r1, r5
 23fd6be:	2201      	movs	r2, #1
 23fd6c0:	490d      	ldr	r1, [pc, #52]	; (23fd6f8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
 23fd6c2:	f004 0407 	and.w	r4, r4, #7
 23fd6c6:	574b      	ldrsb	r3, [r1, r5]
 23fd6c8:	fa02 f404 	lsl.w	r4, r2, r4
 23fd6cc:	b264      	sxtb	r4, r4
  if (color == WHITE) 
 23fd6ce:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 23fd6d0:	bf0c      	ite	eq
 23fd6d2:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
 23fd6d4:	43a3      	bicne	r3, r4
 23fd6d6:	554b      	strb	r3, [r1, r5]
}
 23fd6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    y = HEIGHT - y - 1;
 23fd6da:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
 23fd6dc:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 23fd6de:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
 23fd6e0:	3901      	subs	r1, #1
 23fd6e2:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
 23fd6e4:	4414      	add	r4, r2
    x = WIDTH - x - 1;
 23fd6e6:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
 23fd6e8:	b224      	sxth	r4, r4
    break;
 23fd6ea:	e7e0      	b.n	23fd6ae <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
 23fd6ec:	8973      	ldrh	r3, [r6, #10]
 23fd6ee:	3b01      	subs	r3, #1
 23fd6f0:	1b5b      	subs	r3, r3, r5
    break;
 23fd6f2:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
 23fd6f4:	b21c      	sxth	r4, r3
    break;
 23fd6f6:	e7da      	b.n	23fd6ae <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
 23fd6f8:	10079e39 	.word	0x10079e39

023fd6fc <_ZN16Adafruit_SSD1306D0Ev>:
 23fd6fc:	b510      	push	{r4, lr}
 23fd6fe:	4604      	mov	r4, r0
 23fd700:	2124      	movs	r1, #36	; 0x24
 23fd702:	f7ff f8b4 	bl	23fc86e <_ZdlPvj>
 23fd706:	4620      	mov	r0, r4
 23fd708:	bd10      	pop	{r4, pc}
	...

023fd70c <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
 23fd70c:	b538      	push	{r3, r4, r5, lr}
 23fd70e:	4604      	mov	r4, r0
 23fd710:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 23fd712:	2240      	movs	r2, #64	; 0x40
 23fd714:	2180      	movs	r1, #128	; 0x80
 23fd716:	f000 fa2d 	bl	23fdb74 <_ZN12Adafruit_GFXC1Ess>
 23fd71a:	4b06      	ldr	r3, [pc, #24]	; (23fd734 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
}
 23fd71c:	4620      	mov	r0, r4
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 23fd71e:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
 23fd720:	23ff      	movs	r3, #255	; 0xff
 23fd722:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 23fd726:	7763      	strb	r3, [r4, #29]
 23fd728:	f64f 73ff 	movw	r3, #65535	; 0xffff
  rst = reset;
 23fd72c:	f884 5020 	strb.w	r5, [r4, #32]
  sclk = dc = cs = sid = -1;
 23fd730:	83e3      	strh	r3, [r4, #30]
}
 23fd732:	bd38      	pop	{r3, r4, r5, pc}
 23fd734:	023ff82c 	.word	0x023ff82c

023fd738 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fd738:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fd73a:	4c0a      	ldr	r4, [pc, #40]	; (23fd764 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fd73c:	e8d4 1f8f 	ldab	r1, [r4]
 23fd740:	f011 0101 	ands.w	r1, r1, #1
 23fd744:	d10b      	bne.n	23fd75e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fd746:	4620      	mov	r0, r4
 23fd748:	9101      	str	r1, [sp, #4]
 23fd74a:	f7ff f89f 	bl	23fc88c <__cxa_guard_acquire>
 23fd74e:	9901      	ldr	r1, [sp, #4]
 23fd750:	b128      	cbz	r0, 23fd75e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fd752:	4805      	ldr	r0, [pc, #20]	; (23fd768 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fd754:	f000 ff54 	bl	23fe600 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fd758:	4620      	mov	r0, r4
 23fd75a:	f7ff f89c 	bl	23fc896 <__cxa_guard_release>
        return instance;
    }
 23fd75e:	4802      	ldr	r0, [pc, #8]	; (23fd768 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fd760:	b002      	add	sp, #8
 23fd762:	bd10      	pop	{r4, pc}
 23fd764:	1007ae80 	.word	0x1007ae80
 23fd768:	1007ae84 	.word	0x1007ae84

023fd76c <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
 23fd76c:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
 23fd76e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 23fd772:	b143      	cbz	r3, 23fd786 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
 23fd774:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23fd776:	f7ff ffdf 	bl	23fd738 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fd77a:	9901      	ldr	r1, [sp, #4]
}
 23fd77c:	b003      	add	sp, #12
 23fd77e:	f85d eb04 	ldr.w	lr, [sp], #4
 23fd782:	f001 b863 	b.w	23fe84c <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 23fd786:	460b      	mov	r3, r1
 23fd788:	2201      	movs	r2, #1
 23fd78a:	7f81      	ldrb	r1, [r0, #30]
 23fd78c:	7f40      	ldrb	r0, [r0, #29]
}
 23fd78e:	b003      	add	sp, #12
 23fd790:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 23fd794:	f001 bd8c 	b.w	23ff2b0 <shiftOut>

023fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 23fd798:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
 23fd79a:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 23fd79e:	4604      	mov	r4, r0
  if (sid != -1)
 23fd7a0:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 23fd7a2:	460d      	mov	r5, r1
  if (sid != -1)
 23fd7a4:	d01d      	beq.n	23fd7e2 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
 23fd7a6:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
 23fd7aa:	2101      	movs	r1, #1
 23fd7ac:	b280      	uxth	r0, r0
 23fd7ae:	f001 fd66 	bl	23ff27e <digitalWrite>
    digitalWrite(dc, LOW);
 23fd7b2:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23fd7b6:	2100      	movs	r1, #0
 23fd7b8:	b280      	uxth	r0, r0
 23fd7ba:	f001 fd60 	bl	23ff27e <digitalWrite>
    digitalWrite(cs, LOW);
 23fd7be:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fd7c2:	2100      	movs	r1, #0
 23fd7c4:	b280      	uxth	r0, r0
 23fd7c6:	f001 fd5a 	bl	23ff27e <digitalWrite>
    fastSPIwrite(c);
 23fd7ca:	4629      	mov	r1, r5
 23fd7cc:	4620      	mov	r0, r4
 23fd7ce:	f7ff ffcd 	bl	23fd76c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
 23fd7d2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fd7d6:	2101      	movs	r1, #1
}
 23fd7d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
 23fd7dc:	b280      	uxth	r0, r0
 23fd7de:	f001 bd4e 	b.w	23ff27e <digitalWrite>
    Wire.beginTransmission(_i2caddr);
 23fd7e2:	f001 fe63 	bl	23ff4ac <_Z19__fetch_global_Wirev>
 23fd7e6:	f994 101b 	ldrsb.w	r1, [r4, #27]
 23fd7ea:	f001 fbd7 	bl	23fef9c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
 23fd7ee:	f001 fe5d 	bl	23ff4ac <_Z19__fetch_global_Wirev>
 23fd7f2:	6803      	ldr	r3, [r0, #0]
 23fd7f4:	2100      	movs	r1, #0
 23fd7f6:	689b      	ldr	r3, [r3, #8]
 23fd7f8:	4798      	blx	r3
    Wire.write(c);
 23fd7fa:	f001 fe57 	bl	23ff4ac <_Z19__fetch_global_Wirev>
 23fd7fe:	6803      	ldr	r3, [r0, #0]
 23fd800:	4629      	mov	r1, r5
 23fd802:	689b      	ldr	r3, [r3, #8]
 23fd804:	4798      	blx	r3
    Wire.endTransmission();
 23fd806:	f001 fe51 	bl	23ff4ac <_Z19__fetch_global_Wirev>
}
 23fd80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
 23fd80e:	f001 bbcc 	b.w	23fefaa <_ZN7TwoWire15endTransmissionEv>

023fd812 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 23fd812:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
 23fd814:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 23fd818:	4604      	mov	r4, r0
  if (sid != -1){
 23fd81a:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 23fd81c:	460d      	mov	r5, r1
  _vccstate = vccstate;
 23fd81e:	7701      	strb	r1, [r0, #28]
  _i2caddr = i2caddr;
 23fd820:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
 23fd822:	f000 80c9 	beq.w	23fd9b8 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
 23fd826:	f990 001f 	ldrsb.w	r0, [r0, #31]
 23fd82a:	2101      	movs	r1, #1
 23fd82c:	b280      	uxth	r0, r0
 23fd82e:	f001 fd15 	bl	23ff25c <pinMode>
    pinMode(cs, OUTPUT);
 23fd832:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fd836:	2101      	movs	r1, #1
 23fd838:	b280      	uxth	r0, r0
 23fd83a:	f001 fd0f 	bl	23ff25c <pinMode>
    if (!hwSPI){
 23fd83e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 23fd842:	2b00      	cmp	r3, #0
 23fd844:	f000 80a6 	beq.w	23fd994 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
 23fd848:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fd84c:	2101      	movs	r1, #1
 23fd84e:	b280      	uxth	r0, r0
 23fd850:	f001 fd15 	bl	23ff27e <digitalWrite>
        instance().setBitOrder(order);
 23fd854:	f7ff ff70 	bl	23fd738 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fd858:	2101      	movs	r1, #1
 23fd85a:	f000 feef 	bl	23fe63c <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
 23fd85e:	f7ff ff6b 	bl	23fd738 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fd862:	2110      	movs	r1, #16
 23fd864:	f000 ffcc 	bl	23fe800 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
 23fd868:	f7ff ff66 	bl	23fd738 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fd86c:	2100      	movs	r1, #0
 23fd86e:	f000 fef9 	bl	23fe664 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
 23fd872:	f7ff ff61 	bl	23fd738 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fd876:	f000 fecd 	bl	23fe614 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
 23fd87a:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fd87e:	2101      	movs	r1, #1
 23fd880:	b280      	uxth	r0, r0
 23fd882:	f001 fceb 	bl	23ff25c <pinMode>
  digitalWrite(rst, HIGH);
 23fd886:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fd88a:	2101      	movs	r1, #1
 23fd88c:	b280      	uxth	r0, r0
 23fd88e:	f001 fcf6 	bl	23ff27e <digitalWrite>
  delay(1);
 23fd892:	2001      	movs	r0, #1
 23fd894:	f001 f922 	bl	23feadc <delay>
  digitalWrite(rst, LOW);
 23fd898:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fd89c:	2100      	movs	r1, #0
 23fd89e:	b280      	uxth	r0, r0
 23fd8a0:	f001 fced 	bl	23ff27e <digitalWrite>
  delay(10);
 23fd8a4:	200a      	movs	r0, #10
 23fd8a6:	f001 f919 	bl	23feadc <delay>
  digitalWrite(rst, HIGH);
 23fd8aa:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fd8ae:	2101      	movs	r1, #1
 23fd8b0:	b280      	uxth	r0, r0
 23fd8b2:	f001 fce4 	bl	23ff27e <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 23fd8b6:	4620      	mov	r0, r4
 23fd8b8:	21ae      	movs	r1, #174	; 0xae
 23fd8ba:	f7ff ff6d 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 23fd8be:	4620      	mov	r0, r4
 23fd8c0:	21d5      	movs	r1, #213	; 0xd5
 23fd8c2:	f7ff ff69 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
 23fd8c6:	4620      	mov	r0, r4
 23fd8c8:	2180      	movs	r1, #128	; 0x80
 23fd8ca:	f7ff ff65 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 23fd8ce:	4620      	mov	r0, r4
 23fd8d0:	21a8      	movs	r1, #168	; 0xa8
 23fd8d2:	f7ff ff61 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
 23fd8d6:	4620      	mov	r0, r4
 23fd8d8:	213f      	movs	r1, #63	; 0x3f
 23fd8da:	f7ff ff5d 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 23fd8de:	4620      	mov	r0, r4
 23fd8e0:	21d3      	movs	r1, #211	; 0xd3
 23fd8e2:	f7ff ff59 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
 23fd8e6:	4620      	mov	r0, r4
 23fd8e8:	2100      	movs	r1, #0
 23fd8ea:	f7ff ff55 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 23fd8ee:	4620      	mov	r0, r4
 23fd8f0:	2140      	movs	r1, #64	; 0x40
 23fd8f2:	f7ff ff51 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 23fd8f6:	218d      	movs	r1, #141	; 0x8d
 23fd8f8:	4620      	mov	r0, r4
 23fd8fa:	f7ff ff4d 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 23fd8fe:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
 23fd900:	bf0c      	ite	eq
 23fd902:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
 23fd904:	2114      	movne	r1, #20
 23fd906:	4620      	mov	r0, r4
 23fd908:	f7ff ff46 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 23fd90c:	4620      	mov	r0, r4
 23fd90e:	2120      	movs	r1, #32
 23fd910:	f7ff ff42 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
 23fd914:	4620      	mov	r0, r4
 23fd916:	2100      	movs	r1, #0
 23fd918:	f7ff ff3e 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
 23fd91c:	4620      	mov	r0, r4
 23fd91e:	21a1      	movs	r1, #161	; 0xa1
 23fd920:	f7ff ff3a 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
 23fd924:	4620      	mov	r0, r4
 23fd926:	21c8      	movs	r1, #200	; 0xc8
 23fd928:	f7ff ff36 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 23fd92c:	4620      	mov	r0, r4
 23fd92e:	21da      	movs	r1, #218	; 0xda
 23fd930:	f7ff ff32 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
 23fd934:	4620      	mov	r0, r4
 23fd936:	2112      	movs	r1, #18
 23fd938:	f7ff ff2e 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 23fd93c:	2181      	movs	r1, #129	; 0x81
 23fd93e:	4620      	mov	r0, r4
 23fd940:	f7ff ff2a 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 23fd944:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
 23fd946:	bf0c      	ite	eq
 23fd948:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
 23fd94a:	21cf      	movne	r1, #207	; 0xcf
 23fd94c:	4620      	mov	r0, r4
 23fd94e:	f7ff ff23 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 23fd952:	21d9      	movs	r1, #217	; 0xd9
 23fd954:	4620      	mov	r0, r4
 23fd956:	f7ff ff1f 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 23fd95a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
 23fd95c:	bf0c      	ite	eq
 23fd95e:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
 23fd960:	21f1      	movne	r1, #241	; 0xf1
 23fd962:	4620      	mov	r0, r4
 23fd964:	f7ff ff18 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 23fd968:	4620      	mov	r0, r4
 23fd96a:	21db      	movs	r1, #219	; 0xdb
 23fd96c:	f7ff ff14 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
 23fd970:	4620      	mov	r0, r4
 23fd972:	2140      	movs	r1, #64	; 0x40
 23fd974:	f7ff ff10 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 23fd978:	4620      	mov	r0, r4
 23fd97a:	21a4      	movs	r1, #164	; 0xa4
 23fd97c:	f7ff ff0c 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 23fd980:	4620      	mov	r0, r4
 23fd982:	21a6      	movs	r1, #166	; 0xa6
 23fd984:	f7ff ff08 	bl	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 23fd988:	4620      	mov	r0, r4
}
 23fd98a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 23fd98e:	21af      	movs	r1, #175	; 0xaf
 23fd990:	f7ff bf02 	b.w	23fd798 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
 23fd994:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23fd998:	2101      	movs	r1, #1
 23fd99a:	b280      	uxth	r0, r0
 23fd99c:	f001 fc5e 	bl	23ff25c <pinMode>
    	pinMode(sclk, OUTPUT);
 23fd9a0:	f994 001e 	ldrsb.w	r0, [r4, #30]
 23fd9a4:	2101      	movs	r1, #1
 23fd9a6:	b280      	uxth	r0, r0
 23fd9a8:	f001 fc58 	bl	23ff25c <pinMode>
    if (hwSPI){
 23fd9ac:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 23fd9b0:	2b00      	cmp	r3, #0
 23fd9b2:	f43f af62 	beq.w	23fd87a <_ZN16Adafruit_SSD13065beginEhh+0x68>
 23fd9b6:	e747      	b.n	23fd848 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
 23fd9b8:	f001 fd78 	bl	23ff4ac <_Z19__fetch_global_Wirev>
 23fd9bc:	f001 fae4 	bl	23fef88 <_ZN7TwoWire5beginEv>
 23fd9c0:	e75b      	b.n	23fd87a <_ZN16Adafruit_SSD13065beginEhh+0x68>

023fd9c2 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 23fd9c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd9c6:	461f      	mov	r7, r3
 23fd9c8:	b085      	sub	sp, #20
 23fd9ca:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fd9ce:	eba7 0a01 	sub.w	sl, r7, r1
 23fd9d2:	eba8 0902 	sub.w	r9, r8, r2
 23fd9d6:	f1b9 0f00 	cmp.w	r9, #0
 23fd9da:	bfb8      	it	lt
 23fd9dc:	f1c9 0900 	rsblt	r9, r9, #0
 23fd9e0:	f1ba 0f00 	cmp.w	sl, #0
 23fd9e4:	bfb8      	it	lt
 23fd9e6:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23fd9ea:	45d1      	cmp	r9, sl
			    uint16_t color) {
 23fd9ec:	4683      	mov	fp, r0
 23fd9ee:	460c      	mov	r4, r1
 23fd9f0:	4615      	mov	r5, r2
 23fd9f2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23fd9f6:	dd04      	ble.n	23fda02 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
 23fd9f8:	463a      	mov	r2, r7
    swap(x0, y0);
 23fd9fa:	462c      	mov	r4, r5
    swap(x1, y1);
 23fd9fc:	4647      	mov	r7, r8
    swap(x0, y0);
 23fd9fe:	460d      	mov	r5, r1
    swap(x1, y1);
 23fda00:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23fda02:	42bc      	cmp	r4, r7
 23fda04:	dd05      	ble.n	23fda12 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
 23fda06:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 23fda08:	4645      	mov	r5, r8
 23fda0a:	4690      	mov	r8, r2
  if (x0 > x1) {
 23fda0c:	4622      	mov	r2, r4
 23fda0e:	463c      	mov	r4, r7
 23fda10:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23fda12:	1b3e      	subs	r6, r7, r4
 23fda14:	b2b2      	uxth	r2, r6
 23fda16:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23fda18:	eba8 0205 	sub.w	r2, r8, r5
 23fda1c:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fda20:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23fda24:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fda28:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23fda2c:	4545      	cmp	r5, r8
 23fda2e:	bfb4      	ite	lt
 23fda30:	2201      	movlt	r2, #1
 23fda32:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
 23fda36:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23fda38:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23fda3a:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 23fda3c:	42bc      	cmp	r4, r7
 23fda3e:	dc1c      	bgt.n	23fda7a <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
 23fda40:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23fda44:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
 23fda46:	f8d2 8010 	ldr.w	r8, [r2, #16]
 23fda4a:	bfc7      	ittee	gt
 23fda4c:	4629      	movgt	r1, r5
 23fda4e:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
 23fda50:	462a      	movle	r2, r5
 23fda52:	4621      	movle	r1, r4
      drawPixel(y0, x0, color);
 23fda54:	9303      	str	r3, [sp, #12]
      drawPixel(x0, y0, color);
 23fda56:	4658      	mov	r0, fp
 23fda58:	47c0      	blx	r8
    }
    err -= dy;
 23fda5a:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
 23fda5c:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23fda5e:	1ab6      	subs	r6, r6, r2
 23fda60:	b2b1      	uxth	r1, r6
 23fda62:	b236      	sxth	r6, r6
    if (err < 0) {
 23fda64:	2e00      	cmp	r6, #0
 23fda66:	da05      	bge.n	23fda74 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
 23fda68:	9a02      	ldr	r2, [sp, #8]
 23fda6a:	4415      	add	r5, r2
      err += dx;
 23fda6c:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23fda6e:	b22d      	sxth	r5, r5
      err += dx;
 23fda70:	1856      	adds	r6, r2, r1
 23fda72:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
 23fda74:	3401      	adds	r4, #1
 23fda76:	b224      	sxth	r4, r4
 23fda78:	e7e0      	b.n	23fda3c <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
 23fda7a:	b005      	add	sp, #20
 23fda7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fda80 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 23fda80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fda84:	4604      	mov	r4, r0
 23fda86:	4616      	mov	r6, r2
 23fda88:	468a      	mov	sl, r1
 23fda8a:	461d      	mov	r5, r3
 23fda8c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 23fda90:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
 23fda92:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 23fda96:	f8cd 8000 	str.w	r8, [sp]
 23fda9a:	69ff      	ldr	r7, [r7, #28]
 23fda9c:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 23fda9e:	6823      	ldr	r3, [r4, #0]
 23fdaa0:	f109 32ff 	add.w	r2, r9, #4294967295
 23fdaa4:	f8cd 8000 	str.w	r8, [sp]
 23fdaa8:	4432      	add	r2, r6
 23fdaaa:	4651      	mov	r1, sl
 23fdaac:	4620      	mov	r0, r4
 23fdaae:	69df      	ldr	r7, [r3, #28]
 23fdab0:	b212      	sxth	r2, r2
 23fdab2:	462b      	mov	r3, r5
 23fdab4:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 23fdab6:	6823      	ldr	r3, [r4, #0]
 23fdab8:	f8cd 8000 	str.w	r8, [sp]
 23fdabc:	4632      	mov	r2, r6
 23fdabe:	4651      	mov	r1, sl
 23fdac0:	4620      	mov	r0, r4
 23fdac2:	699f      	ldr	r7, [r3, #24]
 23fdac4:	464b      	mov	r3, r9
 23fdac6:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 23fdac8:	1e6b      	subs	r3, r5, #1
 23fdaca:	eb03 010a 	add.w	r1, r3, sl
 23fdace:	6823      	ldr	r3, [r4, #0]
 23fdad0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 23fdad4:	699d      	ldr	r5, [r3, #24]
 23fdad6:	4632      	mov	r2, r6
 23fdad8:	464b      	mov	r3, r9
 23fdada:	4620      	mov	r0, r4
 23fdadc:	46ac      	mov	ip, r5
 23fdade:	b209      	sxth	r1, r1
}
 23fdae0:	b002      	add	sp, #8
 23fdae2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
 23fdae6:	4760      	bx	ip

023fdae8 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 23fdae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 23fdaea:	3b01      	subs	r3, #1
 23fdaec:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23fdaf0:	4413      	add	r3, r2
 23fdaf2:	6804      	ldr	r4, [r0, #0]
 23fdaf4:	b21b      	sxth	r3, r3
 23fdaf6:	9300      	str	r3, [sp, #0]
 23fdaf8:	9501      	str	r5, [sp, #4]
 23fdafa:	460b      	mov	r3, r1
 23fdafc:	6964      	ldr	r4, [r4, #20]
 23fdafe:	47a0      	blx	r4
}
 23fdb00:	b003      	add	sp, #12
 23fdb02:	bd30      	pop	{r4, r5, pc}

023fdb04 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 23fdb04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 23fdb06:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23fdb0a:	6804      	ldr	r4, [r0, #0]
 23fdb0c:	e9cd 2500 	strd	r2, r5, [sp]
 23fdb10:	3b01      	subs	r3, #1
 23fdb12:	440b      	add	r3, r1
 23fdb14:	6964      	ldr	r4, [r4, #20]
 23fdb16:	b21b      	sxth	r3, r3
 23fdb18:	47a0      	blx	r4
}
 23fdb1a:	b003      	add	sp, #12
 23fdb1c:	bd30      	pop	{r4, r5, pc}

023fdb1e <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 23fdb1e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fdb22:	4605      	mov	r5, r0
 23fdb24:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 23fdb26:	460c      	mov	r4, r1
			    uint16_t color) {
 23fdb28:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fdb2c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  for (int16_t i=x; i<x+w; i++) {
 23fdb30:	18ce      	adds	r6, r1, r3
 23fdb32:	42b4      	cmp	r4, r6
 23fdb34:	da0b      	bge.n	23fdb4e <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
 23fdb36:	682b      	ldr	r3, [r5, #0]
 23fdb38:	f8cd 8000 	str.w	r8, [sp]
 23fdb3c:	4621      	mov	r1, r4
 23fdb3e:	699f      	ldr	r7, [r3, #24]
 23fdb40:	4652      	mov	r2, sl
 23fdb42:	464b      	mov	r3, r9
 23fdb44:	4628      	mov	r0, r5
 23fdb46:	3401      	adds	r4, #1
 23fdb48:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
 23fdb4a:	b224      	sxth	r4, r4
 23fdb4c:	e7f1      	b.n	23fdb32 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
 23fdb4e:	b002      	add	sp, #8
 23fdb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023fdb54 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 23fdb54:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23fdb56:	9101      	str	r1, [sp, #4]
 23fdb58:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fdb5c:	6802      	ldr	r2, [r0, #0]
 23fdb5e:	9100      	str	r1, [sp, #0]
 23fdb60:	6a54      	ldr	r4, [r2, #36]	; 0x24
 23fdb62:	2200      	movs	r2, #0
 23fdb64:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fdb68:	4611      	mov	r1, r2
 23fdb6a:	47a0      	blx	r4
}
 23fdb6c:	b002      	add	sp, #8
 23fdb6e:	bd10      	pop	{r4, pc}

023fdb70 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
 23fdb70:	4770      	bx	lr
	...

023fdb74 <_ZN12Adafruit_GFXC1Ess>:
  WIDTH(w), HEIGHT(h)
 23fdb74:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
 23fdb76:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
 23fdb78:	f04f 32ff 	mov.w	r2, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23fdb7c:	b530      	push	{r4, r5, lr}
  textcolor = textbgcolor = 0xFFFF;
 23fdb7e:	6142      	str	r2, [r0, #20]
 23fdb80:	2400      	movs	r4, #0
  textsize  = 1;
 23fdb82:	2201      	movs	r2, #1
  WIDTH(w), HEIGHT(h)
 23fdb84:	4d04      	ldr	r5, [pc, #16]	; (23fdb98 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fdb86:	6044      	str	r4, [r0, #4]
 23fdb88:	6005      	str	r5, [r0, #0]
 23fdb8a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
 23fdb8c:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
 23fdb8e:	6104      	str	r4, [r0, #16]
  textsize  = 1;
 23fdb90:	8302      	strh	r2, [r0, #24]
  wrap      = true;
 23fdb92:	7682      	strb	r2, [r0, #26]
}
 23fdb94:	bd30      	pop	{r4, r5, pc}
 23fdb96:	bf00      	nop
 23fdb98:	023ffd60 	.word	0x023ffd60

023fdb9c <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
 23fdb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdba0:	ed2d 8b02 	vpush	{d8}
 23fdba4:	b08d      	sub	sp, #52	; 0x34
 23fdba6:	9104      	str	r1, [sp, #16]
 23fdba8:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 23fdbac:	4607      	mov	r7, r0
 23fdbae:	9105      	str	r1, [sp, #20]
 23fdbb0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 23fdbb4:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 23fdbb8:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
 23fdbba:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 23fdbbe:	9804      	ldr	r0, [sp, #16]
 23fdbc0:	4281      	cmp	r1, r0
 23fdbc2:	dd52      	ble.n	23fdc6a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
 23fdbc4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 23fdbc8:	4291      	cmp	r1, r2
 23fdbca:	dd4e      	ble.n	23fdc6a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
 23fdbcc:	2106      	movs	r1, #6
 23fdbce:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
 23fdbd2:	2c00      	cmp	r4, #0
 23fdbd4:	dd49      	ble.n	23fdc6a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
 23fdbd6:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
 23fdbda:	2c00      	cmp	r4, #0
 23fdbdc:	dd45      	ble.n	23fdc6a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
  for (int8_t i=0; i<6; i++ ) {
 23fdbde:	2400      	movs	r4, #0
      line = pgm_read_byte(font+(c*5)+i);
 23fdbe0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23fdbe4:	930b      	str	r3, [sp, #44]	; 0x2c
 23fdbe6:	b293      	uxth	r3, r2
 23fdbe8:	9307      	str	r3, [sp, #28]
 23fdbea:	3308      	adds	r3, #8
 23fdbec:	b29b      	uxth	r3, r3
 23fdbee:	9108      	str	r1, [sp, #32]
 23fdbf0:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
 23fdbf2:	2c05      	cmp	r4, #5
      line = 0x0;
 23fdbf4:	bf0f      	iteee	eq
 23fdbf6:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
 23fdbf8:	4b2b      	ldrne	r3, [pc, #172]	; (23fdca8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
 23fdbfa:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
 23fdbfc:	191b      	addne	r3, r3, r4
 23fdbfe:	bf18      	it	ne
 23fdc00:	5c9b      	ldrbne	r3, [r3, r2]
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fdc02:	9a04      	ldr	r2, [sp, #16]
      line = 0x0;
 23fdc04:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fdc06:	b2ab      	uxth	r3, r5
 23fdc08:	930a      	str	r3, [sp, #40]	; 0x28
 23fdc0a:	fb04 f305 	mul.w	r3, r4, r5
 23fdc0e:	9e07      	ldr	r6, [sp, #28]
 23fdc10:	fa13 f382 	uxtah	r3, r3, r2
 23fdc14:	b21b      	sxth	r3, r3
 23fdc16:	ee08 3a10 	vmov	s16, r3
 23fdc1a:	46b0      	mov	r8, r6
          drawPixel(x+i, y+j, bg);
 23fdc1c:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fdc20:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
 23fdc24:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
 23fdc28:	9b03      	ldr	r3, [sp, #12]
 23fdc2a:	07db      	lsls	r3, r3, #31
 23fdc2c:	d52f      	bpl.n	23fdc8e <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
 23fdc2e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
 23fdc30:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
 23fdc32:	d11f      	bne.n	23fdc74 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
 23fdc34:	f8d3 b010 	ldr.w	fp, [r3, #16]
 23fdc38:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
 23fdc3a:	4651      	mov	r1, sl
 23fdc3c:	4638      	mov	r0, r7
 23fdc3e:	b232      	sxth	r2, r6
 23fdc40:	47d8      	blx	fp
      line >>= 1;
 23fdc42:	9b03      	ldr	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
 23fdc44:	3601      	adds	r6, #1
      line >>= 1;
 23fdc46:	085b      	lsrs	r3, r3, #1
 23fdc48:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
 23fdc4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fdc4c:	b2b6      	uxth	r6, r6
 23fdc4e:	4498      	add	r8, r3
 23fdc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fdc52:	fa1f f888 	uxth.w	r8, r8
 23fdc56:	42b3      	cmp	r3, r6
 23fdc58:	d1e6      	bne.n	23fdc28 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
 23fdc5a:	9b08      	ldr	r3, [sp, #32]
 23fdc5c:	3401      	adds	r4, #1
 23fdc5e:	3b01      	subs	r3, #1
 23fdc60:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fdc64:	b264      	sxtb	r4, r4
 23fdc66:	9308      	str	r3, [sp, #32]
 23fdc68:	d1c3      	bne.n	23fdbf2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
 23fdc6a:	b00d      	add	sp, #52	; 0x34
 23fdc6c:	ecbd 8b02 	vpop	{d8}
 23fdc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
 23fdc74:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fdc76:	e9cd 9200 	strd	r9, r2, [sp]
 23fdc7a:	ee18 1a10 	vmov	r1, s16
 23fdc7e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 23fdc82:	4638      	mov	r0, r7
 23fdc84:	464b      	mov	r3, r9
 23fdc86:	fa0f f288 	sxth.w	r2, r8
 23fdc8a:	47d8      	blx	fp
 23fdc8c:	e7d9      	b.n	23fdc42 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
 23fdc8e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 23fdc92:	4293      	cmp	r3, r2
 23fdc94:	d0d5      	beq.n	23fdc42 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
 23fdc96:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
 23fdc98:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
 23fdc9a:	d103      	bne.n	23fdca4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
 23fdc9c:	f8d3 b010 	ldr.w	fp, [r3, #16]
 23fdca0:	9b06      	ldr	r3, [sp, #24]
 23fdca2:	e7ca      	b.n	23fdc3a <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fdca4:	9a06      	ldr	r2, [sp, #24]
 23fdca6:	e7e6      	b.n	23fdc76 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
 23fdca8:	023ff85c 	.word	0x023ff85c

023fdcac <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fdcac:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
 23fdcae:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
 23fdcb0:	4604      	mov	r4, r0
 23fdcb2:	b085      	sub	sp, #20
  if (c == '\n') {
 23fdcb4:	d107      	bne.n	23fdcc6 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
 23fdcb6:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
 23fdcb8:	8a63      	ldrh	r3, [r4, #18]
 23fdcba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 23fdcbe:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 23fdcc0:	2300      	movs	r3, #0
 23fdcc2:	8223      	strh	r3, [r4, #16]
 23fdcc4:	e021      	b.n	23fdd0a <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
 23fdcc6:	290d      	cmp	r1, #13
 23fdcc8:	d01f      	beq.n	23fdd0a <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 23fdcca:	7e03      	ldrb	r3, [r0, #24]
 23fdccc:	9302      	str	r3, [sp, #8]
 23fdcce:	8ac3      	ldrh	r3, [r0, #22]
 23fdcd0:	9301      	str	r3, [sp, #4]
 23fdcd2:	8a83      	ldrh	r3, [r0, #20]
 23fdcd4:	9300      	str	r3, [sp, #0]
 23fdcd6:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 23fdcda:	460b      	mov	r3, r1
 23fdcdc:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 23fdce0:	f7ff ff5c 	bl	23fdb9c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 23fdce4:	7e20      	ldrb	r0, [r4, #24]
 23fdce6:	8a23      	ldrh	r3, [r4, #16]
 23fdce8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 23fdcec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 23fdcf0:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
 23fdcf2:	b21b      	sxth	r3, r3
 23fdcf4:	4602      	mov	r2, r0
 23fdcf6:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 23fdcf8:	b139      	cbz	r1, 23fdd0a <_ZN12Adafruit_GFX5writeEh+0x5e>
 23fdcfa:	f06f 0505 	mvn.w	r5, #5
 23fdcfe:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 23fdd02:	fb05 1100 	mla	r1, r5, r0, r1
 23fdd06:	428b      	cmp	r3, r1
 23fdd08:	dcd6      	bgt.n	23fdcb8 <_ZN12Adafruit_GFX5writeEh+0xc>
}
 23fdd0a:	2001      	movs	r0, #1
 23fdd0c:	b005      	add	sp, #20
 23fdd0e:	bd30      	pop	{r4, r5, pc}

023fdd10 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
 23fdd10:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
 23fdd12:	8242      	strh	r2, [r0, #18]
}
 23fdd14:	4770      	bx	lr

023fdd16 <_ZN12Adafruit_GFX11getRotationEv>:
}
 23fdd16:	7e40      	ldrb	r0, [r0, #25]
 23fdd18:	4770      	bx	lr

023fdd1a <_ZN12Adafruit_GFX5widthEv>:
}
 23fdd1a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 23fdd1e:	4770      	bx	lr

023fdd20 <_ZN12Adafruit_GFX6heightEv>:
}
 23fdd20:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 23fdd24:	4770      	bx	lr
	...

023fdd28 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fdd28:	b509      	push	{r0, r3, lr}
 23fdd2a:	4804      	ldr	r0, [pc, #16]	; (23fdd3c <netdb_freeaddrinfo+0x14>)
 23fdd2c:	6800      	ldr	r0, [r0, #0]
 23fdd2e:	4b04      	ldr	r3, [pc, #16]	; (23fdd40 <netdb_freeaddrinfo+0x18>)
 23fdd30:	4403      	add	r3, r0
 23fdd32:	681b      	ldr	r3, [r3, #0]
 23fdd34:	689b      	ldr	r3, [r3, #8]
 23fdd36:	9302      	str	r3, [sp, #8]
 23fdd38:	bd09      	pop	{r0, r3, pc}
 23fdd3a:	0000      	.short	0x0000
 23fdd3c:	10079c68 	.word	0x10079c68
 23fdd40:	00000050 	.word	0x00000050

023fdd44 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fdd44:	b509      	push	{r0, r3, lr}
 23fdd46:	4804      	ldr	r0, [pc, #16]	; (23fdd58 <netdb_getaddrinfo+0x14>)
 23fdd48:	6800      	ldr	r0, [r0, #0]
 23fdd4a:	4b04      	ldr	r3, [pc, #16]	; (23fdd5c <netdb_getaddrinfo+0x18>)
 23fdd4c:	4403      	add	r3, r0
 23fdd4e:	681b      	ldr	r3, [r3, #0]
 23fdd50:	68db      	ldr	r3, [r3, #12]
 23fdd52:	9302      	str	r3, [sp, #8]
 23fdd54:	bd09      	pop	{r0, r3, pc}
 23fdd56:	0000      	.short	0x0000
 23fdd58:	10079c68 	.word	0x10079c68
 23fdd5c:	00000050 	.word	0x00000050

023fdd60 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fdd60:	b509      	push	{r0, r3, lr}
 23fdd62:	4804      	ldr	r0, [pc, #16]	; (23fdd74 <hal_gpio_mode+0x14>)
 23fdd64:	6800      	ldr	r0, [r0, #0]
 23fdd66:	4b04      	ldr	r3, [pc, #16]	; (23fdd78 <hal_gpio_mode+0x18>)
 23fdd68:	4403      	add	r3, r0
 23fdd6a:	681b      	ldr	r3, [r3, #0]
 23fdd6c:	689b      	ldr	r3, [r3, #8]
 23fdd6e:	9302      	str	r3, [sp, #8]
 23fdd70:	bd09      	pop	{r0, r3, pc}
 23fdd72:	0000      	.short	0x0000
 23fdd74:	10079c68 	.word	0x10079c68
 23fdd78:	00000014 	.word	0x00000014

023fdd7c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fdd7c:	b509      	push	{r0, r3, lr}
 23fdd7e:	4804      	ldr	r0, [pc, #16]	; (23fdd90 <hal_gpio_get_mode+0x14>)
 23fdd80:	6800      	ldr	r0, [r0, #0]
 23fdd82:	4b04      	ldr	r3, [pc, #16]	; (23fdd94 <hal_gpio_get_mode+0x18>)
 23fdd84:	4403      	add	r3, r0
 23fdd86:	681b      	ldr	r3, [r3, #0]
 23fdd88:	68db      	ldr	r3, [r3, #12]
 23fdd8a:	9302      	str	r3, [sp, #8]
 23fdd8c:	bd09      	pop	{r0, r3, pc}
 23fdd8e:	0000      	.short	0x0000
 23fdd90:	10079c68 	.word	0x10079c68
 23fdd94:	00000014 	.word	0x00000014

023fdd98 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fdd98:	b509      	push	{r0, r3, lr}
 23fdd9a:	4804      	ldr	r0, [pc, #16]	; (23fddac <hal_gpio_write+0x14>)
 23fdd9c:	6800      	ldr	r0, [r0, #0]
 23fdd9e:	4b04      	ldr	r3, [pc, #16]	; (23fddb0 <hal_gpio_write+0x18>)
 23fdda0:	4403      	add	r3, r0
 23fdda2:	681b      	ldr	r3, [r3, #0]
 23fdda4:	691b      	ldr	r3, [r3, #16]
 23fdda6:	9302      	str	r3, [sp, #8]
 23fdda8:	bd09      	pop	{r0, r3, pc}
 23fddaa:	0000      	.short	0x0000
 23fddac:	10079c68 	.word	0x10079c68
 23fddb0:	00000014 	.word	0x00000014

023fddb4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fddb4:	b509      	push	{r0, r3, lr}
 23fddb6:	4804      	ldr	r0, [pc, #16]	; (23fddc8 <HAL_RNG_GetRandomNumber+0x14>)
 23fddb8:	6800      	ldr	r0, [r0, #0]
 23fddba:	4b04      	ldr	r3, [pc, #16]	; (23fddcc <HAL_RNG_GetRandomNumber+0x18>)
 23fddbc:	4403      	add	r3, r0
 23fddbe:	681b      	ldr	r3, [r3, #0]
 23fddc0:	685b      	ldr	r3, [r3, #4]
 23fddc2:	9302      	str	r3, [sp, #8]
 23fddc4:	bd09      	pop	{r0, r3, pc}
 23fddc6:	0000      	.short	0x0000
 23fddc8:	10079c68 	.word	0x10079c68
 23fddcc:	00000000 	.word	0x00000000

023fddd0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fddd0:	b509      	push	{r0, r3, lr}
 23fddd2:	4804      	ldr	r0, [pc, #16]	; (23fdde4 <HAL_Delay_Microseconds+0x14>)
 23fddd4:	6800      	ldr	r0, [r0, #0]
 23fddd6:	4b04      	ldr	r3, [pc, #16]	; (23fdde8 <HAL_Delay_Microseconds+0x18>)
 23fddd8:	4403      	add	r3, r0
 23fddda:	681b      	ldr	r3, [r3, #0]
 23fdddc:	68db      	ldr	r3, [r3, #12]
 23fddde:	9302      	str	r3, [sp, #8]
 23fdde0:	bd09      	pop	{r0, r3, pc}
 23fdde2:	0000      	.short	0x0000
 23fdde4:	10079c68 	.word	0x10079c68
 23fdde8:	00000000 	.word	0x00000000

023fddec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fddec:	b509      	push	{r0, r3, lr}
 23fddee:	4804      	ldr	r0, [pc, #16]	; (23fde00 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fddf0:	6800      	ldr	r0, [r0, #0]
 23fddf2:	4b04      	ldr	r3, [pc, #16]	; (23fde04 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fddf4:	4403      	add	r3, r0
 23fddf6:	681b      	ldr	r3, [r3, #0]
 23fddf8:	695b      	ldr	r3, [r3, #20]
 23fddfa:	9302      	str	r3, [sp, #8]
 23fddfc:	bd09      	pop	{r0, r3, pc}
 23fddfe:	0000      	.short	0x0000
 23fde00:	10079c68 	.word	0x10079c68
 23fde04:	00000000 	.word	0x00000000

023fde08 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fde08:	b509      	push	{r0, r3, lr}
 23fde0a:	4804      	ldr	r0, [pc, #16]	; (23fde1c <hal_timer_millis+0x14>)
 23fde0c:	6800      	ldr	r0, [r0, #0]
 23fde0e:	4b04      	ldr	r3, [pc, #16]	; (23fde20 <hal_timer_millis+0x18>)
 23fde10:	4403      	add	r3, r0
 23fde12:	681b      	ldr	r3, [r3, #0]
 23fde14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fde16:	9302      	str	r3, [sp, #8]
 23fde18:	bd09      	pop	{r0, r3, pc}
 23fde1a:	0000      	.short	0x0000
 23fde1c:	10079c68 	.word	0x10079c68
 23fde20:	00000000 	.word	0x00000000

023fde24 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fde24:	b509      	push	{r0, r3, lr}
 23fde26:	4804      	ldr	r0, [pc, #16]	; (23fde38 <os_mutex_recursive_create+0x14>)
 23fde28:	6800      	ldr	r0, [r0, #0]
 23fde2a:	4b04      	ldr	r3, [pc, #16]	; (23fde3c <os_mutex_recursive_create+0x18>)
 23fde2c:	4403      	add	r3, r0
 23fde2e:	681b      	ldr	r3, [r3, #0]
 23fde30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fde32:	9302      	str	r3, [sp, #8]
 23fde34:	bd09      	pop	{r0, r3, pc}
 23fde36:	0000      	.short	0x0000
 23fde38:	10079c68 	.word	0x10079c68
 23fde3c:	00000030 	.word	0x00000030

023fde40 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fde40:	b509      	push	{r0, r3, lr}
 23fde42:	4804      	ldr	r0, [pc, #16]	; (23fde54 <inet_inet_ntop+0x14>)
 23fde44:	6800      	ldr	r0, [r0, #0]
 23fde46:	4b04      	ldr	r3, [pc, #16]	; (23fde58 <inet_inet_ntop+0x18>)
 23fde48:	4403      	add	r3, r0
 23fde4a:	681b      	ldr	r3, [r3, #0]
 23fde4c:	695b      	ldr	r3, [r3, #20]
 23fde4e:	9302      	str	r3, [sp, #8]
 23fde50:	bd09      	pop	{r0, r3, pc}
 23fde52:	0000      	.short	0x0000
 23fde54:	10079c68 	.word	0x10079c68
 23fde58:	0000004c 	.word	0x0000004c

023fde5c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fde5c:	b509      	push	{r0, r3, lr}
 23fde5e:	4804      	ldr	r0, [pc, #16]	; (23fde70 <hal_usart_write+0x14>)
 23fde60:	6800      	ldr	r0, [r0, #0]
 23fde62:	4b04      	ldr	r3, [pc, #16]	; (23fde74 <hal_usart_write+0x18>)
 23fde64:	4403      	add	r3, r0
 23fde66:	681b      	ldr	r3, [r3, #0]
 23fde68:	68db      	ldr	r3, [r3, #12]
 23fde6a:	9302      	str	r3, [sp, #8]
 23fde6c:	bd09      	pop	{r0, r3, pc}
 23fde6e:	0000      	.short	0x0000
 23fde70:	10079c68 	.word	0x10079c68
 23fde74:	00000024 	.word	0x00000024

023fde78 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fde78:	b509      	push	{r0, r3, lr}
 23fde7a:	4804      	ldr	r0, [pc, #16]	; (23fde8c <hal_usart_available+0x14>)
 23fde7c:	6800      	ldr	r0, [r0, #0]
 23fde7e:	4b04      	ldr	r3, [pc, #16]	; (23fde90 <hal_usart_available+0x18>)
 23fde80:	4403      	add	r3, r0
 23fde82:	681b      	ldr	r3, [r3, #0]
 23fde84:	691b      	ldr	r3, [r3, #16]
 23fde86:	9302      	str	r3, [sp, #8]
 23fde88:	bd09      	pop	{r0, r3, pc}
 23fde8a:	0000      	.short	0x0000
 23fde8c:	10079c68 	.word	0x10079c68
 23fde90:	00000024 	.word	0x00000024

023fde94 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fde94:	b509      	push	{r0, r3, lr}
 23fde96:	4804      	ldr	r0, [pc, #16]	; (23fdea8 <hal_usart_read+0x14>)
 23fde98:	6800      	ldr	r0, [r0, #0]
 23fde9a:	4b04      	ldr	r3, [pc, #16]	; (23fdeac <hal_usart_read+0x18>)
 23fde9c:	4403      	add	r3, r0
 23fde9e:	681b      	ldr	r3, [r3, #0]
 23fdea0:	695b      	ldr	r3, [r3, #20]
 23fdea2:	9302      	str	r3, [sp, #8]
 23fdea4:	bd09      	pop	{r0, r3, pc}
 23fdea6:	0000      	.short	0x0000
 23fdea8:	10079c68 	.word	0x10079c68
 23fdeac:	00000024 	.word	0x00000024

023fdeb0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fdeb0:	b509      	push	{r0, r3, lr}
 23fdeb2:	4804      	ldr	r0, [pc, #16]	; (23fdec4 <hal_usart_peek+0x14>)
 23fdeb4:	6800      	ldr	r0, [r0, #0]
 23fdeb6:	4b04      	ldr	r3, [pc, #16]	; (23fdec8 <hal_usart_peek+0x18>)
 23fdeb8:	4403      	add	r3, r0
 23fdeba:	681b      	ldr	r3, [r3, #0]
 23fdebc:	699b      	ldr	r3, [r3, #24]
 23fdebe:	9302      	str	r3, [sp, #8]
 23fdec0:	bd09      	pop	{r0, r3, pc}
 23fdec2:	0000      	.short	0x0000
 23fdec4:	10079c68 	.word	0x10079c68
 23fdec8:	00000024 	.word	0x00000024

023fdecc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fdecc:	b509      	push	{r0, r3, lr}
 23fdece:	4804      	ldr	r0, [pc, #16]	; (23fdee0 <hal_usart_flush+0x14>)
 23fded0:	6800      	ldr	r0, [r0, #0]
 23fded2:	4b04      	ldr	r3, [pc, #16]	; (23fdee4 <hal_usart_flush+0x18>)
 23fded4:	4403      	add	r3, r0
 23fded6:	681b      	ldr	r3, [r3, #0]
 23fded8:	69db      	ldr	r3, [r3, #28]
 23fdeda:	9302      	str	r3, [sp, #8]
 23fdedc:	bd09      	pop	{r0, r3, pc}
 23fdede:	0000      	.short	0x0000
 23fdee0:	10079c68 	.word	0x10079c68
 23fdee4:	00000024 	.word	0x00000024

023fdee8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fdee8:	b509      	push	{r0, r3, lr}
 23fdeea:	4804      	ldr	r0, [pc, #16]	; (23fdefc <hal_usart_is_enabled+0x14>)
 23fdeec:	6800      	ldr	r0, [r0, #0]
 23fdeee:	4b04      	ldr	r3, [pc, #16]	; (23fdf00 <hal_usart_is_enabled+0x18>)
 23fdef0:	4403      	add	r3, r0
 23fdef2:	681b      	ldr	r3, [r3, #0]
 23fdef4:	6a1b      	ldr	r3, [r3, #32]
 23fdef6:	9302      	str	r3, [sp, #8]
 23fdef8:	bd09      	pop	{r0, r3, pc}
 23fdefa:	0000      	.short	0x0000
 23fdefc:	10079c68 	.word	0x10079c68
 23fdf00:	00000024 	.word	0x00000024

023fdf04 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fdf04:	b509      	push	{r0, r3, lr}
 23fdf06:	4804      	ldr	r0, [pc, #16]	; (23fdf18 <hal_usart_available_data_for_write+0x14>)
 23fdf08:	6800      	ldr	r0, [r0, #0]
 23fdf0a:	4b04      	ldr	r3, [pc, #16]	; (23fdf1c <hal_usart_available_data_for_write+0x18>)
 23fdf0c:	4403      	add	r3, r0
 23fdf0e:	681b      	ldr	r3, [r3, #0]
 23fdf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fdf12:	9302      	str	r3, [sp, #8]
 23fdf14:	bd09      	pop	{r0, r3, pc}
 23fdf16:	0000      	.short	0x0000
 23fdf18:	10079c68 	.word	0x10079c68
 23fdf1c:	00000024 	.word	0x00000024

023fdf20 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fdf20:	b509      	push	{r0, r3, lr}
 23fdf22:	4804      	ldr	r0, [pc, #16]	; (23fdf34 <hal_usart_begin_config+0x14>)
 23fdf24:	6800      	ldr	r0, [r0, #0]
 23fdf26:	4b04      	ldr	r3, [pc, #16]	; (23fdf38 <hal_usart_begin_config+0x18>)
 23fdf28:	4403      	add	r3, r0
 23fdf2a:	681b      	ldr	r3, [r3, #0]
 23fdf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fdf2e:	9302      	str	r3, [sp, #8]
 23fdf30:	bd09      	pop	{r0, r3, pc}
 23fdf32:	0000      	.short	0x0000
 23fdf34:	10079c68 	.word	0x10079c68
 23fdf38:	00000024 	.word	0x00000024

023fdf3c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fdf3c:	b509      	push	{r0, r3, lr}
 23fdf3e:	4804      	ldr	r0, [pc, #16]	; (23fdf50 <hal_usart_init_ex+0x14>)
 23fdf40:	6800      	ldr	r0, [r0, #0]
 23fdf42:	4b04      	ldr	r3, [pc, #16]	; (23fdf54 <hal_usart_init_ex+0x18>)
 23fdf44:	4403      	add	r3, r0
 23fdf46:	681b      	ldr	r3, [r3, #0]
 23fdf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fdf4a:	9302      	str	r3, [sp, #8]
 23fdf4c:	bd09      	pop	{r0, r3, pc}
 23fdf4e:	0000      	.short	0x0000
 23fdf50:	10079c68 	.word	0x10079c68
 23fdf54:	00000024 	.word	0x00000024

023fdf58 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fdf58:	b509      	push	{r0, r3, lr}
 23fdf5a:	4804      	ldr	r0, [pc, #16]	; (23fdf6c <hal_i2c_begin+0x14>)
 23fdf5c:	6800      	ldr	r0, [r0, #0]
 23fdf5e:	4b04      	ldr	r3, [pc, #16]	; (23fdf70 <hal_i2c_begin+0x18>)
 23fdf60:	4403      	add	r3, r0
 23fdf62:	681b      	ldr	r3, [r3, #0]
 23fdf64:	68db      	ldr	r3, [r3, #12]
 23fdf66:	9302      	str	r3, [sp, #8]
 23fdf68:	bd09      	pop	{r0, r3, pc}
 23fdf6a:	0000      	.short	0x0000
 23fdf6c:	10079c68 	.word	0x10079c68
 23fdf70:	00000010 	.word	0x00000010

023fdf74 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fdf74:	b509      	push	{r0, r3, lr}
 23fdf76:	4804      	ldr	r0, [pc, #16]	; (23fdf88 <hal_i2c_begin_transmission+0x14>)
 23fdf78:	6800      	ldr	r0, [r0, #0]
 23fdf7a:	4b04      	ldr	r3, [pc, #16]	; (23fdf8c <hal_i2c_begin_transmission+0x18>)
 23fdf7c:	4403      	add	r3, r0
 23fdf7e:	681b      	ldr	r3, [r3, #0]
 23fdf80:	699b      	ldr	r3, [r3, #24]
 23fdf82:	9302      	str	r3, [sp, #8]
 23fdf84:	bd09      	pop	{r0, r3, pc}
 23fdf86:	0000      	.short	0x0000
 23fdf88:	10079c68 	.word	0x10079c68
 23fdf8c:	00000010 	.word	0x00000010

023fdf90 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fdf90:	b509      	push	{r0, r3, lr}
 23fdf92:	4804      	ldr	r0, [pc, #16]	; (23fdfa4 <hal_i2c_end_transmission+0x14>)
 23fdf94:	6800      	ldr	r0, [r0, #0]
 23fdf96:	4b04      	ldr	r3, [pc, #16]	; (23fdfa8 <hal_i2c_end_transmission+0x18>)
 23fdf98:	4403      	add	r3, r0
 23fdf9a:	681b      	ldr	r3, [r3, #0]
 23fdf9c:	69db      	ldr	r3, [r3, #28]
 23fdf9e:	9302      	str	r3, [sp, #8]
 23fdfa0:	bd09      	pop	{r0, r3, pc}
 23fdfa2:	0000      	.short	0x0000
 23fdfa4:	10079c68 	.word	0x10079c68
 23fdfa8:	00000010 	.word	0x00000010

023fdfac <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fdfac:	b509      	push	{r0, r3, lr}
 23fdfae:	4804      	ldr	r0, [pc, #16]	; (23fdfc0 <hal_i2c_write+0x14>)
 23fdfb0:	6800      	ldr	r0, [r0, #0]
 23fdfb2:	4b04      	ldr	r3, [pc, #16]	; (23fdfc4 <hal_i2c_write+0x18>)
 23fdfb4:	4403      	add	r3, r0
 23fdfb6:	681b      	ldr	r3, [r3, #0]
 23fdfb8:	6a1b      	ldr	r3, [r3, #32]
 23fdfba:	9302      	str	r3, [sp, #8]
 23fdfbc:	bd09      	pop	{r0, r3, pc}
 23fdfbe:	0000      	.short	0x0000
 23fdfc0:	10079c68 	.word	0x10079c68
 23fdfc4:	00000010 	.word	0x00000010

023fdfc8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fdfc8:	b509      	push	{r0, r3, lr}
 23fdfca:	4804      	ldr	r0, [pc, #16]	; (23fdfdc <hal_i2c_available+0x14>)
 23fdfcc:	6800      	ldr	r0, [r0, #0]
 23fdfce:	4b04      	ldr	r3, [pc, #16]	; (23fdfe0 <hal_i2c_available+0x18>)
 23fdfd0:	4403      	add	r3, r0
 23fdfd2:	681b      	ldr	r3, [r3, #0]
 23fdfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fdfd6:	9302      	str	r3, [sp, #8]
 23fdfd8:	bd09      	pop	{r0, r3, pc}
 23fdfda:	0000      	.short	0x0000
 23fdfdc:	10079c68 	.word	0x10079c68
 23fdfe0:	00000010 	.word	0x00000010

023fdfe4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fdfe4:	b509      	push	{r0, r3, lr}
 23fdfe6:	4804      	ldr	r0, [pc, #16]	; (23fdff8 <hal_i2c_read+0x14>)
 23fdfe8:	6800      	ldr	r0, [r0, #0]
 23fdfea:	4b04      	ldr	r3, [pc, #16]	; (23fdffc <hal_i2c_read+0x18>)
 23fdfec:	4403      	add	r3, r0
 23fdfee:	681b      	ldr	r3, [r3, #0]
 23fdff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fdff2:	9302      	str	r3, [sp, #8]
 23fdff4:	bd09      	pop	{r0, r3, pc}
 23fdff6:	0000      	.short	0x0000
 23fdff8:	10079c68 	.word	0x10079c68
 23fdffc:	00000010 	.word	0x00000010

023fe000 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fe000:	b509      	push	{r0, r3, lr}
 23fe002:	4804      	ldr	r0, [pc, #16]	; (23fe014 <hal_i2c_peek+0x14>)
 23fe004:	6800      	ldr	r0, [r0, #0]
 23fe006:	4b04      	ldr	r3, [pc, #16]	; (23fe018 <hal_i2c_peek+0x18>)
 23fe008:	4403      	add	r3, r0
 23fe00a:	681b      	ldr	r3, [r3, #0]
 23fe00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe00e:	9302      	str	r3, [sp, #8]
 23fe010:	bd09      	pop	{r0, r3, pc}
 23fe012:	0000      	.short	0x0000
 23fe014:	10079c68 	.word	0x10079c68
 23fe018:	00000010 	.word	0x00000010

023fe01c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fe01c:	b509      	push	{r0, r3, lr}
 23fe01e:	4804      	ldr	r0, [pc, #16]	; (23fe030 <hal_i2c_flush+0x14>)
 23fe020:	6800      	ldr	r0, [r0, #0]
 23fe022:	4b04      	ldr	r3, [pc, #16]	; (23fe034 <hal_i2c_flush+0x18>)
 23fe024:	4403      	add	r3, r0
 23fe026:	681b      	ldr	r3, [r3, #0]
 23fe028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe02a:	9302      	str	r3, [sp, #8]
 23fe02c:	bd09      	pop	{r0, r3, pc}
 23fe02e:	0000      	.short	0x0000
 23fe030:	10079c68 	.word	0x10079c68
 23fe034:	00000010 	.word	0x00000010

023fe038 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fe038:	b509      	push	{r0, r3, lr}
 23fe03a:	4804      	ldr	r0, [pc, #16]	; (23fe04c <hal_i2c_is_enabled+0x14>)
 23fe03c:	6800      	ldr	r0, [r0, #0]
 23fe03e:	4b04      	ldr	r3, [pc, #16]	; (23fe050 <hal_i2c_is_enabled+0x18>)
 23fe040:	4403      	add	r3, r0
 23fe042:	681b      	ldr	r3, [r3, #0]
 23fe044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe046:	9302      	str	r3, [sp, #8]
 23fe048:	bd09      	pop	{r0, r3, pc}
 23fe04a:	0000      	.short	0x0000
 23fe04c:	10079c68 	.word	0x10079c68
 23fe050:	00000010 	.word	0x00000010

023fe054 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fe054:	b509      	push	{r0, r3, lr}
 23fe056:	4804      	ldr	r0, [pc, #16]	; (23fe068 <hal_i2c_init+0x14>)
 23fe058:	6800      	ldr	r0, [r0, #0]
 23fe05a:	4b04      	ldr	r3, [pc, #16]	; (23fe06c <hal_i2c_init+0x18>)
 23fe05c:	4403      	add	r3, r0
 23fe05e:	681b      	ldr	r3, [r3, #0]
 23fe060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe062:	9302      	str	r3, [sp, #8]
 23fe064:	bd09      	pop	{r0, r3, pc}
 23fe066:	0000      	.short	0x0000
 23fe068:	10079c68 	.word	0x10079c68
 23fe06c:	00000010 	.word	0x00000010

023fe070 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fe070:	b509      	push	{r0, r3, lr}
 23fe072:	4804      	ldr	r0, [pc, #16]	; (23fe084 <hal_spi_begin+0x14>)
 23fe074:	6800      	ldr	r0, [r0, #0]
 23fe076:	4b04      	ldr	r3, [pc, #16]	; (23fe088 <hal_spi_begin+0x18>)
 23fe078:	4403      	add	r3, r0
 23fe07a:	681b      	ldr	r3, [r3, #0]
 23fe07c:	681b      	ldr	r3, [r3, #0]
 23fe07e:	9302      	str	r3, [sp, #8]
 23fe080:	bd09      	pop	{r0, r3, pc}
 23fe082:	0000      	.short	0x0000
 23fe084:	10079c68 	.word	0x10079c68
 23fe088:	00000018 	.word	0x00000018

023fe08c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 23fe08c:	b509      	push	{r0, r3, lr}
 23fe08e:	4804      	ldr	r0, [pc, #16]	; (23fe0a0 <hal_spi_set_bit_order+0x14>)
 23fe090:	6800      	ldr	r0, [r0, #0]
 23fe092:	4b04      	ldr	r3, [pc, #16]	; (23fe0a4 <hal_spi_set_bit_order+0x18>)
 23fe094:	4403      	add	r3, r0
 23fe096:	681b      	ldr	r3, [r3, #0]
 23fe098:	689b      	ldr	r3, [r3, #8]
 23fe09a:	9302      	str	r3, [sp, #8]
 23fe09c:	bd09      	pop	{r0, r3, pc}
 23fe09e:	0000      	.short	0x0000
 23fe0a0:	10079c68 	.word	0x10079c68
 23fe0a4:	00000018 	.word	0x00000018

023fe0a8 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fe0a8:	b509      	push	{r0, r3, lr}
 23fe0aa:	4804      	ldr	r0, [pc, #16]	; (23fe0bc <hal_spi_set_data_mode+0x14>)
 23fe0ac:	6800      	ldr	r0, [r0, #0]
 23fe0ae:	4b04      	ldr	r3, [pc, #16]	; (23fe0c0 <hal_spi_set_data_mode+0x18>)
 23fe0b0:	4403      	add	r3, r0
 23fe0b2:	681b      	ldr	r3, [r3, #0]
 23fe0b4:	68db      	ldr	r3, [r3, #12]
 23fe0b6:	9302      	str	r3, [sp, #8]
 23fe0b8:	bd09      	pop	{r0, r3, pc}
 23fe0ba:	0000      	.short	0x0000
 23fe0bc:	10079c68 	.word	0x10079c68
 23fe0c0:	00000018 	.word	0x00000018

023fe0c4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fe0c4:	b509      	push	{r0, r3, lr}
 23fe0c6:	4804      	ldr	r0, [pc, #16]	; (23fe0d8 <hal_spi_set_clock_divider+0x14>)
 23fe0c8:	6800      	ldr	r0, [r0, #0]
 23fe0ca:	4b04      	ldr	r3, [pc, #16]	; (23fe0dc <hal_spi_set_clock_divider+0x18>)
 23fe0cc:	4403      	add	r3, r0
 23fe0ce:	681b      	ldr	r3, [r3, #0]
 23fe0d0:	691b      	ldr	r3, [r3, #16]
 23fe0d2:	9302      	str	r3, [sp, #8]
 23fe0d4:	bd09      	pop	{r0, r3, pc}
 23fe0d6:	0000      	.short	0x0000
 23fe0d8:	10079c68 	.word	0x10079c68
 23fe0dc:	00000018 	.word	0x00000018

023fe0e0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fe0e0:	b509      	push	{r0, r3, lr}
 23fe0e2:	4804      	ldr	r0, [pc, #16]	; (23fe0f4 <hal_spi_transfer+0x14>)
 23fe0e4:	6800      	ldr	r0, [r0, #0]
 23fe0e6:	4b04      	ldr	r3, [pc, #16]	; (23fe0f8 <hal_spi_transfer+0x18>)
 23fe0e8:	4403      	add	r3, r0
 23fe0ea:	681b      	ldr	r3, [r3, #0]
 23fe0ec:	695b      	ldr	r3, [r3, #20]
 23fe0ee:	9302      	str	r3, [sp, #8]
 23fe0f0:	bd09      	pop	{r0, r3, pc}
 23fe0f2:	0000      	.short	0x0000
 23fe0f4:	10079c68 	.word	0x10079c68
 23fe0f8:	00000018 	.word	0x00000018

023fe0fc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fe0fc:	b509      	push	{r0, r3, lr}
 23fe0fe:	4804      	ldr	r0, [pc, #16]	; (23fe110 <hal_spi_init+0x14>)
 23fe100:	6800      	ldr	r0, [r0, #0]
 23fe102:	4b04      	ldr	r3, [pc, #16]	; (23fe114 <hal_spi_init+0x18>)
 23fe104:	4403      	add	r3, r0
 23fe106:	681b      	ldr	r3, [r3, #0]
 23fe108:	69db      	ldr	r3, [r3, #28]
 23fe10a:	9302      	str	r3, [sp, #8]
 23fe10c:	bd09      	pop	{r0, r3, pc}
 23fe10e:	0000      	.short	0x0000
 23fe110:	10079c68 	.word	0x10079c68
 23fe114:	00000018 	.word	0x00000018

023fe118 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fe118:	b509      	push	{r0, r3, lr}
 23fe11a:	4804      	ldr	r0, [pc, #16]	; (23fe12c <hal_spi_is_enabled+0x14>)
 23fe11c:	6800      	ldr	r0, [r0, #0]
 23fe11e:	4b04      	ldr	r3, [pc, #16]	; (23fe130 <hal_spi_is_enabled+0x18>)
 23fe120:	4403      	add	r3, r0
 23fe122:	681b      	ldr	r3, [r3, #0]
 23fe124:	6a1b      	ldr	r3, [r3, #32]
 23fe126:	9302      	str	r3, [sp, #8]
 23fe128:	bd09      	pop	{r0, r3, pc}
 23fe12a:	0000      	.short	0x0000
 23fe12c:	10079c68 	.word	0x10079c68
 23fe130:	00000018 	.word	0x00000018

023fe134 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fe134:	b509      	push	{r0, r3, lr}
 23fe136:	4804      	ldr	r0, [pc, #16]	; (23fe148 <hal_spi_info+0x14>)
 23fe138:	6800      	ldr	r0, [r0, #0]
 23fe13a:	4b04      	ldr	r3, [pc, #16]	; (23fe14c <hal_spi_info+0x18>)
 23fe13c:	4403      	add	r3, r0
 23fe13e:	681b      	ldr	r3, [r3, #0]
 23fe140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe142:	9302      	str	r3, [sp, #8]
 23fe144:	bd09      	pop	{r0, r3, pc}
 23fe146:	0000      	.short	0x0000
 23fe148:	10079c68 	.word	0x10079c68
 23fe14c:	00000018 	.word	0x00000018

023fe150 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fe150:	b509      	push	{r0, r3, lr}
 23fe152:	4804      	ldr	r0, [pc, #16]	; (23fe164 <hal_spi_set_settings+0x14>)
 23fe154:	6800      	ldr	r0, [r0, #0]
 23fe156:	4b04      	ldr	r3, [pc, #16]	; (23fe168 <hal_spi_set_settings+0x18>)
 23fe158:	4403      	add	r3, r0
 23fe15a:	681b      	ldr	r3, [r3, #0]
 23fe15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fe15e:	9302      	str	r3, [sp, #8]
 23fe160:	bd09      	pop	{r0, r3, pc}
 23fe162:	0000      	.short	0x0000
 23fe164:	10079c68 	.word	0x10079c68
 23fe168:	00000018 	.word	0x00000018

023fe16c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fe16c:	b509      	push	{r0, r3, lr}
 23fe16e:	4804      	ldr	r0, [pc, #16]	; (23fe180 <hal_spi_acquire+0x14>)
 23fe170:	6800      	ldr	r0, [r0, #0]
 23fe172:	4b04      	ldr	r3, [pc, #16]	; (23fe184 <hal_spi_acquire+0x18>)
 23fe174:	4403      	add	r3, r0
 23fe176:	681b      	ldr	r3, [r3, #0]
 23fe178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe17a:	9302      	str	r3, [sp, #8]
 23fe17c:	bd09      	pop	{r0, r3, pc}
 23fe17e:	0000      	.short	0x0000
 23fe180:	10079c68 	.word	0x10079c68
 23fe184:	00000018 	.word	0x00000018

023fe188 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fe188:	b509      	push	{r0, r3, lr}
 23fe18a:	4804      	ldr	r0, [pc, #16]	; (23fe19c <hal_spi_release+0x14>)
 23fe18c:	6800      	ldr	r0, [r0, #0]
 23fe18e:	4b04      	ldr	r3, [pc, #16]	; (23fe1a0 <hal_spi_release+0x18>)
 23fe190:	4403      	add	r3, r0
 23fe192:	681b      	ldr	r3, [r3, #0]
 23fe194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe196:	9302      	str	r3, [sp, #8]
 23fe198:	bd09      	pop	{r0, r3, pc}
 23fe19a:	0000      	.short	0x0000
 23fe19c:	10079c68 	.word	0x10079c68
 23fe1a0:	00000018 	.word	0x00000018

023fe1a4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fe1a4:	b509      	push	{r0, r3, lr}
 23fe1a6:	4804      	ldr	r0, [pc, #16]	; (23fe1b8 <HAL_USB_USART_Init+0x14>)
 23fe1a8:	6800      	ldr	r0, [r0, #0]
 23fe1aa:	4b04      	ldr	r3, [pc, #16]	; (23fe1bc <HAL_USB_USART_Init+0x18>)
 23fe1ac:	4403      	add	r3, r0
 23fe1ae:	681b      	ldr	r3, [r3, #0]
 23fe1b0:	681b      	ldr	r3, [r3, #0]
 23fe1b2:	9302      	str	r3, [sp, #8]
 23fe1b4:	bd09      	pop	{r0, r3, pc}
 23fe1b6:	0000      	.short	0x0000
 23fe1b8:	10079c68 	.word	0x10079c68
 23fe1bc:	00000034 	.word	0x00000034

023fe1c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fe1c0:	b509      	push	{r0, r3, lr}
 23fe1c2:	4804      	ldr	r0, [pc, #16]	; (23fe1d4 <HAL_USB_USART_Begin+0x14>)
 23fe1c4:	6800      	ldr	r0, [r0, #0]
 23fe1c6:	4b04      	ldr	r3, [pc, #16]	; (23fe1d8 <HAL_USB_USART_Begin+0x18>)
 23fe1c8:	4403      	add	r3, r0
 23fe1ca:	681b      	ldr	r3, [r3, #0]
 23fe1cc:	685b      	ldr	r3, [r3, #4]
 23fe1ce:	9302      	str	r3, [sp, #8]
 23fe1d0:	bd09      	pop	{r0, r3, pc}
 23fe1d2:	0000      	.short	0x0000
 23fe1d4:	10079c68 	.word	0x10079c68
 23fe1d8:	00000034 	.word	0x00000034

023fe1dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fe1dc:	b509      	push	{r0, r3, lr}
 23fe1de:	4804      	ldr	r0, [pc, #16]	; (23fe1f0 <HAL_USB_USART_Available_Data+0x14>)
 23fe1e0:	6800      	ldr	r0, [r0, #0]
 23fe1e2:	4b04      	ldr	r3, [pc, #16]	; (23fe1f4 <HAL_USB_USART_Available_Data+0x18>)
 23fe1e4:	4403      	add	r3, r0
 23fe1e6:	681b      	ldr	r3, [r3, #0]
 23fe1e8:	691b      	ldr	r3, [r3, #16]
 23fe1ea:	9302      	str	r3, [sp, #8]
 23fe1ec:	bd09      	pop	{r0, r3, pc}
 23fe1ee:	0000      	.short	0x0000
 23fe1f0:	10079c68 	.word	0x10079c68
 23fe1f4:	00000034 	.word	0x00000034

023fe1f8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fe1f8:	b509      	push	{r0, r3, lr}
 23fe1fa:	4804      	ldr	r0, [pc, #16]	; (23fe20c <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fe1fc:	6800      	ldr	r0, [r0, #0]
 23fe1fe:	4b04      	ldr	r3, [pc, #16]	; (23fe210 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fe200:	4403      	add	r3, r0
 23fe202:	681b      	ldr	r3, [r3, #0]
 23fe204:	695b      	ldr	r3, [r3, #20]
 23fe206:	9302      	str	r3, [sp, #8]
 23fe208:	bd09      	pop	{r0, r3, pc}
 23fe20a:	0000      	.short	0x0000
 23fe20c:	10079c68 	.word	0x10079c68
 23fe210:	00000034 	.word	0x00000034

023fe214 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe214:	b509      	push	{r0, r3, lr}
 23fe216:	4804      	ldr	r0, [pc, #16]	; (23fe228 <HAL_USB_USART_Receive_Data+0x14>)
 23fe218:	6800      	ldr	r0, [r0, #0]
 23fe21a:	4b04      	ldr	r3, [pc, #16]	; (23fe22c <HAL_USB_USART_Receive_Data+0x18>)
 23fe21c:	4403      	add	r3, r0
 23fe21e:	681b      	ldr	r3, [r3, #0]
 23fe220:	699b      	ldr	r3, [r3, #24]
 23fe222:	9302      	str	r3, [sp, #8]
 23fe224:	bd09      	pop	{r0, r3, pc}
 23fe226:	0000      	.short	0x0000
 23fe228:	10079c68 	.word	0x10079c68
 23fe22c:	00000034 	.word	0x00000034

023fe230 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe230:	b509      	push	{r0, r3, lr}
 23fe232:	4804      	ldr	r0, [pc, #16]	; (23fe244 <HAL_USB_USART_Send_Data+0x14>)
 23fe234:	6800      	ldr	r0, [r0, #0]
 23fe236:	4b04      	ldr	r3, [pc, #16]	; (23fe248 <HAL_USB_USART_Send_Data+0x18>)
 23fe238:	4403      	add	r3, r0
 23fe23a:	681b      	ldr	r3, [r3, #0]
 23fe23c:	69db      	ldr	r3, [r3, #28]
 23fe23e:	9302      	str	r3, [sp, #8]
 23fe240:	bd09      	pop	{r0, r3, pc}
 23fe242:	0000      	.short	0x0000
 23fe244:	10079c68 	.word	0x10079c68
 23fe248:	00000034 	.word	0x00000034

023fe24c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fe24c:	b509      	push	{r0, r3, lr}
 23fe24e:	4804      	ldr	r0, [pc, #16]	; (23fe260 <HAL_USB_USART_Flush_Data+0x14>)
 23fe250:	6800      	ldr	r0, [r0, #0]
 23fe252:	4b04      	ldr	r3, [pc, #16]	; (23fe264 <HAL_USB_USART_Flush_Data+0x18>)
 23fe254:	4403      	add	r3, r0
 23fe256:	681b      	ldr	r3, [r3, #0]
 23fe258:	6a1b      	ldr	r3, [r3, #32]
 23fe25a:	9302      	str	r3, [sp, #8]
 23fe25c:	bd09      	pop	{r0, r3, pc}
 23fe25e:	0000      	.short	0x0000
 23fe260:	10079c68 	.word	0x10079c68
 23fe264:	00000034 	.word	0x00000034

023fe268 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fe268:	b509      	push	{r0, r3, lr}
 23fe26a:	4804      	ldr	r0, [pc, #16]	; (23fe27c <HAL_USB_USART_Is_Connected+0x14>)
 23fe26c:	6800      	ldr	r0, [r0, #0]
 23fe26e:	4b04      	ldr	r3, [pc, #16]	; (23fe280 <HAL_USB_USART_Is_Connected+0x18>)
 23fe270:	4403      	add	r3, r0
 23fe272:	681b      	ldr	r3, [r3, #0]
 23fe274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe276:	9302      	str	r3, [sp, #8]
 23fe278:	bd09      	pop	{r0, r3, pc}
 23fe27a:	0000      	.short	0x0000
 23fe27c:	10079c68 	.word	0x10079c68
 23fe280:	00000034 	.word	0x00000034

023fe284 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fe284:	b509      	push	{r0, r3, lr}
 23fe286:	4804      	ldr	r0, [pc, #16]	; (23fe298 <panic_+0x14>)
 23fe288:	6800      	ldr	r0, [r0, #0]
 23fe28a:	4b04      	ldr	r3, [pc, #16]	; (23fe29c <panic_+0x18>)
 23fe28c:	4403      	add	r3, r0
 23fe28e:	681b      	ldr	r3, [r3, #0]
 23fe290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe292:	9302      	str	r3, [sp, #8]
 23fe294:	bd09      	pop	{r0, r3, pc}
 23fe296:	0000      	.short	0x0000
 23fe298:	10079c68 	.word	0x10079c68
 23fe29c:	00000048 	.word	0x00000048

023fe2a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fe2a0:	b509      	push	{r0, r3, lr}
 23fe2a2:	4804      	ldr	r0, [pc, #16]	; (23fe2b4 <set_system_mode+0x14>)
 23fe2a4:	6800      	ldr	r0, [r0, #0]
 23fe2a6:	4b04      	ldr	r3, [pc, #16]	; (23fe2b8 <set_system_mode+0x18>)
 23fe2a8:	4403      	add	r3, r0
 23fe2aa:	681b      	ldr	r3, [r3, #0]
 23fe2ac:	685b      	ldr	r3, [r3, #4]
 23fe2ae:	9302      	str	r3, [sp, #8]
 23fe2b0:	bd09      	pop	{r0, r3, pc}
 23fe2b2:	0000      	.short	0x0000
 23fe2b4:	10079c68 	.word	0x10079c68
 23fe2b8:	00000008 	.word	0x00000008

023fe2bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fe2bc:	b509      	push	{r0, r3, lr}
 23fe2be:	4804      	ldr	r0, [pc, #16]	; (23fe2d0 <system_delay_ms+0x14>)
 23fe2c0:	6800      	ldr	r0, [r0, #0]
 23fe2c2:	4b04      	ldr	r3, [pc, #16]	; (23fe2d4 <system_delay_ms+0x18>)
 23fe2c4:	4403      	add	r3, r0
 23fe2c6:	681b      	ldr	r3, [r3, #0]
 23fe2c8:	695b      	ldr	r3, [r3, #20]
 23fe2ca:	9302      	str	r3, [sp, #8]
 23fe2cc:	bd09      	pop	{r0, r3, pc}
 23fe2ce:	0000      	.short	0x0000
 23fe2d0:	10079c68 	.word	0x10079c68
 23fe2d4:	00000008 	.word	0x00000008

023fe2d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fe2d8:	b509      	push	{r0, r3, lr}
 23fe2da:	4804      	ldr	r0, [pc, #16]	; (23fe2ec <system_ctrl_set_app_request_handler+0x14>)
 23fe2dc:	6800      	ldr	r0, [r0, #0]
 23fe2de:	4b04      	ldr	r3, [pc, #16]	; (23fe2f0 <system_ctrl_set_app_request_handler+0x18>)
 23fe2e0:	4403      	add	r3, r0
 23fe2e2:	681b      	ldr	r3, [r3, #0]
 23fe2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fe2e8:	9302      	str	r3, [sp, #8]
 23fe2ea:	bd09      	pop	{r0, r3, pc}
 23fe2ec:	10079c68 	.word	0x10079c68
 23fe2f0:	00000008 	.word	0x00000008

023fe2f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fe2f4:	b509      	push	{r0, r3, lr}
 23fe2f6:	4804      	ldr	r0, [pc, #16]	; (23fe308 <system_ctrl_set_result+0x14>)
 23fe2f8:	6800      	ldr	r0, [r0, #0]
 23fe2fa:	4b04      	ldr	r3, [pc, #16]	; (23fe30c <system_ctrl_set_result+0x18>)
 23fe2fc:	4403      	add	r3, r0
 23fe2fe:	681b      	ldr	r3, [r3, #0]
 23fe300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fe304:	9302      	str	r3, [sp, #8]
 23fe306:	bd09      	pop	{r0, r3, pc}
 23fe308:	10079c68 	.word	0x10079c68
 23fe30c:	00000008 	.word	0x00000008

023fe310 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe310:	b509      	push	{r0, r3, lr}
 23fe312:	4804      	ldr	r0, [pc, #16]	; (23fe324 <network_connect+0x14>)
 23fe314:	6800      	ldr	r0, [r0, #0]
 23fe316:	4b04      	ldr	r3, [pc, #16]	; (23fe328 <network_connect+0x18>)
 23fe318:	4403      	add	r3, r0
 23fe31a:	681b      	ldr	r3, [r3, #0]
 23fe31c:	685b      	ldr	r3, [r3, #4]
 23fe31e:	9302      	str	r3, [sp, #8]
 23fe320:	bd09      	pop	{r0, r3, pc}
 23fe322:	0000      	.short	0x0000
 23fe324:	10079c68 	.word	0x10079c68
 23fe328:	00000028 	.word	0x00000028

023fe32c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fe32c:	b509      	push	{r0, r3, lr}
 23fe32e:	4804      	ldr	r0, [pc, #16]	; (23fe340 <network_connecting+0x14>)
 23fe330:	6800      	ldr	r0, [r0, #0]
 23fe332:	4b04      	ldr	r3, [pc, #16]	; (23fe344 <network_connecting+0x18>)
 23fe334:	4403      	add	r3, r0
 23fe336:	681b      	ldr	r3, [r3, #0]
 23fe338:	689b      	ldr	r3, [r3, #8]
 23fe33a:	9302      	str	r3, [sp, #8]
 23fe33c:	bd09      	pop	{r0, r3, pc}
 23fe33e:	0000      	.short	0x0000
 23fe340:	10079c68 	.word	0x10079c68
 23fe344:	00000028 	.word	0x00000028

023fe348 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fe348:	b509      	push	{r0, r3, lr}
 23fe34a:	4804      	ldr	r0, [pc, #16]	; (23fe35c <network_disconnect+0x14>)
 23fe34c:	6800      	ldr	r0, [r0, #0]
 23fe34e:	4b04      	ldr	r3, [pc, #16]	; (23fe360 <network_disconnect+0x18>)
 23fe350:	4403      	add	r3, r0
 23fe352:	681b      	ldr	r3, [r3, #0]
 23fe354:	68db      	ldr	r3, [r3, #12]
 23fe356:	9302      	str	r3, [sp, #8]
 23fe358:	bd09      	pop	{r0, r3, pc}
 23fe35a:	0000      	.short	0x0000
 23fe35c:	10079c68 	.word	0x10079c68
 23fe360:	00000028 	.word	0x00000028

023fe364 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fe364:	b509      	push	{r0, r3, lr}
 23fe366:	4804      	ldr	r0, [pc, #16]	; (23fe378 <network_ready+0x14>)
 23fe368:	6800      	ldr	r0, [r0, #0]
 23fe36a:	4b04      	ldr	r3, [pc, #16]	; (23fe37c <network_ready+0x18>)
 23fe36c:	4403      	add	r3, r0
 23fe36e:	681b      	ldr	r3, [r3, #0]
 23fe370:	691b      	ldr	r3, [r3, #16]
 23fe372:	9302      	str	r3, [sp, #8]
 23fe374:	bd09      	pop	{r0, r3, pc}
 23fe376:	0000      	.short	0x0000
 23fe378:	10079c68 	.word	0x10079c68
 23fe37c:	00000028 	.word	0x00000028

023fe380 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe380:	b509      	push	{r0, r3, lr}
 23fe382:	4804      	ldr	r0, [pc, #16]	; (23fe394 <network_on+0x14>)
 23fe384:	6800      	ldr	r0, [r0, #0]
 23fe386:	4b04      	ldr	r3, [pc, #16]	; (23fe398 <network_on+0x18>)
 23fe388:	4403      	add	r3, r0
 23fe38a:	681b      	ldr	r3, [r3, #0]
 23fe38c:	695b      	ldr	r3, [r3, #20]
 23fe38e:	9302      	str	r3, [sp, #8]
 23fe390:	bd09      	pop	{r0, r3, pc}
 23fe392:	0000      	.short	0x0000
 23fe394:	10079c68 	.word	0x10079c68
 23fe398:	00000028 	.word	0x00000028

023fe39c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe39c:	b509      	push	{r0, r3, lr}
 23fe39e:	4804      	ldr	r0, [pc, #16]	; (23fe3b0 <network_off+0x14>)
 23fe3a0:	6800      	ldr	r0, [r0, #0]
 23fe3a2:	4b04      	ldr	r3, [pc, #16]	; (23fe3b4 <network_off+0x18>)
 23fe3a4:	4403      	add	r3, r0
 23fe3a6:	681b      	ldr	r3, [r3, #0]
 23fe3a8:	699b      	ldr	r3, [r3, #24]
 23fe3aa:	9302      	str	r3, [sp, #8]
 23fe3ac:	bd09      	pop	{r0, r3, pc}
 23fe3ae:	0000      	.short	0x0000
 23fe3b0:	10079c68 	.word	0x10079c68
 23fe3b4:	00000028 	.word	0x00000028

023fe3b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fe3b8:	b509      	push	{r0, r3, lr}
 23fe3ba:	4804      	ldr	r0, [pc, #16]	; (23fe3cc <network_listen+0x14>)
 23fe3bc:	6800      	ldr	r0, [r0, #0]
 23fe3be:	4b04      	ldr	r3, [pc, #16]	; (23fe3d0 <network_listen+0x18>)
 23fe3c0:	4403      	add	r3, r0
 23fe3c2:	681b      	ldr	r3, [r3, #0]
 23fe3c4:	69db      	ldr	r3, [r3, #28]
 23fe3c6:	9302      	str	r3, [sp, #8]
 23fe3c8:	bd09      	pop	{r0, r3, pc}
 23fe3ca:	0000      	.short	0x0000
 23fe3cc:	10079c68 	.word	0x10079c68
 23fe3d0:	00000028 	.word	0x00000028

023fe3d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fe3d4:	b509      	push	{r0, r3, lr}
 23fe3d6:	4804      	ldr	r0, [pc, #16]	; (23fe3e8 <network_listening+0x14>)
 23fe3d8:	6800      	ldr	r0, [r0, #0]
 23fe3da:	4b04      	ldr	r3, [pc, #16]	; (23fe3ec <network_listening+0x18>)
 23fe3dc:	4403      	add	r3, r0
 23fe3de:	681b      	ldr	r3, [r3, #0]
 23fe3e0:	6a1b      	ldr	r3, [r3, #32]
 23fe3e2:	9302      	str	r3, [sp, #8]
 23fe3e4:	bd09      	pop	{r0, r3, pc}
 23fe3e6:	0000      	.short	0x0000
 23fe3e8:	10079c68 	.word	0x10079c68
 23fe3ec:	00000028 	.word	0x00000028

023fe3f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fe3f0:	b509      	push	{r0, r3, lr}
 23fe3f2:	4804      	ldr	r0, [pc, #16]	; (23fe404 <network_set_listen_timeout+0x14>)
 23fe3f4:	6800      	ldr	r0, [r0, #0]
 23fe3f6:	4b04      	ldr	r3, [pc, #16]	; (23fe408 <network_set_listen_timeout+0x18>)
 23fe3f8:	4403      	add	r3, r0
 23fe3fa:	681b      	ldr	r3, [r3, #0]
 23fe3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe3fe:	9302      	str	r3, [sp, #8]
 23fe400:	bd09      	pop	{r0, r3, pc}
 23fe402:	0000      	.short	0x0000
 23fe404:	10079c68 	.word	0x10079c68
 23fe408:	00000028 	.word	0x00000028

023fe40c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fe40c:	b509      	push	{r0, r3, lr}
 23fe40e:	4804      	ldr	r0, [pc, #16]	; (23fe420 <network_get_listen_timeout+0x14>)
 23fe410:	6800      	ldr	r0, [r0, #0]
 23fe412:	4b04      	ldr	r3, [pc, #16]	; (23fe424 <network_get_listen_timeout+0x18>)
 23fe414:	4403      	add	r3, r0
 23fe416:	681b      	ldr	r3, [r3, #0]
 23fe418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe41a:	9302      	str	r3, [sp, #8]
 23fe41c:	bd09      	pop	{r0, r3, pc}
 23fe41e:	0000      	.short	0x0000
 23fe420:	10079c68 	.word	0x10079c68
 23fe424:	00000028 	.word	0x00000028

023fe428 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fe428:	b509      	push	{r0, r3, lr}
 23fe42a:	4804      	ldr	r0, [pc, #16]	; (23fe43c <network_is_on+0x14>)
 23fe42c:	6800      	ldr	r0, [r0, #0]
 23fe42e:	4b04      	ldr	r3, [pc, #16]	; (23fe440 <network_is_on+0x18>)
 23fe430:	4403      	add	r3, r0
 23fe432:	681b      	ldr	r3, [r3, #0]
 23fe434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe436:	9302      	str	r3, [sp, #8]
 23fe438:	bd09      	pop	{r0, r3, pc}
 23fe43a:	0000      	.short	0x0000
 23fe43c:	10079c68 	.word	0x10079c68
 23fe440:	00000028 	.word	0x00000028

023fe444 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fe444:	b509      	push	{r0, r3, lr}
 23fe446:	4804      	ldr	r0, [pc, #16]	; (23fe458 <network_is_off+0x14>)
 23fe448:	6800      	ldr	r0, [r0, #0]
 23fe44a:	4b04      	ldr	r3, [pc, #16]	; (23fe45c <network_is_off+0x18>)
 23fe44c:	4403      	add	r3, r0
 23fe44e:	681b      	ldr	r3, [r3, #0]
 23fe450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe452:	9302      	str	r3, [sp, #8]
 23fe454:	bd09      	pop	{r0, r3, pc}
 23fe456:	0000      	.short	0x0000
 23fe458:	10079c68 	.word	0x10079c68
 23fe45c:	00000028 	.word	0x00000028

023fe460 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23fe460:	b509      	push	{r0, r3, lr}
 23fe462:	4804      	ldr	r0, [pc, #16]	; (23fe474 <network_prefer+0x14>)
 23fe464:	6800      	ldr	r0, [r0, #0]
 23fe466:	4b04      	ldr	r3, [pc, #16]	; (23fe478 <network_prefer+0x18>)
 23fe468:	4403      	add	r3, r0
 23fe46a:	681b      	ldr	r3, [r3, #0]
 23fe46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fe46e:	9302      	str	r3, [sp, #8]
 23fe470:	bd09      	pop	{r0, r3, pc}
 23fe472:	0000      	.short	0x0000
 23fe474:	10079c68 	.word	0x10079c68
 23fe478:	00000028 	.word	0x00000028

023fe47c <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fe47c:	b509      	push	{r0, r3, lr}
 23fe47e:	4804      	ldr	r0, [pc, #16]	; (23fe490 <network_is_preferred+0x14>)
 23fe480:	6800      	ldr	r0, [r0, #0]
 23fe482:	4b04      	ldr	r3, [pc, #16]	; (23fe494 <network_is_preferred+0x18>)
 23fe484:	4403      	add	r3, r0
 23fe486:	681b      	ldr	r3, [r3, #0]
 23fe488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fe48a:	9302      	str	r3, [sp, #8]
 23fe48c:	bd09      	pop	{r0, r3, pc}
 23fe48e:	0000      	.short	0x0000
 23fe490:	10079c68 	.word	0x10079c68
 23fe494:	00000028 	.word	0x00000028

023fe498 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fe498:	b509      	push	{r0, r3, lr}
 23fe49a:	4804      	ldr	r0, [pc, #16]	; (23fe4ac <spark_process+0x14>)
 23fe49c:	6800      	ldr	r0, [r0, #0]
 23fe49e:	4b04      	ldr	r3, [pc, #16]	; (23fe4b0 <spark_process+0x18>)
 23fe4a0:	4403      	add	r3, r0
 23fe4a2:	681b      	ldr	r3, [r3, #0]
 23fe4a4:	689b      	ldr	r3, [r3, #8]
 23fe4a6:	9302      	str	r3, [sp, #8]
 23fe4a8:	bd09      	pop	{r0, r3, pc}
 23fe4aa:	0000      	.short	0x0000
 23fe4ac:	10079c68 	.word	0x10079c68
 23fe4b0:	0000002c 	.word	0x0000002c

023fe4b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fe4b4:	b509      	push	{r0, r3, lr}
 23fe4b6:	4804      	ldr	r0, [pc, #16]	; (23fe4c8 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fe4b8:	6800      	ldr	r0, [r0, #0]
 23fe4ba:	4b04      	ldr	r3, [pc, #16]	; (23fe4cc <spark_set_random_seed_from_cloud_handler+0x18>)
 23fe4bc:	4403      	add	r3, r0
 23fe4be:	681b      	ldr	r3, [r3, #0]
 23fe4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fe4c2:	9302      	str	r3, [sp, #8]
 23fe4c4:	bd09      	pop	{r0, r3, pc}
 23fe4c6:	0000      	.short	0x0000
 23fe4c8:	10079c68 	.word	0x10079c68
 23fe4cc:	0000002c 	.word	0x0000002c

023fe4d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fe4d0:	b509      	push	{r0, r3, lr}
 23fe4d2:	4804      	ldr	r0, [pc, #16]	; (23fe4e4 <malloc+0x14>)
 23fe4d4:	6800      	ldr	r0, [r0, #0]
 23fe4d6:	4b04      	ldr	r3, [pc, #16]	; (23fe4e8 <malloc+0x18>)
 23fe4d8:	4403      	add	r3, r0
 23fe4da:	681b      	ldr	r3, [r3, #0]
 23fe4dc:	681b      	ldr	r3, [r3, #0]
 23fe4de:	9302      	str	r3, [sp, #8]
 23fe4e0:	bd09      	pop	{r0, r3, pc}
 23fe4e2:	0000      	.short	0x0000
 23fe4e4:	10079c68 	.word	0x10079c68
 23fe4e8:	00000004 	.word	0x00000004

023fe4ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fe4ec:	b509      	push	{r0, r3, lr}
 23fe4ee:	4804      	ldr	r0, [pc, #16]	; (23fe500 <free+0x14>)
 23fe4f0:	6800      	ldr	r0, [r0, #0]
 23fe4f2:	4b04      	ldr	r3, [pc, #16]	; (23fe504 <free+0x18>)
 23fe4f4:	4403      	add	r3, r0
 23fe4f6:	681b      	ldr	r3, [r3, #0]
 23fe4f8:	685b      	ldr	r3, [r3, #4]
 23fe4fa:	9302      	str	r3, [sp, #8]
 23fe4fc:	bd09      	pop	{r0, r3, pc}
 23fe4fe:	0000      	.short	0x0000
 23fe500:	10079c68 	.word	0x10079c68
 23fe504:	00000004 	.word	0x00000004

023fe508 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fe508:	b509      	push	{r0, r3, lr}
 23fe50a:	4804      	ldr	r0, [pc, #16]	; (23fe51c <realloc+0x14>)
 23fe50c:	6800      	ldr	r0, [r0, #0]
 23fe50e:	4b04      	ldr	r3, [pc, #16]	; (23fe520 <realloc+0x18>)
 23fe510:	4403      	add	r3, r0
 23fe512:	681b      	ldr	r3, [r3, #0]
 23fe514:	689b      	ldr	r3, [r3, #8]
 23fe516:	9302      	str	r3, [sp, #8]
 23fe518:	bd09      	pop	{r0, r3, pc}
 23fe51a:	0000      	.short	0x0000
 23fe51c:	10079c68 	.word	0x10079c68
 23fe520:	00000004 	.word	0x00000004

023fe524 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fe524:	b509      	push	{r0, r3, lr}
 23fe526:	4804      	ldr	r0, [pc, #16]	; (23fe538 <vsnprintf+0x14>)
 23fe528:	6800      	ldr	r0, [r0, #0]
 23fe52a:	4b04      	ldr	r3, [pc, #16]	; (23fe53c <vsnprintf+0x18>)
 23fe52c:	4403      	add	r3, r0
 23fe52e:	681b      	ldr	r3, [r3, #0]
 23fe530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe532:	9302      	str	r3, [sp, #8]
 23fe534:	bd09      	pop	{r0, r3, pc}
 23fe536:	0000      	.short	0x0000
 23fe538:	10079c68 	.word	0x10079c68
 23fe53c:	00000004 	.word	0x00000004

023fe540 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fe540:	b509      	push	{r0, r3, lr}
 23fe542:	4804      	ldr	r0, [pc, #16]	; (23fe554 <__assert_func+0x14>)
 23fe544:	6800      	ldr	r0, [r0, #0]
 23fe546:	4b04      	ldr	r3, [pc, #16]	; (23fe558 <__assert_func+0x18>)
 23fe548:	4403      	add	r3, r0
 23fe54a:	681b      	ldr	r3, [r3, #0]
 23fe54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe54e:	9302      	str	r3, [sp, #8]
 23fe550:	bd09      	pop	{r0, r3, pc}
 23fe552:	0000      	.short	0x0000
 23fe554:	10079c68 	.word	0x10079c68
 23fe558:	00000004 	.word	0x00000004

023fe55c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fe55c:	b509      	push	{r0, r3, lr}
 23fe55e:	4804      	ldr	r0, [pc, #16]	; (23fe570 <newlib_impure_ptr_callback+0x14>)
 23fe560:	6800      	ldr	r0, [r0, #0]
 23fe562:	4b04      	ldr	r3, [pc, #16]	; (23fe574 <newlib_impure_ptr_callback+0x18>)
 23fe564:	4403      	add	r3, r0
 23fe566:	681b      	ldr	r3, [r3, #0]
 23fe568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe56a:	9302      	str	r3, [sp, #8]
 23fe56c:	bd09      	pop	{r0, r3, pc}
 23fe56e:	0000      	.short	0x0000
 23fe570:	10079c68 	.word	0x10079c68
 23fe574:	00000004 	.word	0x00000004

023fe578 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fe578:	2200      	movs	r2, #0
 23fe57a:	6840      	ldr	r0, [r0, #4]
 23fe57c:	4611      	mov	r1, r2
 23fe57e:	f7ff bf29 	b.w	23fe3d4 <network_listening>

023fe582 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fe582:	2200      	movs	r2, #0
 23fe584:	6840      	ldr	r0, [r0, #4]
 23fe586:	4611      	mov	r1, r2
 23fe588:	f7ff bf40 	b.w	23fe40c <network_get_listen_timeout>

023fe58c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fe58c:	2200      	movs	r2, #0
 23fe58e:	6840      	ldr	r0, [r0, #4]
 23fe590:	f7ff bf2e 	b.w	23fe3f0 <network_set_listen_timeout>

023fe594 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fe594:	2200      	movs	r2, #0
 23fe596:	6840      	ldr	r0, [r0, #4]
 23fe598:	f081 0101 	eor.w	r1, r1, #1
 23fe59c:	f7ff bf0c 	b.w	23fe3b8 <network_listen>

023fe5a0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fe5a0:	2300      	movs	r3, #0
 23fe5a2:	6840      	ldr	r0, [r0, #4]
 23fe5a4:	461a      	mov	r2, r3
 23fe5a6:	4619      	mov	r1, r3
 23fe5a8:	f7ff bef8 	b.w	23fe39c <network_off>

023fe5ac <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fe5ac:	2300      	movs	r3, #0
 23fe5ae:	6840      	ldr	r0, [r0, #4]
 23fe5b0:	461a      	mov	r2, r3
 23fe5b2:	4619      	mov	r1, r3
 23fe5b4:	f7ff bee4 	b.w	23fe380 <network_on>

023fe5b8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fe5b8:	2200      	movs	r2, #0
 23fe5ba:	6840      	ldr	r0, [r0, #4]
 23fe5bc:	4611      	mov	r1, r2
 23fe5be:	f7ff bed1 	b.w	23fe364 <network_ready>

023fe5c2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fe5c2:	2200      	movs	r2, #0
 23fe5c4:	6840      	ldr	r0, [r0, #4]
 23fe5c6:	4611      	mov	r1, r2
 23fe5c8:	f7ff beb0 	b.w	23fe32c <network_connecting>

023fe5cc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fe5cc:	2200      	movs	r2, #0
 23fe5ce:	2102      	movs	r1, #2
 23fe5d0:	6840      	ldr	r0, [r0, #4]
 23fe5d2:	f7ff beb9 	b.w	23fe348 <network_disconnect>

023fe5d6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fe5d6:	2300      	movs	r3, #0
 23fe5d8:	6840      	ldr	r0, [r0, #4]
 23fe5da:	461a      	mov	r2, r3
 23fe5dc:	f7ff be98 	b.w	23fe310 <network_connect>

023fe5e0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fe5e0:	2203      	movs	r2, #3
 23fe5e2:	4b02      	ldr	r3, [pc, #8]	; (23fe5ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fe5e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fe5e6:	4a02      	ldr	r2, [pc, #8]	; (23fe5f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fe5e8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fe5ea:	4770      	bx	lr
 23fe5ec:	1007ae8c 	.word	0x1007ae8c
 23fe5f0:	023ffd98 	.word	0x023ffd98

023fe5f4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fe5f4:	2100      	movs	r1, #0
 23fe5f6:	f7ff bdc7 	b.w	23fe188 <hal_spi_release>

023fe5fa <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fe5fa:	2100      	movs	r1, #0
 23fe5fc:	f7ff bdb6 	b.w	23fe16c <hal_spi_acquire>

023fe600 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fe600:	b510      	push	{r4, lr}
 23fe602:	4604      	mov	r4, r0
 23fe604:	4608      	mov	r0, r1
{
    _spi = spi;
 23fe606:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fe608:	f7ff fd78 	bl	23fe0fc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe60c:	2300      	movs	r3, #0
}
 23fe60e:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe610:	6063      	str	r3, [r4, #4]
}
 23fe612:	bd10      	pop	{r4, pc}

023fe614 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fe614:	b513      	push	{r0, r1, r4, lr}
 23fe616:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fe618:	7800      	ldrb	r0, [r0, #0]
 23fe61a:	f7ff ffee 	bl	23fe5fa <_ZN8SPIClass4lockEv.isra.0>
 23fe61e:	b958      	cbnz	r0, 23fe638 <_ZN8SPIClass5beginEv+0x24>
 23fe620:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fe622:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fe626:	9001      	str	r0, [sp, #4]
 23fe628:	f7ff fd22 	bl	23fe070 <hal_spi_begin>
        unlock();
 23fe62c:	9801      	ldr	r0, [sp, #4]
    }
}
 23fe62e:	b002      	add	sp, #8
 23fe630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe634:	f7ff bfde 	b.w	23fe5f4 <_ZN8SPIClass6unlockEv.isra.0>
 23fe638:	b002      	add	sp, #8
 23fe63a:	bd10      	pop	{r4, pc}

023fe63c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 23fe63c:	b513      	push	{r0, r1, r4, lr}
 23fe63e:	4604      	mov	r4, r0
    if (!lock())
 23fe640:	7800      	ldrb	r0, [r0, #0]
{
 23fe642:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fe644:	f7ff ffd9 	bl	23fe5fa <_ZN8SPIClass4lockEv.isra.0>
 23fe648:	9901      	ldr	r1, [sp, #4]
 23fe64a:	b948      	cbnz	r0, 23fe660 <_ZN8SPIClass11setBitOrderEh+0x24>
 23fe64c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 23fe64e:	9001      	str	r0, [sp, #4]
 23fe650:	f7ff fd1c 	bl	23fe08c <hal_spi_set_bit_order>
        unlock();
 23fe654:	9801      	ldr	r0, [sp, #4]
    }
}
 23fe656:	b002      	add	sp, #8
 23fe658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe65c:	f7ff bfca 	b.w	23fe5f4 <_ZN8SPIClass6unlockEv.isra.0>
 23fe660:	b002      	add	sp, #8
 23fe662:	bd10      	pop	{r4, pc}

023fe664 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 23fe664:	b513      	push	{r0, r1, r4, lr}
 23fe666:	4604      	mov	r4, r0
    if (!lock())
 23fe668:	7800      	ldrb	r0, [r0, #0]
{
 23fe66a:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fe66c:	f7ff ffc5 	bl	23fe5fa <_ZN8SPIClass4lockEv.isra.0>
 23fe670:	9901      	ldr	r1, [sp, #4]
 23fe672:	b948      	cbnz	r0, 23fe688 <_ZN8SPIClass11setDataModeEh+0x24>
 23fe674:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23fe676:	9001      	str	r0, [sp, #4]
 23fe678:	f7ff fd16 	bl	23fe0a8 <hal_spi_set_data_mode>
        unlock();
 23fe67c:	9801      	ldr	r0, [sp, #4]
    }
}
 23fe67e:	b002      	add	sp, #8
 23fe680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe684:	f7ff bfb6 	b.w	23fe5f4 <_ZN8SPIClass6unlockEv.isra.0>
 23fe688:	b002      	add	sp, #8
 23fe68a:	bd10      	pop	{r4, pc}

023fe68c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fe68c:	7800      	ldrb	r0, [r0, #0]
 23fe68e:	f7ff bfb1 	b.w	23fe5f4 <_ZN8SPIClass6unlockEv.isra.0>
	...

023fe694 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fe694:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fe696:	2400      	movs	r4, #0
 23fe698:	0840      	lsrs	r0, r0, #1
 23fe69a:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe69c:	6818      	ldr	r0, [r3, #0]
 23fe69e:	b2e5      	uxtb	r5, r4
 23fe6a0:	4288      	cmp	r0, r1
 23fe6a2:	d906      	bls.n	23fe6b2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fe6a4:	3401      	adds	r4, #1
 23fe6a6:	2c08      	cmp	r4, #8
 23fe6a8:	d002      	beq.n	23fe6b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fe6aa:	0840      	lsrs	r0, r0, #1
 23fe6ac:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe6ae:	e7f5      	b.n	23fe69c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fe6b0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fe6b2:	4b02      	ldr	r3, [pc, #8]	; (23fe6bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fe6b4:	5d5b      	ldrb	r3, [r3, r5]
 23fe6b6:	7013      	strb	r3, [r2, #0]
}
 23fe6b8:	bd30      	pop	{r4, r5, pc}
 23fe6ba:	bf00      	nop
 23fe6bc:	023ffdd4 	.word	0x023ffdd4

023fe6c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fe6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe6c4:	4606      	mov	r6, r0
 23fe6c6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fe6c8:	7800      	ldrb	r0, [r0, #0]
{
 23fe6ca:	460c      	mov	r4, r1
    CHECK(lock());
 23fe6cc:	f7ff ff95 	bl	23fe5fa <_ZN8SPIClass4lockEv.isra.0>
 23fe6d0:	2800      	cmp	r0, #0
 23fe6d2:	db1b      	blt.n	23fe70c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe6d4:	2214      	movs	r2, #20
 23fe6d6:	2100      	movs	r1, #0
 23fe6d8:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fe6da:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe6dc:	f000 ff1f 	bl	23ff51e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe6e0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fe6e2:	2200      	movs	r2, #0
 23fe6e4:	4628      	mov	r0, r5
 23fe6e6:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe6e8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fe6ec:	f7ff fd22 	bl	23fe134 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fe6f0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fe6f4:	b113      	cbz	r3, 23fe6fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fe6f6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fe6fa:	b155      	cbz	r5, 23fe712 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fe6fc:	2700      	movs	r7, #0
 23fe6fe:	2501      	movs	r5, #1
 23fe700:	46b9      	mov	r9, r7
 23fe702:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fe704:	7923      	ldrb	r3, [r4, #4]
 23fe706:	b15d      	cbz	r5, 23fe720 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fe708:	b1c3      	cbz	r3, 23fe73c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fe70a:	2000      	movs	r0, #0
}
 23fe70c:	b00f      	add	sp, #60	; 0x3c
 23fe70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fe712:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fe716:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fe71a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fe71e:	e7f1      	b.n	23fe704 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fe720:	2b00      	cmp	r3, #0
 23fe722:	d135      	bne.n	23fe790 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fe724:	68a3      	ldr	r3, [r4, #8]
 23fe726:	4543      	cmp	r3, r8
 23fe728:	d108      	bne.n	23fe73c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fe72a:	f88d 9020 	strb.w	r9, [sp, #32]
 23fe72e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fe732:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fe736:	89a3      	ldrh	r3, [r4, #12]
 23fe738:	429a      	cmp	r2, r3
 23fe73a:	d0e6      	beq.n	23fe70a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fe73c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fe73e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fe740:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fe744:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fe746:	ab04      	add	r3, sp, #16
 23fe748:	f10d 020f 	add.w	r2, sp, #15
 23fe74c:	f7ff ffa2 	bl	23fe694 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fe750:	7921      	ldrb	r1, [r4, #4]
 23fe752:	b985      	cbnz	r5, 23fe776 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fe754:	b989      	cbnz	r1, 23fe77a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fe756:	68a3      	ldr	r3, [r4, #8]
 23fe758:	4543      	cmp	r3, r8
 23fe75a:	d30e      	bcc.n	23fe77a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fe75c:	f88d 9020 	strb.w	r9, [sp, #32]
 23fe760:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fe764:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fe768:	89a3      	ldrh	r3, [r4, #12]
 23fe76a:	429a      	cmp	r2, r3
 23fe76c:	d105      	bne.n	23fe77a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fe76e:	9b04      	ldr	r3, [sp, #16]
 23fe770:	4543      	cmp	r3, r8
 23fe772:	d102      	bne.n	23fe77a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fe774:	e7c9      	b.n	23fe70a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fe776:	2900      	cmp	r1, #0
 23fe778:	d1f9      	bne.n	23fe76e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fe77a:	2300      	movs	r3, #0
 23fe77c:	9301      	str	r3, [sp, #4]
 23fe77e:	7b63      	ldrb	r3, [r4, #13]
 23fe780:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fe784:	9300      	str	r3, [sp, #0]
 23fe786:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fe788:	7830      	ldrb	r0, [r6, #0]
 23fe78a:	f7ff fce1 	bl	23fe150 <hal_spi_set_settings>
 23fe78e:	e7bc      	b.n	23fe70a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fe790:	462b      	mov	r3, r5
 23fe792:	462a      	mov	r2, r5
 23fe794:	2101      	movs	r1, #1
 23fe796:	e9cd 5500 	strd	r5, r5, [sp]
 23fe79a:	e7f5      	b.n	23fe788 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fe79c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23fe79c:	2300      	movs	r3, #0
{
 23fe79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe7a2:	4604      	mov	r4, r0
 23fe7a4:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23fe7a6:	7800      	ldrb	r0, [r0, #0]
{
 23fe7a8:	460e      	mov	r6, r1
 23fe7aa:	4617      	mov	r7, r2
    unsigned clock = 0;
 23fe7ac:	9302      	str	r3, [sp, #8]
    if (!lock())
 23fe7ae:	f7ff ff24 	bl	23fe5fa <_ZN8SPIClass4lockEv.isra.0>
 23fe7b2:	4605      	mov	r5, r0
 23fe7b4:	bb00      	cbnz	r0, 23fe7f8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe7b6:	4601      	mov	r1, r0
 23fe7b8:	2214      	movs	r2, #20
 23fe7ba:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23fe7bc:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe7c0:	f000 fead 	bl	23ff51e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe7c4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fe7c6:	462a      	mov	r2, r5
 23fe7c8:	4640      	mov	r0, r8
 23fe7ca:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe7cc:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23fe7d0:	f7ff fcb0 	bl	23fe134 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fe7d4:	fb07 f106 	mul.w	r1, r7, r6
 23fe7d8:	9804      	ldr	r0, [sp, #16]
 23fe7da:	ab02      	add	r3, sp, #8
 23fe7dc:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23fe7e0:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fe7e4:	f7ff ff56 	bl	23fe694 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23fe7e8:	7820      	ldrb	r0, [r4, #0]
 23fe7ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23fe7ee:	f7ff fc69 	bl	23fe0c4 <hal_spi_set_clock_divider>
        unlock();
 23fe7f2:	7820      	ldrb	r0, [r4, #0]
 23fe7f4:	f7ff fefe 	bl	23fe5f4 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23fe7f8:	9802      	ldr	r0, [sp, #8]
 23fe7fa:	b008      	add	sp, #32
 23fe7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe800 <_ZN8SPIClass15setClockDividerEh>:
{
 23fe800:	b538      	push	{r3, r4, r5, lr}
 23fe802:	4604      	mov	r4, r0
    if (!lock())
 23fe804:	7800      	ldrb	r0, [r0, #0]
{
 23fe806:	460d      	mov	r5, r1
    if (!lock())
 23fe808:	f7ff fef7 	bl	23fe5fa <_ZN8SPIClass4lockEv.isra.0>
 23fe80c:	4603      	mov	r3, r0
 23fe80e:	b9d0      	cbnz	r0, 23fe846 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
 23fe810:	6861      	ldr	r1, [r4, #4]
 23fe812:	b199      	cbz	r1, 23fe83c <_ZN8SPIClass15setClockDividerEh+0x3c>
 23fe814:	4a0c      	ldr	r2, [pc, #48]	; (23fe848 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
 23fe816:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fe81a:	4285      	cmp	r5, r0
 23fe81c:	d002      	beq.n	23fe824 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
 23fe81e:	3301      	adds	r3, #1
 23fe820:	2b08      	cmp	r3, #8
 23fe822:	d1f8      	bne.n	23fe816 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
 23fe824:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 23fe826:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 23fe828:	2201      	movs	r2, #1
 23fe82a:	4620      	mov	r0, r4
 23fe82c:	40d9      	lsrs	r1, r3
 23fe82e:	f7ff ffb5 	bl	23fe79c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 23fe832:	7820      	ldrb	r0, [r4, #0]
}
 23fe834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
 23fe838:	f7ff bedc 	b.w	23fe5f4 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
 23fe83c:	4629      	mov	r1, r5
 23fe83e:	7820      	ldrb	r0, [r4, #0]
 23fe840:	f7ff fc40 	bl	23fe0c4 <hal_spi_set_clock_divider>
 23fe844:	e7f5      	b.n	23fe832 <_ZN8SPIClass15setClockDividerEh+0x32>
}
 23fe846:	bd38      	pop	{r3, r4, r5, pc}
 23fe848:	023ffdd4 	.word	0x023ffdd4

023fe84c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 23fe84c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fe84e:	7800      	ldrb	r0, [r0, #0]
 23fe850:	f7ff fc46 	bl	23fe0e0 <hal_spi_transfer>
}
 23fe854:	b2c0      	uxtb	r0, r0
 23fe856:	bd08      	pop	{r3, pc}

023fe858 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fe858:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fe85a:	2000      	movs	r0, #0
 23fe85c:	4b04      	ldr	r3, [pc, #16]	; (23fe870 <_GLOBAL__sub_I_System+0x18>)
 23fe85e:	601a      	str	r2, [r3, #0]
 23fe860:	4b04      	ldr	r3, [pc, #16]	; (23fe874 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fe862:	4a05      	ldr	r2, [pc, #20]	; (23fe878 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fe864:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fe868:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe86a:	f7ff bd19 	b.w	23fe2a0 <set_system_mode>
 23fe86e:	bf00      	nop
 23fe870:	1007aea0 	.word	0x1007aea0
 23fe874:	1007ae94 	.word	0x1007ae94
 23fe878:	ffff0000 	.word	0xffff0000

023fe87c <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fe87c:	b510      	push	{r4, lr}
 23fe87e:	4604      	mov	r4, r0
    if (buffer) {
 23fe880:	6800      	ldr	r0, [r0, #0]
 23fe882:	b108      	cbz	r0, 23fe888 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fe884:	f7ff fe32 	bl	23fe4ec <free>
    }
    buffer = nullptr;
 23fe888:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fe88a:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fe88e:	6023      	str	r3, [r4, #0]
}
 23fe890:	bd10      	pop	{r4, pc}

023fe892 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fe892:	b538      	push	{r3, r4, r5, lr}
 23fe894:	4604      	mov	r4, r0
 23fe896:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fe898:	6800      	ldr	r0, [r0, #0]
 23fe89a:	3101      	adds	r1, #1
 23fe89c:	f7ff fe34 	bl	23fe508 <realloc>
    if (newbuffer) {
 23fe8a0:	b110      	cbz	r0, 23fe8a8 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fe8a2:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fe8a6:	2001      	movs	r0, #1
    }
    return 0;
}
 23fe8a8:	bd38      	pop	{r3, r4, r5, pc}

023fe8aa <_ZN6String7reserveEj>:
{
 23fe8aa:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fe8ac:	6803      	ldr	r3, [r0, #0]
{
 23fe8ae:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fe8b0:	b123      	cbz	r3, 23fe8bc <_ZN6String7reserveEj+0x12>
 23fe8b2:	6843      	ldr	r3, [r0, #4]
 23fe8b4:	428b      	cmp	r3, r1
 23fe8b6:	d301      	bcc.n	23fe8bc <_ZN6String7reserveEj+0x12>
 23fe8b8:	2001      	movs	r0, #1
}
 23fe8ba:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fe8bc:	4620      	mov	r0, r4
 23fe8be:	f7ff ffe8 	bl	23fe892 <_ZN6String12changeBufferEj>
 23fe8c2:	2800      	cmp	r0, #0
 23fe8c4:	d0f9      	beq.n	23fe8ba <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fe8c6:	68a3      	ldr	r3, [r4, #8]
 23fe8c8:	2b00      	cmp	r3, #0
 23fe8ca:	d1f5      	bne.n	23fe8b8 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fe8cc:	6822      	ldr	r2, [r4, #0]
 23fe8ce:	7013      	strb	r3, [r2, #0]
 23fe8d0:	e7f2      	b.n	23fe8b8 <_ZN6String7reserveEj+0xe>

023fe8d2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fe8d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe8d4:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fe8d6:	4611      	mov	r1, r2
 23fe8d8:	9201      	str	r2, [sp, #4]
{
 23fe8da:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fe8dc:	f7ff ffe5 	bl	23fe8aa <_ZN6String7reserveEj>
 23fe8e0:	9a01      	ldr	r2, [sp, #4]
 23fe8e2:	b928      	cbnz	r0, 23fe8f0 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fe8e4:	4620      	mov	r0, r4
 23fe8e6:	f7ff ffc9 	bl	23fe87c <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fe8ea:	4620      	mov	r0, r4
 23fe8ec:	b003      	add	sp, #12
 23fe8ee:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fe8f0:	4629      	mov	r1, r5
    len = length;
 23fe8f2:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fe8f4:	6820      	ldr	r0, [r4, #0]
 23fe8f6:	f000 fe05 	bl	23ff504 <memcpy>
    buffer[len] = 0;
 23fe8fa:	2100      	movs	r1, #0
 23fe8fc:	6822      	ldr	r2, [r4, #0]
 23fe8fe:	68a3      	ldr	r3, [r4, #8]
 23fe900:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fe902:	e7f2      	b.n	23fe8ea <_ZN6String4copyEPKcj+0x18>

023fe904 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fe904:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fe906:	b513      	push	{r0, r1, r4, lr}
 23fe908:	4604      	mov	r4, r0
    capacity_ = 0;
 23fe90a:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fe90e:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fe910:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fe912:	b141      	cbz	r1, 23fe926 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fe914:	4608      	mov	r0, r1
 23fe916:	9101      	str	r1, [sp, #4]
 23fe918:	f7fd ff82 	bl	23fc820 <strlen>
 23fe91c:	9901      	ldr	r1, [sp, #4]
 23fe91e:	4602      	mov	r2, r0
 23fe920:	4620      	mov	r0, r4
 23fe922:	f7ff ffd6 	bl	23fe8d2 <_ZN6String4copyEPKcj>
}
 23fe926:	4620      	mov	r0, r4
 23fe928:	b002      	add	sp, #8
 23fe92a:	bd10      	pop	{r4, pc}

023fe92c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fe92c:	2300      	movs	r3, #0
 23fe92e:	4802      	ldr	r0, [pc, #8]	; (23fe938 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fe930:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fe932:	f7ff ba77 	b.w	23fde24 <os_mutex_recursive_create>
 23fe936:	bf00      	nop
 23fe938:	1007aea4 	.word	0x1007aea4

023fe93c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe93e:	4606      	mov	r6, r0
 23fe940:	460d      	mov	r5, r1
  size_t n = 0;
 23fe942:	2400      	movs	r4, #0
 23fe944:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe946:	42bd      	cmp	r5, r7
 23fe948:	d00c      	beq.n	23fe964 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fe94a:	6833      	ldr	r3, [r6, #0]
 23fe94c:	4630      	mov	r0, r6
 23fe94e:	689b      	ldr	r3, [r3, #8]
 23fe950:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe954:	4798      	blx	r3
     if (chunk>=0)
 23fe956:	1e03      	subs	r3, r0, #0
 23fe958:	db01      	blt.n	23fe95e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fe95a:	441c      	add	r4, r3
  while (size--) {
 23fe95c:	e7f3      	b.n	23fe946 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fe95e:	2c00      	cmp	r4, #0
 23fe960:	bf08      	it	eq
 23fe962:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fe964:	4620      	mov	r0, r4
 23fe966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe968 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fe968:	b513      	push	{r0, r1, r4, lr}
 23fe96a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fe96c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fe96e:	b159      	cbz	r1, 23fe988 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fe970:	9101      	str	r1, [sp, #4]
 23fe972:	f7fd ff55 	bl	23fc820 <strlen>
 23fe976:	4602      	mov	r2, r0
 23fe978:	4620      	mov	r0, r4
 23fe97a:	6823      	ldr	r3, [r4, #0]
 23fe97c:	9901      	ldr	r1, [sp, #4]
 23fe97e:	68db      	ldr	r3, [r3, #12]
    }
 23fe980:	b002      	add	sp, #8
 23fe982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fe986:	4718      	bx	r3
    }
 23fe988:	b002      	add	sp, #8
 23fe98a:	bd10      	pop	{r4, pc}

023fe98c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fe98c:	b508      	push	{r3, lr}
  return write(str);
 23fe98e:	f7ff ffeb 	bl	23fe968 <_ZN5Print5writeEPKc>
}
 23fe992:	bd08      	pop	{r3, pc}

023fe994 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fe994:	6803      	ldr	r3, [r0, #0]
 23fe996:	689b      	ldr	r3, [r3, #8]
 23fe998:	4718      	bx	r3

023fe99a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fe99a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fe99c:	210d      	movs	r1, #13
{
 23fe99e:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fe9a0:	f7ff fff8 	bl	23fe994 <_ZN5Print5printEc>
  n += print('\n');
 23fe9a4:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fe9a6:	4604      	mov	r4, r0
  n += print('\n');
 23fe9a8:	4628      	mov	r0, r5
 23fe9aa:	f7ff fff3 	bl	23fe994 <_ZN5Print5printEc>
  return n;
}
 23fe9ae:	4420      	add	r0, r4
 23fe9b0:	bd38      	pop	{r3, r4, r5, pc}

023fe9b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fe9b2:	b538      	push	{r3, r4, r5, lr}
 23fe9b4:	4605      	mov	r5, r0
  return write(str);
 23fe9b6:	f7ff ffd7 	bl	23fe968 <_ZN5Print5writeEPKc>
 23fe9ba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fe9bc:	4628      	mov	r0, r5
 23fe9be:	f7ff ffec 	bl	23fe99a <_ZN5Print7printlnEv>
  return n;
}
 23fe9c2:	4420      	add	r0, r4
 23fe9c4:	bd38      	pop	{r3, r4, r5, pc}

023fe9c6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fe9c6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fe9c8:	2a01      	cmp	r2, #1
 23fe9ca:	bf98      	it	ls
 23fe9cc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe9ce:	b530      	push	{r4, r5, lr}
 23fe9d0:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe9d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe9d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fe9d8:	460d      	mov	r5, r1
 23fe9da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe9de:	fb01 5312 	mls	r3, r1, r2, r5
 23fe9e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe9e6:	2b09      	cmp	r3, #9
 23fe9e8:	bf94      	ite	ls
 23fe9ea:	3330      	addls	r3, #48	; 0x30
 23fe9ec:	3337      	addhi	r3, #55	; 0x37
 23fe9ee:	b2db      	uxtb	r3, r3
  } while(n);
 23fe9f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe9f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe9f6:	d9ef      	bls.n	23fe9d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fe9f8:	4621      	mov	r1, r4
 23fe9fa:	f7ff ffb5 	bl	23fe968 <_ZN5Print5writeEPKc>
}
 23fe9fe:	b00b      	add	sp, #44	; 0x2c
 23fea00:	bd30      	pop	{r4, r5, pc}

023fea02 <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23fea02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fea06:	b086      	sub	sp, #24
 23fea08:	af00      	add	r7, sp, #0
 23fea0a:	4605      	mov	r5, r0
 23fea0c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23fea0e:	1d38      	adds	r0, r7, #4
 23fea10:	2114      	movs	r1, #20
{
 23fea12:	4614      	mov	r4, r2
    va_copy(args2, args);
 23fea14:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23fea16:	f7ff fd85 	bl	23fe524 <vsnprintf>

    if (n<bufsize)
 23fea1a:	2813      	cmp	r0, #19
 23fea1c:	d80e      	bhi.n	23fea3c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23fea1e:	4628      	mov	r0, r5
 23fea20:	1d39      	adds	r1, r7, #4
 23fea22:	f7ff ffa1 	bl	23fe968 <_ZN5Print5writeEPKc>
 23fea26:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23fea28:	b11e      	cbz	r6, 23fea32 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23fea2a:	4628      	mov	r0, r5
 23fea2c:	f7ff ffb5 	bl	23fe99a <_ZN5Print7printlnEv>
 23fea30:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23fea32:	4620      	mov	r0, r4
 23fea34:	3718      	adds	r7, #24
 23fea36:	46bd      	mov	sp, r7
 23fea38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23fea3c:	f100 0308 	add.w	r3, r0, #8
 23fea40:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23fea44:	46e8      	mov	r8, sp
        char bigger[n+1];
 23fea46:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23fea4a:	4622      	mov	r2, r4
 23fea4c:	1c41      	adds	r1, r0, #1
 23fea4e:	683b      	ldr	r3, [r7, #0]
 23fea50:	4668      	mov	r0, sp
 23fea52:	f7ff fd67 	bl	23fe524 <vsnprintf>
  return write(str);
 23fea56:	4669      	mov	r1, sp
 23fea58:	4628      	mov	r0, r5
 23fea5a:	f7ff ff85 	bl	23fe968 <_ZN5Print5writeEPKc>
 23fea5e:	4604      	mov	r4, r0
 23fea60:	46c5      	mov	sp, r8
 23fea62:	e7e1      	b.n	23fea28 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023fea64 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fea64:	b510      	push	{r4, lr}
 23fea66:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fea68:	f7ff f9c0 	bl	23fddec <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fea6c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fea6e:	6823      	ldr	r3, [r4, #0]
 23fea70:	4620      	mov	r0, r4
 23fea72:	695b      	ldr	r3, [r3, #20]
 23fea74:	4798      	blx	r3
    if (c >= 0) return c;
 23fea76:	2800      	cmp	r0, #0
 23fea78:	da08      	bge.n	23fea8c <_ZN6Stream9timedReadEv+0x28>
 23fea7a:	f7ff f9b7 	bl	23fddec <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fea7e:	68e3      	ldr	r3, [r4, #12]
 23fea80:	1ac0      	subs	r0, r0, r3
 23fea82:	68a3      	ldr	r3, [r4, #8]
 23fea84:	4298      	cmp	r0, r3
 23fea86:	d3f2      	bcc.n	23fea6e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fea88:	f04f 30ff 	mov.w	r0, #4294967295
}
 23fea8c:	bd10      	pop	{r4, pc}

023fea8e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fea8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fea92:	4607      	mov	r7, r0
 23fea94:	460c      	mov	r4, r1
 23fea96:	460d      	mov	r5, r1
 23fea98:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fea9a:	42b5      	cmp	r5, r6
 23fea9c:	eba5 0804 	sub.w	r8, r5, r4
 23feaa0:	d007      	beq.n	23feab2 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23feaa2:	4638      	mov	r0, r7
 23feaa4:	f7ff ffde 	bl	23fea64 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23feaa8:	1e03      	subs	r3, r0, #0
 23feaaa:	db02      	blt.n	23feab2 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23feaac:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23feab0:	e7f3      	b.n	23fea9a <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23feab2:	4640      	mov	r0, r8
 23feab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023feab8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23feab8:	4b01      	ldr	r3, [pc, #4]	; (23feac0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23feaba:	4a02      	ldr	r2, [pc, #8]	; (23feac4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23feabc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23feabe:	4770      	bx	lr
 23feac0:	1007aea8 	.word	0x1007aea8
 23feac4:	023ffddc 	.word	0x023ffddc

023feac8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23feac8:	4b02      	ldr	r3, [pc, #8]	; (23fead4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23feaca:	681a      	ldr	r2, [r3, #0]
 23feacc:	4b02      	ldr	r3, [pc, #8]	; (23fead8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23feace:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fead0:	4770      	bx	lr
 23fead2:	bf00      	nop
 23fead4:	1007a23c 	.word	0x1007a23c
 23fead8:	1007aeac 	.word	0x1007aeac

023feadc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23feadc:	2100      	movs	r1, #0
 23feade:	f7ff bbed 	b.w	23fe2bc <system_delay_ms>
	...

023feae4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23feae4:	2200      	movs	r2, #0
 23feae6:	4b01      	ldr	r3, [pc, #4]	; (23feaec <_GLOBAL__sub_I_RGB+0x8>)
 23feae8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23feaea:	4770      	bx	lr
 23feaec:	1007aeb0 	.word	0x1007aeb0

023feaf0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23feaf0:	4b01      	ldr	r3, [pc, #4]	; (23feaf8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23feaf2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23feaf4:	4770      	bx	lr
 23feaf6:	bf00      	nop
 23feaf8:	1007a240 	.word	0x1007a240

023feafc <serialEventRun>:
{
 23feafc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23feafe:	4b0f      	ldr	r3, [pc, #60]	; (23feb3c <serialEventRun+0x40>)
 23feb00:	b143      	cbz	r3, 23feb14 <serialEventRun+0x18>
 23feb02:	f000 f977 	bl	23fedf4 <_Z16_fetch_usbserialv>
 23feb06:	6803      	ldr	r3, [r0, #0]
 23feb08:	691b      	ldr	r3, [r3, #16]
 23feb0a:	4798      	blx	r3
 23feb0c:	2800      	cmp	r0, #0
 23feb0e:	dd01      	ble.n	23feb14 <serialEventRun+0x18>
        serialEvent();
 23feb10:	e000      	b.n	23feb14 <serialEventRun+0x18>
 23feb12:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23feb14:	4b0a      	ldr	r3, [pc, #40]	; (23feb40 <serialEventRun+0x44>)
 23feb16:	b143      	cbz	r3, 23feb2a <serialEventRun+0x2e>
 23feb18:	f000 fc1c 	bl	23ff354 <_Z22__fetch_global_Serial1v>
 23feb1c:	6803      	ldr	r3, [r0, #0]
 23feb1e:	691b      	ldr	r3, [r3, #16]
 23feb20:	4798      	blx	r3
 23feb22:	2800      	cmp	r0, #0
 23feb24:	dd01      	ble.n	23feb2a <serialEventRun+0x2e>
        serialEvent1();
 23feb26:	e000      	b.n	23feb2a <serialEventRun+0x2e>
 23feb28:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23feb2a:	4b06      	ldr	r3, [pc, #24]	; (23feb44 <serialEventRun+0x48>)
 23feb2c:	b10b      	cbz	r3, 23feb32 <serialEventRun+0x36>
 23feb2e:	f000 fc57 	bl	23ff3e0 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23feb32:	4b05      	ldr	r3, [pc, #20]	; (23feb48 <serialEventRun+0x4c>)
 23feb34:	b10b      	cbz	r3, 23feb3a <serialEventRun+0x3e>
 23feb36:	f000 fc89 	bl	23ff44c <_Z15serialEventRun3v>
}
 23feb3a:	bd08      	pop	{r3, pc}
	...

023feb4c <_post_loop>:
{
 23feb4c:	b508      	push	{r3, lr}
	serialEventRun();
 23feb4e:	f7ff ffd5 	bl	23feafc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23feb52:	f7ff f94b 	bl	23fddec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23feb56:	4b01      	ldr	r3, [pc, #4]	; (23feb5c <_post_loop+0x10>)
 23feb58:	6018      	str	r0, [r3, #0]
}
 23feb5a:	bd08      	pop	{r3, pc}
 23feb5c:	1007af4c 	.word	0x1007af4c

023feb60 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23feb60:	4805      	ldr	r0, [pc, #20]	; (23feb78 <_Z33system_initialize_user_backup_ramv+0x18>)
 23feb62:	4a06      	ldr	r2, [pc, #24]	; (23feb7c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23feb64:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23feb66:	1a12      	subs	r2, r2, r0
 23feb68:	4905      	ldr	r1, [pc, #20]	; (23feb80 <_Z33system_initialize_user_backup_ramv+0x20>)
 23feb6a:	f000 fccb 	bl	23ff504 <memcpy>
    __backup_sram_signature = signature;
 23feb6e:	4b05      	ldr	r3, [pc, #20]	; (23feb84 <_Z33system_initialize_user_backup_ramv+0x24>)
 23feb70:	4a05      	ldr	r2, [pc, #20]	; (23feb88 <_Z33system_initialize_user_backup_ramv+0x28>)
 23feb72:	601a      	str	r2, [r3, #0]
}
 23feb74:	bd08      	pop	{r3, pc}
 23feb76:	bf00      	nop
 23feb78:	1007b400 	.word	0x1007b400
 23feb7c:	1007b404 	.word	0x1007b404
 23feb80:	085ffec8 	.word	0x085ffec8
 23feb84:	1007b400 	.word	0x1007b400
 23feb88:	9a271c1e 	.word	0x9a271c1e

023feb8c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23feb8c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23feb8e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23feb90:	461a      	mov	r2, r3
 23feb92:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23feb96:	9300      	str	r3, [sp, #0]
 23feb98:	f7ff fbac 	bl	23fe2f4 <system_ctrl_set_result>
}
 23feb9c:	b003      	add	sp, #12
 23feb9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023feba4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23feba4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23feba6:	8843      	ldrh	r3, [r0, #2]
 23feba8:	2b0a      	cmp	r3, #10
 23febaa:	d008      	beq.n	23febbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23febac:	2b50      	cmp	r3, #80	; 0x50
 23febae:	d10b      	bne.n	23febc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23febb0:	4b09      	ldr	r3, [pc, #36]	; (23febd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23febb2:	681b      	ldr	r3, [r3, #0]
 23febb4:	b14b      	cbz	r3, 23febca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23febb6:	b003      	add	sp, #12
 23febb8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23febbc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23febbe:	f7ff ffe5 	bl	23feb8c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23febc2:	b003      	add	sp, #12
 23febc4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23febc8:	2300      	movs	r3, #0
 23febca:	461a      	mov	r2, r3
 23febcc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23febd0:	9300      	str	r3, [sp, #0]
 23febd2:	f7ff fb8f 	bl	23fe2f4 <system_ctrl_set_result>
}
 23febd6:	e7f4      	b.n	23febc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23febd8:	1007aec4 	.word	0x1007aec4

023febdc <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23febdc:	2100      	movs	r1, #0
{
 23febde:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23febe0:	4811      	ldr	r0, [pc, #68]	; (23fec28 <module_user_init_hook+0x4c>)
 23febe2:	f7ff fcbb 	bl	23fe55c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23febe6:	4b11      	ldr	r3, [pc, #68]	; (23fec2c <module_user_init_hook+0x50>)
 23febe8:	681a      	ldr	r2, [r3, #0]
 23febea:	4b11      	ldr	r3, [pc, #68]	; (23fec30 <module_user_init_hook+0x54>)
 23febec:	429a      	cmp	r2, r3
 23febee:	bf0c      	ite	eq
 23febf0:	2201      	moveq	r2, #1
 23febf2:	2200      	movne	r2, #0
 23febf4:	4b0f      	ldr	r3, [pc, #60]	; (23fec34 <module_user_init_hook+0x58>)
 23febf6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23febf8:	d001      	beq.n	23febfe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23febfa:	f7ff ffb1 	bl	23feb60 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23febfe:	f7ff f8d9 	bl	23fddb4 <HAL_RNG_GetRandomNumber>
 23fec02:	4604      	mov	r4, r0
    srand(seed);
 23fec04:	f000 fc94 	bl	23ff530 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fec08:	4b0b      	ldr	r3, [pc, #44]	; (23fec38 <module_user_init_hook+0x5c>)
 23fec0a:	b113      	cbz	r3, 23fec12 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fec0c:	4620      	mov	r0, r4
 23fec0e:	e000      	b.n	23fec12 <module_user_init_hook+0x36>
 23fec10:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fec12:	2100      	movs	r1, #0
 23fec14:	4808      	ldr	r0, [pc, #32]	; (23fec38 <module_user_init_hook+0x5c>)
 23fec16:	f7ff fc4d 	bl	23fe4b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fec1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fec1e:	2100      	movs	r1, #0
 23fec20:	4806      	ldr	r0, [pc, #24]	; (23fec3c <module_user_init_hook+0x60>)
 23fec22:	f7ff bb59 	b.w	23fe2d8 <system_ctrl_set_app_request_handler>
 23fec26:	bf00      	nop
 23fec28:	023feaf1 	.word	0x023feaf1
 23fec2c:	1007b400 	.word	0x1007b400
 23fec30:	9a271c1e 	.word	0x9a271c1e
 23fec34:	1007aec0 	.word	0x1007aec0
 23fec38:	00000000 	.word	0x00000000
 23fec3c:	023feba5 	.word	0x023feba5

023fec40 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fec40:	4770      	bx	lr

023fec42 <_ZN9IPAddressD0Ev>:
 23fec42:	b510      	push	{r4, lr}
 23fec44:	4604      	mov	r4, r0
 23fec46:	2118      	movs	r1, #24
 23fec48:	f7fd fe11 	bl	23fc86e <_ZdlPvj>
 23fec4c:	4620      	mov	r0, r4
 23fec4e:	bd10      	pop	{r4, pc}

023fec50 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fec50:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fec52:	7d03      	ldrb	r3, [r0, #20]
{
 23fec54:	460e      	mov	r6, r1
	if (address.v==6) {
 23fec56:	2b06      	cmp	r3, #6
 23fec58:	f04f 0400 	mov.w	r4, #0
{
 23fec5c:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fec5e:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fec62:	d012      	beq.n	23fec8a <_ZNK9IPAddress7printToER5Print+0x3a>
 23fec64:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fec68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fec6c:	220a      	movs	r2, #10
 23fec6e:	4630      	mov	r0, r6
 23fec70:	f7ff fea9 	bl	23fe9c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fec74:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fec76:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fec78:	d019      	beq.n	23fecae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fec7a:	2c00      	cmp	r4, #0
 23fec7c:	d0f4      	beq.n	23fec68 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fec7e:	212e      	movs	r1, #46	; 0x2e
 23fec80:	4630      	mov	r0, r6
 23fec82:	f7ff fe87 	bl	23fe994 <_ZN5Print5printEc>
 23fec86:	4404      	add	r4, r0
 23fec88:	e7ee      	b.n	23fec68 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fec8a:	232f      	movs	r3, #47	; 0x2f
 23fec8c:	466a      	mov	r2, sp
 23fec8e:	4639      	mov	r1, r7
 23fec90:	200a      	movs	r0, #10
		buf[0] = 0;
 23fec92:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fec96:	f7ff f8d3 	bl	23fde40 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fec9a:	4668      	mov	r0, sp
 23fec9c:	f7fd fdc0 	bl	23fc820 <strlen>
 23feca0:	6833      	ldr	r3, [r6, #0]
 23feca2:	4602      	mov	r2, r0
 23feca4:	4669      	mov	r1, sp
 23feca6:	4630      	mov	r0, r6
 23feca8:	68db      	ldr	r3, [r3, #12]
 23fecaa:	4798      	blx	r3
 23fecac:	4604      	mov	r4, r0
    }
    return n;
}
 23fecae:	4620      	mov	r0, r4
 23fecb0:	b00d      	add	sp, #52	; 0x34
 23fecb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fecb4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fecb4:	b510      	push	{r4, lr}
 23fecb6:	4604      	mov	r4, r0
 23fecb8:	4b04      	ldr	r3, [pc, #16]	; (23feccc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fecba:	2211      	movs	r2, #17
 23fecbc:	2100      	movs	r1, #0
 23fecbe:	f840 3b04 	str.w	r3, [r0], #4
 23fecc2:	f000 fc2c 	bl	23ff51e <memset>
}
 23fecc6:	4620      	mov	r0, r4
 23fecc8:	bd10      	pop	{r4, pc}
 23fecca:	bf00      	nop
 23feccc:	023ffe04 	.word	0x023ffe04

023fecd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fecd0:	4603      	mov	r3, r0
 23fecd2:	4a07      	ldr	r2, [pc, #28]	; (23fecf0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fecd4:	b510      	push	{r4, lr}
 23fecd6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fecda:	f101 0210 	add.w	r2, r1, #16
 23fecde:	f851 4b04 	ldr.w	r4, [r1], #4
 23fece2:	4291      	cmp	r1, r2
 23fece4:	f843 4b04 	str.w	r4, [r3], #4
 23fece8:	d1f9      	bne.n	23fecde <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fecea:	780a      	ldrb	r2, [r1, #0]
 23fecec:	701a      	strb	r2, [r3, #0]
}
 23fecee:	bd10      	pop	{r4, pc}
 23fecf0:	023ffe04 	.word	0x023ffe04

023fecf4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fecf4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fecf6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fecfa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fecfe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fed02:	2304      	movs	r3, #4
 23fed04:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fed08:	6041      	str	r1, [r0, #4]
 23fed0a:	7503      	strb	r3, [r0, #20]
}
 23fed0c:	bd10      	pop	{r4, pc}
	...

023fed10 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fed10:	b507      	push	{r0, r1, r2, lr}
 23fed12:	4b06      	ldr	r3, [pc, #24]	; (23fed2c <_ZN9IPAddressC1EPKh+0x1c>)
 23fed14:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fed16:	78cb      	ldrb	r3, [r1, #3]
 23fed18:	9300      	str	r3, [sp, #0]
 23fed1a:	788b      	ldrb	r3, [r1, #2]
 23fed1c:	784a      	ldrb	r2, [r1, #1]
 23fed1e:	7809      	ldrb	r1, [r1, #0]
 23fed20:	f7ff ffe8 	bl	23fecf4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fed24:	b003      	add	sp, #12
 23fed26:	f85d fb04 	ldr.w	pc, [sp], #4
 23fed2a:	bf00      	nop
 23fed2c:	023ffe04 	.word	0x023ffe04

023fed30 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fed30:	7441      	strb	r1, [r0, #17]
}
 23fed32:	4770      	bx	lr

023fed34 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fed34:	4770      	bx	lr

023fed36 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fed36:	4770      	bx	lr

023fed38 <_ZN9USBSerial4readEv>:
{
 23fed38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fed3a:	2100      	movs	r1, #0
 23fed3c:	7c00      	ldrb	r0, [r0, #16]
 23fed3e:	f7ff fa69 	bl	23fe214 <HAL_USB_USART_Receive_Data>
}
 23fed42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed46:	bd08      	pop	{r3, pc}

023fed48 <_ZN9USBSerial4peekEv>:
{
 23fed48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fed4a:	2101      	movs	r1, #1
 23fed4c:	7c00      	ldrb	r0, [r0, #16]
 23fed4e:	f7ff fa61 	bl	23fe214 <HAL_USB_USART_Receive_Data>
}
 23fed52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed56:	bd08      	pop	{r3, pc}

023fed58 <_ZN9USBSerial17availableForWriteEv>:
{
 23fed58:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fed5a:	7c00      	ldrb	r0, [r0, #16]
 23fed5c:	f7ff fa4c 	bl	23fe1f8 <HAL_USB_USART_Available_Data_For_Write>
}
 23fed60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed64:	bd08      	pop	{r3, pc}

023fed66 <_ZN9USBSerial9availableEv>:
{
 23fed66:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fed68:	7c00      	ldrb	r0, [r0, #16]
 23fed6a:	f7ff fa37 	bl	23fe1dc <HAL_USB_USART_Available_Data>
}
 23fed6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed72:	bd08      	pop	{r3, pc}

023fed74 <_ZN9USBSerial5writeEh>:
{
 23fed74:	b513      	push	{r0, r1, r4, lr}
 23fed76:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fed78:	7c00      	ldrb	r0, [r0, #16]
{
 23fed7a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fed7c:	f7ff fa3c 	bl	23fe1f8 <HAL_USB_USART_Available_Data_For_Write>
 23fed80:	2800      	cmp	r0, #0
 23fed82:	9901      	ldr	r1, [sp, #4]
 23fed84:	dc01      	bgt.n	23fed8a <_ZN9USBSerial5writeEh+0x16>
 23fed86:	7c60      	ldrb	r0, [r4, #17]
 23fed88:	b120      	cbz	r0, 23fed94 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fed8a:	7c20      	ldrb	r0, [r4, #16]
 23fed8c:	f7ff fa50 	bl	23fe230 <HAL_USB_USART_Send_Data>
 23fed90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fed94:	b002      	add	sp, #8
 23fed96:	bd10      	pop	{r4, pc}

023fed98 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fed98:	7c00      	ldrb	r0, [r0, #16]
 23fed9a:	f7ff ba57 	b.w	23fe24c <HAL_USB_USART_Flush_Data>

023fed9e <_ZN9USBSerialD0Ev>:
 23fed9e:	b510      	push	{r4, lr}
 23feda0:	4604      	mov	r4, r0
 23feda2:	2114      	movs	r1, #20
 23feda4:	f7fd fd63 	bl	23fc86e <_ZdlPvj>
 23feda8:	4620      	mov	r0, r4
 23fedaa:	bd10      	pop	{r4, pc}

023fedac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fedac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fedae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fedb2:	4604      	mov	r4, r0
 23fedb4:	4608      	mov	r0, r1
 23fedb6:	2100      	movs	r1, #0
 23fedb8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fedbc:	4b04      	ldr	r3, [pc, #16]	; (23fedd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fedbe:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fedc0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fedc2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fedc4:	4611      	mov	r1, r2
  _blocking = true;
 23fedc6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fedc8:	f7ff f9ec 	bl	23fe1a4 <HAL_USB_USART_Init>
}
 23fedcc:	4620      	mov	r0, r4
 23fedce:	bd10      	pop	{r4, pc}
 23fedd0:	023ffe18 	.word	0x023ffe18

023fedd4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fedd4:	2200      	movs	r2, #0
 23fedd6:	7c00      	ldrb	r0, [r0, #16]
 23fedd8:	f7ff b9f2 	b.w	23fe1c0 <HAL_USB_USART_Begin>

023feddc <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23feddc:	7c00      	ldrb	r0, [r0, #16]
 23fedde:	f7ff ba43 	b.w	23fe268 <HAL_USB_USART_Is_Connected>

023fede2 <_Z19acquireSerialBufferv>:
{
 23fede2:	b510      	push	{r4, lr}
 23fede4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fede6:	2214      	movs	r2, #20
 23fede8:	2100      	movs	r1, #0
 23fedea:	f000 fb98 	bl	23ff51e <memset>
}
 23fedee:	4620      	mov	r0, r4
 23fedf0:	bd10      	pop	{r4, pc}
	...

023fedf4 <_Z16_fetch_usbserialv>:
{
 23fedf4:	b510      	push	{r4, lr}
 23fedf6:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fedf8:	a803      	add	r0, sp, #12
 23fedfa:	f7ff fff2 	bl	23fede2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fedfe:	4c0c      	ldr	r4, [pc, #48]	; (23fee30 <_Z16_fetch_usbserialv+0x3c>)
 23fee00:	e8d4 1f8f 	ldab	r1, [r4]
 23fee04:	f011 0101 	ands.w	r1, r1, #1
 23fee08:	d10f      	bne.n	23fee2a <_Z16_fetch_usbserialv+0x36>
 23fee0a:	4620      	mov	r0, r4
 23fee0c:	9101      	str	r1, [sp, #4]
 23fee0e:	f7fd fd3d 	bl	23fc88c <__cxa_guard_acquire>
 23fee12:	9901      	ldr	r1, [sp, #4]
 23fee14:	b148      	cbz	r0, 23fee2a <_Z16_fetch_usbserialv+0x36>
 23fee16:	aa03      	add	r2, sp, #12
 23fee18:	4806      	ldr	r0, [pc, #24]	; (23fee34 <_Z16_fetch_usbserialv+0x40>)
 23fee1a:	f7ff ffc7 	bl	23fedac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fee1e:	4620      	mov	r0, r4
 23fee20:	f7fd fd39 	bl	23fc896 <__cxa_guard_release>
 23fee24:	4804      	ldr	r0, [pc, #16]	; (23fee38 <_Z16_fetch_usbserialv+0x44>)
 23fee26:	f000 fb67 	bl	23ff4f8 <atexit>
	return _usbserial;
}
 23fee2a:	4802      	ldr	r0, [pc, #8]	; (23fee34 <_Z16_fetch_usbserialv+0x40>)
 23fee2c:	b008      	add	sp, #32
 23fee2e:	bd10      	pop	{r4, pc}
 23fee30:	1007aec8 	.word	0x1007aec8
 23fee34:	1007aecc 	.word	0x1007aecc
 23fee38:	023fed35 	.word	0x023fed35

023fee3c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fee3c:	4770      	bx	lr

023fee3e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fee3e:	7441      	strb	r1, [r0, #17]
}
 23fee40:	4770      	bx	lr

023fee42 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fee42:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fee44:	7c00      	ldrb	r0, [r0, #16]
 23fee46:	f7ff f85d 	bl	23fdf04 <hal_usart_available_data_for_write>
}
 23fee4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fee4e:	bd08      	pop	{r3, pc}

023fee50 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fee50:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fee52:	7c00      	ldrb	r0, [r0, #16]
 23fee54:	f7ff f810 	bl	23fde78 <hal_usart_available>
}
 23fee58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fee5c:	bd08      	pop	{r3, pc}

023fee5e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fee5e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fee60:	7c00      	ldrb	r0, [r0, #16]
 23fee62:	f7ff f825 	bl	23fdeb0 <hal_usart_peek>
}
 23fee66:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fee6a:	bd08      	pop	{r3, pc}

023fee6c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fee6c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fee6e:	7c00      	ldrb	r0, [r0, #16]
 23fee70:	f7ff f810 	bl	23fde94 <hal_usart_read>
}
 23fee74:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fee78:	bd08      	pop	{r3, pc}

023fee7a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fee7a:	7c00      	ldrb	r0, [r0, #16]
 23fee7c:	f7ff b826 	b.w	23fdecc <hal_usart_flush>

023fee80 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fee80:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee82:	7c45      	ldrb	r5, [r0, #17]
{
 23fee84:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee86:	b12d      	cbz	r5, 23fee94 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fee88:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fee8a:	b003      	add	sp, #12
 23fee8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fee90:	f7fe bfe4 	b.w	23fde5c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee94:	7c00      	ldrb	r0, [r0, #16]
 23fee96:	9101      	str	r1, [sp, #4]
 23fee98:	f7ff f834 	bl	23fdf04 <hal_usart_available_data_for_write>
 23fee9c:	2800      	cmp	r0, #0
 23fee9e:	9901      	ldr	r1, [sp, #4]
 23feea0:	dcf2      	bgt.n	23fee88 <_ZN11USARTSerial5writeEh+0x8>
}
 23feea2:	4628      	mov	r0, r5
 23feea4:	b003      	add	sp, #12
 23feea6:	bd30      	pop	{r4, r5, pc}

023feea8 <_ZN11USARTSerialD0Ev>:
 23feea8:	b510      	push	{r4, lr}
 23feeaa:	4604      	mov	r4, r0
 23feeac:	2114      	movs	r1, #20
 23feeae:	f7fd fcde 	bl	23fc86e <_ZdlPvj>
 23feeb2:	4620      	mov	r0, r4
 23feeb4:	bd10      	pop	{r4, pc}
	...

023feeb8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feeb8:	b510      	push	{r4, lr}
 23feeba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23feebe:	4604      	mov	r4, r0
 23feec0:	4608      	mov	r0, r1
 23feec2:	4611      	mov	r1, r2
 23feec4:	2200      	movs	r2, #0
 23feec6:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23feeca:	4b04      	ldr	r3, [pc, #16]	; (23feedc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23feecc:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feece:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23feed0:	2301      	movs	r3, #1
 23feed2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23feed4:	f7ff f832 	bl	23fdf3c <hal_usart_init_ex>
}
 23feed8:	4620      	mov	r0, r4
 23feeda:	bd10      	pop	{r4, pc}
 23feedc:	023ffe4c 	.word	0x023ffe4c

023feee0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23feee0:	2300      	movs	r3, #0
 23feee2:	7c00      	ldrb	r0, [r0, #16]
 23feee4:	f7ff b81c 	b.w	23fdf20 <hal_usart_begin_config>

023feee8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23feee8:	2200      	movs	r2, #0
 23feeea:	f7ff bff9 	b.w	23feee0 <_ZN11USARTSerial5beginEmm>

023feeee <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23feeee:	7c00      	ldrb	r0, [r0, #16]
 23feef0:	f7fe bffa 	b.w	23fdee8 <hal_usart_is_enabled>

023feef4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23feef4:	4770      	bx	lr

023feef6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23feef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23feef8:	4606      	mov	r6, r0
 23feefa:	4615      	mov	r5, r2
 23feefc:	460c      	mov	r4, r1
 23feefe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fef00:	42bc      	cmp	r4, r7
 23fef02:	d006      	beq.n	23fef12 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fef04:	6833      	ldr	r3, [r6, #0]
 23fef06:	4630      	mov	r0, r6
 23fef08:	689b      	ldr	r3, [r3, #8]
 23fef0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fef0e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fef10:	e7f6      	b.n	23fef00 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fef12:	4628      	mov	r0, r5
 23fef14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fef16 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fef16:	2200      	movs	r2, #0
 23fef18:	7c00      	ldrb	r0, [r0, #16]
 23fef1a:	f7ff b847 	b.w	23fdfac <hal_i2c_write>

023fef1e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fef1e:	2100      	movs	r1, #0
 23fef20:	7c00      	ldrb	r0, [r0, #16]
 23fef22:	f7ff b851 	b.w	23fdfc8 <hal_i2c_available>

023fef26 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fef26:	2100      	movs	r1, #0
 23fef28:	7c00      	ldrb	r0, [r0, #16]
 23fef2a:	f7ff b85b 	b.w	23fdfe4 <hal_i2c_read>

023fef2e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fef2e:	2100      	movs	r1, #0
 23fef30:	7c00      	ldrb	r0, [r0, #16]
 23fef32:	f7ff b865 	b.w	23fe000 <hal_i2c_peek>

023fef36 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fef36:	2100      	movs	r1, #0
 23fef38:	7c00      	ldrb	r0, [r0, #16]
 23fef3a:	f7ff b86f 	b.w	23fe01c <hal_i2c_flush>

023fef3e <_ZN7TwoWireD0Ev>:
 23fef3e:	b510      	push	{r4, lr}
 23fef40:	4604      	mov	r4, r0
 23fef42:	2114      	movs	r1, #20
 23fef44:	f7fd fc93 	bl	23fc86e <_ZdlPvj>
 23fef48:	4620      	mov	r0, r4
 23fef4a:	bd10      	pop	{r4, pc}

023fef4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fef4c:	b538      	push	{r3, r4, r5, lr}
 23fef4e:	4604      	mov	r4, r0
 23fef50:	4615      	mov	r5, r2
 23fef52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fef56:	2200      	movs	r2, #0
 23fef58:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fef5c:	4b09      	ldr	r3, [pc, #36]	; (23fef84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fef5e:	4608      	mov	r0, r1
  _i2c = i2c;
 23fef60:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fef62:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fef64:	4629      	mov	r1, r5
 23fef66:	f7ff f875 	bl	23fe054 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fef6a:	30bf      	adds	r0, #191	; 0xbf
 23fef6c:	d108      	bne.n	23fef80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fef6e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fef70:	07db      	lsls	r3, r3, #31
 23fef72:	d505      	bpl.n	23fef80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fef74:	6868      	ldr	r0, [r5, #4]
 23fef76:	f7ff fab9 	bl	23fe4ec <free>
    free(conf.tx_buffer);
 23fef7a:	68e8      	ldr	r0, [r5, #12]
 23fef7c:	f7ff fab6 	bl	23fe4ec <free>
}
 23fef80:	4620      	mov	r0, r4
 23fef82:	bd38      	pop	{r3, r4, r5, pc}
 23fef84:	023ffe80 	.word	0x023ffe80

023fef88 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fef88:	2300      	movs	r3, #0
 23fef8a:	7c00      	ldrb	r0, [r0, #16]
 23fef8c:	461a      	mov	r2, r3
 23fef8e:	4619      	mov	r1, r3
 23fef90:	f7fe bfe2 	b.w	23fdf58 <hal_i2c_begin>

023fef94 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fef94:	2200      	movs	r2, #0
 23fef96:	7c00      	ldrb	r0, [r0, #16]
 23fef98:	f7fe bfec 	b.w	23fdf74 <hal_i2c_begin_transmission>

023fef9c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23fef9c:	b2c9      	uxtb	r1, r1
 23fef9e:	f7ff bff9 	b.w	23fef94 <_ZN7TwoWire17beginTransmissionEh>

023fefa2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fefa2:	2200      	movs	r2, #0
 23fefa4:	7c00      	ldrb	r0, [r0, #16]
 23fefa6:	f7fe bff3 	b.w	23fdf90 <hal_i2c_end_transmission>

023fefaa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fefaa:	2101      	movs	r1, #1
 23fefac:	f7ff bff9 	b.w	23fefa2 <_ZN7TwoWire15endTransmissionEh>

023fefb0 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23fefb0:	21ff      	movs	r1, #255	; 0xff
 23fefb2:	2200      	movs	r2, #0
      : address_{address},
 23fefb4:	4b04      	ldr	r3, [pc, #16]	; (23fefc8 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23fefb6:	2001      	movs	r0, #1
 23fefb8:	e9c3 1200 	strd	r1, r2, [r3]
 23fefbc:	2164      	movs	r1, #100	; 0x64
 23fefbe:	611a      	str	r2, [r3, #16]
 23fefc0:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23fefc4:	4770      	bx	lr
 23fefc6:	bf00      	nop
 23fefc8:	1007aee0 	.word	0x1007aee0

023fefcc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fefcc:	2200      	movs	r2, #0
 23fefce:	6840      	ldr	r0, [r0, #4]
 23fefd0:	4611      	mov	r1, r2
 23fefd2:	f7ff b9c7 	b.w	23fe364 <network_ready>

023fefd6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fefd6:	2200      	movs	r2, #0
 23fefd8:	6840      	ldr	r0, [r0, #4]
 23fefda:	4611      	mov	r1, r2
 23fefdc:	f7ff b9fa 	b.w	23fe3d4 <network_listening>

023fefe0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fefe0:	2200      	movs	r2, #0
 23fefe2:	6840      	ldr	r0, [r0, #4]
 23fefe4:	4611      	mov	r1, r2
 23fefe6:	f7ff ba11 	b.w	23fe40c <network_get_listen_timeout>

023fefea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fefea:	2200      	movs	r2, #0
 23fefec:	6840      	ldr	r0, [r0, #4]
 23fefee:	f7ff b9ff 	b.w	23fe3f0 <network_set_listen_timeout>

023feff2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23feff2:	2200      	movs	r2, #0
 23feff4:	6840      	ldr	r0, [r0, #4]
 23feff6:	f081 0101 	eor.w	r1, r1, #1
 23feffa:	f7ff b9dd 	b.w	23fe3b8 <network_listen>

023feffe <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23feffe:	2300      	movs	r3, #0
 23ff000:	6840      	ldr	r0, [r0, #4]
 23ff002:	461a      	mov	r2, r3
 23ff004:	4619      	mov	r1, r3
 23ff006:	f7ff b9c9 	b.w	23fe39c <network_off>

023ff00a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff00a:	2300      	movs	r3, #0
 23ff00c:	6840      	ldr	r0, [r0, #4]
 23ff00e:	461a      	mov	r2, r3
 23ff010:	4619      	mov	r1, r3
 23ff012:	f7ff b9b5 	b.w	23fe380 <network_on>

023ff016 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff016:	2200      	movs	r2, #0
 23ff018:	6840      	ldr	r0, [r0, #4]
 23ff01a:	4611      	mov	r1, r2
 23ff01c:	f7ff b986 	b.w	23fe32c <network_connecting>

023ff020 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff020:	2200      	movs	r2, #0
 23ff022:	2102      	movs	r1, #2
 23ff024:	6840      	ldr	r0, [r0, #4]
 23ff026:	f7ff b98f 	b.w	23fe348 <network_disconnect>

023ff02a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff02a:	2300      	movs	r3, #0
 23ff02c:	6840      	ldr	r0, [r0, #4]
 23ff02e:	461a      	mov	r2, r3
 23ff030:	f7ff b96e 	b.w	23fe310 <network_connect>

023ff034 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff034:	2204      	movs	r2, #4
 23ff036:	4b02      	ldr	r3, [pc, #8]	; (23ff040 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff038:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff03a:	4a02      	ldr	r2, [pc, #8]	; (23ff044 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff03c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff03e:	4770      	bx	lr
 23ff040:	1007aef4 	.word	0x1007aef4
 23ff044:	023ffeac 	.word	0x023ffeac

023ff048 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff048:	2300      	movs	r3, #0
 23ff04a:	6840      	ldr	r0, [r0, #4]
 23ff04c:	461a      	mov	r2, r3
 23ff04e:	f7ff b95f 	b.w	23fe310 <network_connect>

023ff052 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff052:	2200      	movs	r2, #0
 23ff054:	2102      	movs	r1, #2
 23ff056:	6840      	ldr	r0, [r0, #4]
 23ff058:	f7ff b976 	b.w	23fe348 <network_disconnect>

023ff05c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff05c:	2200      	movs	r2, #0
 23ff05e:	6840      	ldr	r0, [r0, #4]
 23ff060:	4611      	mov	r1, r2
 23ff062:	f7ff b963 	b.w	23fe32c <network_connecting>

023ff066 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff066:	2200      	movs	r2, #0
 23ff068:	6840      	ldr	r0, [r0, #4]
 23ff06a:	4611      	mov	r1, r2
 23ff06c:	f7ff b97a 	b.w	23fe364 <network_ready>

023ff070 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff070:	2300      	movs	r3, #0
 23ff072:	6840      	ldr	r0, [r0, #4]
 23ff074:	461a      	mov	r2, r3
 23ff076:	4619      	mov	r1, r3
 23ff078:	f7ff b982 	b.w	23fe380 <network_on>

023ff07c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff07c:	2300      	movs	r3, #0
 23ff07e:	6840      	ldr	r0, [r0, #4]
 23ff080:	461a      	mov	r2, r3
 23ff082:	4619      	mov	r1, r3
 23ff084:	f7ff b98a 	b.w	23fe39c <network_off>

023ff088 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff088:	2100      	movs	r1, #0
 23ff08a:	6840      	ldr	r0, [r0, #4]
 23ff08c:	f7ff b9cc 	b.w	23fe428 <network_is_on>

023ff090 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff090:	2100      	movs	r1, #0
 23ff092:	6840      	ldr	r0, [r0, #4]
 23ff094:	f7ff b9d6 	b.w	23fe444 <network_is_off>

023ff098 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff098:	2200      	movs	r2, #0
 23ff09a:	6840      	ldr	r0, [r0, #4]
 23ff09c:	f081 0101 	eor.w	r1, r1, #1
 23ff0a0:	f7ff b98a 	b.w	23fe3b8 <network_listen>

023ff0a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff0a4:	2200      	movs	r2, #0
 23ff0a6:	6840      	ldr	r0, [r0, #4]
 23ff0a8:	f7ff b9a2 	b.w	23fe3f0 <network_set_listen_timeout>

023ff0ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff0ac:	2200      	movs	r2, #0
 23ff0ae:	6840      	ldr	r0, [r0, #4]
 23ff0b0:	4611      	mov	r1, r2
 23ff0b2:	f7ff b9ab 	b.w	23fe40c <network_get_listen_timeout>

023ff0b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff0b6:	2200      	movs	r2, #0
 23ff0b8:	6840      	ldr	r0, [r0, #4]
 23ff0ba:	4611      	mov	r1, r2
 23ff0bc:	f7ff b98a 	b.w	23fe3d4 <network_listening>

023ff0c0 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23ff0c0:	2100      	movs	r1, #0
 23ff0c2:	6840      	ldr	r0, [r0, #4]
 23ff0c4:	f7ff b9da 	b.w	23fe47c <network_is_preferred>

023ff0c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff0c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff0cc:	b095      	sub	sp, #84	; 0x54
 23ff0ce:	4614      	mov	r4, r2
 23ff0d0:	460d      	mov	r5, r1
 23ff0d2:	4607      	mov	r7, r0
    IPAddress addr;
 23ff0d4:	f7ff fdee 	bl	23fecb4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff0d8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff0da:	221c      	movs	r2, #28
 23ff0dc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff0de:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff0e0:	f000 fa1d 	bl	23ff51e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff0e4:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff0e6:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff0e8:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff0ea:	2100      	movs	r1, #0
 23ff0ec:	466b      	mov	r3, sp
 23ff0ee:	aa0c      	add	r2, sp, #48	; 0x30
 23ff0f0:	f7fe fe28 	bl	23fdd44 <netdb_getaddrinfo>
    if (!r) {
 23ff0f4:	4604      	mov	r4, r0
 23ff0f6:	2800      	cmp	r0, #0
 23ff0f8:	d14b      	bne.n	23ff192 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff0fa:	4602      	mov	r2, r0
 23ff0fc:	2101      	movs	r1, #1
 23ff0fe:	6868      	ldr	r0, [r5, #4]
 23ff100:	f7ff f930 	bl	23fe364 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff104:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff106:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff108:	4622      	mov	r2, r4
 23ff10a:	6868      	ldr	r0, [r5, #4]
 23ff10c:	f7ff f92a 	bl	23fe364 <network_ready>
        bool ok = false;
 23ff110:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff112:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff114:	9e00      	ldr	r6, [sp, #0]
 23ff116:	2e00      	cmp	r6, #0
 23ff118:	d03b      	beq.n	23ff192 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff11a:	2900      	cmp	r1, #0
 23ff11c:	d139      	bne.n	23ff192 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff11e:	6873      	ldr	r3, [r6, #4]
 23ff120:	2b02      	cmp	r3, #2
 23ff122:	d003      	beq.n	23ff12c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff124:	2b0a      	cmp	r3, #10
 23ff126:	d011      	beq.n	23ff14c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff128:	69f6      	ldr	r6, [r6, #28]
 23ff12a:	e7f4      	b.n	23ff116 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff12c:	f1b8 0f00 	cmp.w	r8, #0
 23ff130:	d0fa      	beq.n	23ff128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff132:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff134:	a806      	add	r0, sp, #24
 23ff136:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff138:	1d3c      	adds	r4, r7, #4
 23ff13a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff13c:	f7ff fde8 	bl	23fed10 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff144:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff146:	4641      	mov	r1, r8
 23ff148:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff14a:	e7ed      	b.n	23ff128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff14c:	f1b9 0f00 	cmp.w	r9, #0
 23ff150:	d0ea      	beq.n	23ff128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff152:	2210      	movs	r2, #16
 23ff154:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff156:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff158:	f000 f9e1 	bl	23ff51e <memset>
                    a.v = 6;
 23ff15c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff15e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff160:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff164:	f104 0308 	add.w	r3, r4, #8
 23ff168:	3418      	adds	r4, #24
 23ff16a:	462a      	mov	r2, r5
 23ff16c:	6818      	ldr	r0, [r3, #0]
 23ff16e:	6859      	ldr	r1, [r3, #4]
 23ff170:	3308      	adds	r3, #8
 23ff172:	c203      	stmia	r2!, {r0, r1}
 23ff174:	42a3      	cmp	r3, r4
 23ff176:	4615      	mov	r5, r2
 23ff178:	d1f7      	bne.n	23ff16a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff17a:	a901      	add	r1, sp, #4
 23ff17c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff17e:	1d3c      	adds	r4, r7, #4
 23ff180:	ad07      	add	r5, sp, #28
 23ff182:	f7ff fda5 	bl	23fecd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff18a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff18c:	4649      	mov	r1, r9
 23ff18e:	7023      	strb	r3, [r4, #0]
                    break;
 23ff190:	e7ca      	b.n	23ff128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff192:	9800      	ldr	r0, [sp, #0]
 23ff194:	f7fe fdc8 	bl	23fdd28 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff198:	4638      	mov	r0, r7
 23ff19a:	b015      	add	sp, #84	; 0x54
 23ff19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff1a0 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23ff1a0:	3803      	subs	r0, #3
 23ff1a2:	2802      	cmp	r0, #2
 23ff1a4:	bf9a      	itte	ls
 23ff1a6:	4b02      	ldrls	r3, [pc, #8]	; (23ff1b0 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23ff1a8:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23ff1ac:	4801      	ldrhi	r0, [pc, #4]	; (23ff1b4 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23ff1ae:	4770      	bx	lr
 23ff1b0:	023ffee8 	.word	0x023ffee8
 23ff1b4:	1007aefc 	.word	0x1007aefc

023ff1b8 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23ff1b8:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23ff1ba:	2200      	movs	r2, #0
 23ff1bc:	6840      	ldr	r0, [r0, #4]
 23ff1be:	f7ff f94f 	bl	23fe460 <network_prefer>
}
 23ff1c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23ff1c6:	f7ff bfeb 	b.w	23ff1a0 <_ZN5spark12NetworkClass4fromEm>
	...

023ff1cc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff1cc:	4b02      	ldr	r3, [pc, #8]	; (23ff1d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff1ce:	4a03      	ldr	r2, [pc, #12]	; (23ff1dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff1d0:	601a      	str	r2, [r3, #0]
 23ff1d2:	2200      	movs	r2, #0
 23ff1d4:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff1d6:	4770      	bx	lr
 23ff1d8:	1007aefc 	.word	0x1007aefc
 23ff1dc:	023ffefc 	.word	0x023ffefc

023ff1e0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff1e0:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff1e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff1e4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff1e6:	d902      	bls.n	23ff1ee <pinAvailable+0xe>
    return false;
 23ff1e8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff1ea:	b003      	add	sp, #12
 23ff1ec:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff1ee:	f1a0 030f 	sub.w	r3, r0, #15
 23ff1f2:	2b02      	cmp	r3, #2
 23ff1f4:	d90b      	bls.n	23ff20e <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff1f6:	2801      	cmp	r0, #1
 23ff1f8:	d821      	bhi.n	23ff23e <pinAvailable+0x5e>
 23ff1fa:	f000 f957 	bl	23ff4ac <_Z19__fetch_global_Wirev>
 23ff1fe:	2100      	movs	r1, #0
 23ff200:	7c00      	ldrb	r0, [r0, #16]
 23ff202:	f7fe ff19 	bl	23fe038 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff206:	f080 0001 	eor.w	r0, r0, #1
 23ff20a:	b2c0      	uxtb	r0, r0
 23ff20c:	e7ed      	b.n	23ff1ea <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff20e:	4d11      	ldr	r5, [pc, #68]	; (23ff254 <pinAvailable+0x74>)
 23ff210:	e8d5 1f8f 	ldab	r1, [r5]
 23ff214:	f011 0101 	ands.w	r1, r1, #1
 23ff218:	d10b      	bne.n	23ff232 <pinAvailable+0x52>
 23ff21a:	4628      	mov	r0, r5
 23ff21c:	9101      	str	r1, [sp, #4]
 23ff21e:	f7fd fb35 	bl	23fc88c <__cxa_guard_acquire>
 23ff222:	9901      	ldr	r1, [sp, #4]
 23ff224:	b128      	cbz	r0, 23ff232 <pinAvailable+0x52>
 23ff226:	480c      	ldr	r0, [pc, #48]	; (23ff258 <pinAvailable+0x78>)
 23ff228:	f7ff f9ea 	bl	23fe600 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff22c:	4628      	mov	r0, r5
 23ff22e:	f7fd fb32 	bl	23fc896 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff232:	4b09      	ldr	r3, [pc, #36]	; (23ff258 <pinAvailable+0x78>)
 23ff234:	7818      	ldrb	r0, [r3, #0]
 23ff236:	f7fe ff6f 	bl	23fe118 <hal_spi_is_enabled>
 23ff23a:	2800      	cmp	r0, #0
 23ff23c:	d1d4      	bne.n	23ff1e8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff23e:	3c08      	subs	r4, #8
 23ff240:	2c01      	cmp	r4, #1
 23ff242:	d805      	bhi.n	23ff250 <pinAvailable+0x70>
 23ff244:	f000 f886 	bl	23ff354 <_Z22__fetch_global_Serial1v>
 23ff248:	7c00      	ldrb	r0, [r0, #16]
 23ff24a:	f7fe fe4d 	bl	23fdee8 <hal_usart_is_enabled>
 23ff24e:	e7da      	b.n	23ff206 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff250:	2001      	movs	r0, #1
 23ff252:	e7ca      	b.n	23ff1ea <pinAvailable+0xa>
 23ff254:	1007ae80 	.word	0x1007ae80
 23ff258:	1007ae84 	.word	0x1007ae84

023ff25c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff25c:	281b      	cmp	r0, #27
{
 23ff25e:	b538      	push	{r3, r4, r5, lr}
 23ff260:	4604      	mov	r4, r0
 23ff262:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff264:	d80a      	bhi.n	23ff27c <pinMode+0x20>
 23ff266:	29ff      	cmp	r1, #255	; 0xff
 23ff268:	d008      	beq.n	23ff27c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff26a:	f7ff ffb9 	bl	23ff1e0 <pinAvailable>
 23ff26e:	b128      	cbz	r0, 23ff27c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff270:	4629      	mov	r1, r5
 23ff272:	4620      	mov	r0, r4
}
 23ff274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff278:	f7fe bd72 	b.w	23fdd60 <hal_gpio_mode>
}
 23ff27c:	bd38      	pop	{r3, r4, r5, pc}

023ff27e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff27e:	b538      	push	{r3, r4, r5, lr}
 23ff280:	4604      	mov	r4, r0
 23ff282:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff284:	f7fe fd7a 	bl	23fdd7c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff288:	28ff      	cmp	r0, #255	; 0xff
 23ff28a:	d010      	beq.n	23ff2ae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff28c:	2806      	cmp	r0, #6
 23ff28e:	d804      	bhi.n	23ff29a <digitalWrite+0x1c>
 23ff290:	234d      	movs	r3, #77	; 0x4d
 23ff292:	fa23 f000 	lsr.w	r0, r3, r0
 23ff296:	07c3      	lsls	r3, r0, #31
 23ff298:	d409      	bmi.n	23ff2ae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff29a:	4620      	mov	r0, r4
 23ff29c:	f7ff ffa0 	bl	23ff1e0 <pinAvailable>
 23ff2a0:	b128      	cbz	r0, 23ff2ae <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff2a2:	4629      	mov	r1, r5
 23ff2a4:	4620      	mov	r0, r4
}
 23ff2a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff2aa:	f7fe bd75 	b.w	23fdd98 <hal_gpio_write>
}
 23ff2ae:	bd38      	pop	{r3, r4, r5, pc}

023ff2b0 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 23ff2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff2b4:	4690      	mov	r8, r2
 23ff2b6:	461f      	mov	r7, r3
 23ff2b8:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
 23ff2ba:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 23ff2bc:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
 23ff2be:	f1c4 0107 	rsb	r1, r4, #7
 23ff2c2:	f1b8 0f00 	cmp.w	r8, #0
 23ff2c6:	d112      	bne.n	23ff2ee <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 23ff2c8:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 23ff2cc:	4630      	mov	r0, r6
 23ff2ce:	f001 0101 	and.w	r1, r1, #1
 23ff2d2:	f7ff ffd4 	bl	23ff27e <digitalWrite>
    digitalWrite(clockPin, HIGH);
 23ff2d6:	2101      	movs	r1, #1
 23ff2d8:	4628      	mov	r0, r5
 23ff2da:	f7ff ffd0 	bl	23ff27e <digitalWrite>
    digitalWrite(clockPin, LOW);
 23ff2de:	2100      	movs	r1, #0
 23ff2e0:	4628      	mov	r0, r5
 23ff2e2:	f7ff ffcc 	bl	23ff27e <digitalWrite>
  for (i = 0; i < 8; i++)  {
 23ff2e6:	3c01      	subs	r4, #1
 23ff2e8:	d2e9      	bcs.n	23ff2be <shiftOut+0xe>
  }
}
 23ff2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 23ff2ee:	fa47 f104 	asr.w	r1, r7, r4
 23ff2f2:	e7eb      	b.n	23ff2cc <shiftOut+0x1c>

023ff2f4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff2f4:	4770      	bx	lr
	...

023ff2f8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff2f8:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff2fa:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff2fc:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff2fe:	462a      	mov	r2, r5
 23ff300:	2100      	movs	r1, #0
 23ff302:	f000 f90c 	bl	23ff51e <memset>
 23ff306:	8025      	strh	r5, [r4, #0]
 23ff308:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff30a:	4907      	ldr	r1, [pc, #28]	; (23ff328 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff30c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff30e:	8125      	strh	r5, [r4, #8]
 23ff310:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff312:	f000 f8ef 	bl	23ff4f4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff316:	4904      	ldr	r1, [pc, #16]	; (23ff328 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff318:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff31a:	4628      	mov	r0, r5
 23ff31c:	f000 f8ea 	bl	23ff4f4 <_ZnajRKSt9nothrow_t>
    };
 23ff320:	60e0      	str	r0, [r4, #12]
}
 23ff322:	4620      	mov	r0, r4
 23ff324:	bd38      	pop	{r3, r4, r5, pc}
 23ff326:	bf00      	nop
 23ff328:	023fff38 	.word	0x023fff38

023ff32c <__tcf_2>:
 23ff32c:	4770      	bx	lr

023ff32e <__tcf_1>:
 23ff32e:	4770      	bx	lr

023ff330 <_Z20acquireSerial1Bufferv>:
{
 23ff330:	b510      	push	{r4, lr}
 23ff332:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff334:	f7ff ffe0 	bl	23ff2f8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff338:	4620      	mov	r0, r4
 23ff33a:	bd10      	pop	{r4, pc}

023ff33c <_Z20acquireSerial2Bufferv>:
 23ff33c:	b510      	push	{r4, lr}
 23ff33e:	4604      	mov	r4, r0
 23ff340:	f7ff ffda 	bl	23ff2f8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff344:	4620      	mov	r0, r4
 23ff346:	bd10      	pop	{r4, pc}

023ff348 <_Z20acquireSerial3Bufferv>:
 23ff348:	b510      	push	{r4, lr}
 23ff34a:	4604      	mov	r4, r0
 23ff34c:	f7ff ffd4 	bl	23ff2f8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff350:	4620      	mov	r0, r4
 23ff352:	bd10      	pop	{r4, pc}

023ff354 <_Z22__fetch_global_Serial1v>:
{
 23ff354:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff356:	4d0e      	ldr	r5, [pc, #56]	; (23ff390 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff358:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff35a:	e8d5 1f8f 	ldab	r1, [r5]
 23ff35e:	f011 0401 	ands.w	r4, r1, #1
 23ff362:	d111      	bne.n	23ff388 <_Z22__fetch_global_Serial1v+0x34>
 23ff364:	4628      	mov	r0, r5
 23ff366:	f7fd fa91 	bl	23fc88c <__cxa_guard_acquire>
 23ff36a:	b168      	cbz	r0, 23ff388 <_Z22__fetch_global_Serial1v+0x34>
 23ff36c:	a801      	add	r0, sp, #4
 23ff36e:	f7ff ffdf 	bl	23ff330 <_Z20acquireSerial1Bufferv>
 23ff372:	4621      	mov	r1, r4
 23ff374:	aa01      	add	r2, sp, #4
 23ff376:	4807      	ldr	r0, [pc, #28]	; (23ff394 <_Z22__fetch_global_Serial1v+0x40>)
 23ff378:	f7ff fd9e 	bl	23feeb8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff37c:	4628      	mov	r0, r5
 23ff37e:	f7fd fa8a 	bl	23fc896 <__cxa_guard_release>
 23ff382:	4805      	ldr	r0, [pc, #20]	; (23ff398 <_Z22__fetch_global_Serial1v+0x44>)
 23ff384:	f000 f8b8 	bl	23ff4f8 <atexit>
    return serial1;
}
 23ff388:	4802      	ldr	r0, [pc, #8]	; (23ff394 <_Z22__fetch_global_Serial1v+0x40>)
 23ff38a:	b007      	add	sp, #28
 23ff38c:	bd30      	pop	{r4, r5, pc}
 23ff38e:	bf00      	nop
 23ff390:	1007af04 	.word	0x1007af04
 23ff394:	1007af10 	.word	0x1007af10
 23ff398:	023ff2f5 	.word	0x023ff2f5

023ff39c <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff39c:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff39e:	4c0d      	ldr	r4, [pc, #52]	; (23ff3d4 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff3a0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff3a2:	e8d4 3f8f 	ldab	r3, [r4]
 23ff3a6:	07db      	lsls	r3, r3, #31
 23ff3a8:	d411      	bmi.n	23ff3ce <_Z22__fetch_global_Serial2v+0x32>
 23ff3aa:	4620      	mov	r0, r4
 23ff3ac:	f7fd fa6e 	bl	23fc88c <__cxa_guard_acquire>
 23ff3b0:	b168      	cbz	r0, 23ff3ce <_Z22__fetch_global_Serial2v+0x32>
 23ff3b2:	a801      	add	r0, sp, #4
 23ff3b4:	f7ff ffc2 	bl	23ff33c <_Z20acquireSerial2Bufferv>
 23ff3b8:	2101      	movs	r1, #1
 23ff3ba:	aa01      	add	r2, sp, #4
 23ff3bc:	4806      	ldr	r0, [pc, #24]	; (23ff3d8 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff3be:	f7ff fd7b 	bl	23feeb8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff3c2:	4620      	mov	r0, r4
 23ff3c4:	f7fd fa67 	bl	23fc896 <__cxa_guard_release>
 23ff3c8:	4804      	ldr	r0, [pc, #16]	; (23ff3dc <_Z22__fetch_global_Serial2v+0x40>)
 23ff3ca:	f000 f895 	bl	23ff4f8 <atexit>
	return serial2;
}
 23ff3ce:	4802      	ldr	r0, [pc, #8]	; (23ff3d8 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff3d0:	b006      	add	sp, #24
 23ff3d2:	bd10      	pop	{r4, pc}
 23ff3d4:	1007af08 	.word	0x1007af08
 23ff3d8:	1007af24 	.word	0x1007af24
 23ff3dc:	023ff32f 	.word	0x023ff32f

023ff3e0 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff3e0:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff3e2:	f7ff ffdb 	bl	23ff39c <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff3e6:	4b07      	ldr	r3, [pc, #28]	; (23ff404 <_Z15serialEventRun2v+0x24>)
 23ff3e8:	4604      	mov	r4, r0
 23ff3ea:	b153      	cbz	r3, 23ff402 <_Z15serialEventRun2v+0x22>
 23ff3ec:	f7ff fd7f 	bl	23feeee <_ZN11USARTSerial9isEnabledEv>
 23ff3f0:	b138      	cbz	r0, 23ff402 <_Z15serialEventRun2v+0x22>
 23ff3f2:	6823      	ldr	r3, [r4, #0]
 23ff3f4:	4620      	mov	r0, r4
 23ff3f6:	691b      	ldr	r3, [r3, #16]
 23ff3f8:	4798      	blx	r3
 23ff3fa:	2800      	cmp	r0, #0
 23ff3fc:	dd01      	ble.n	23ff402 <_Z15serialEventRun2v+0x22>
        handler();
 23ff3fe:	e000      	b.n	23ff402 <_Z15serialEventRun2v+0x22>
 23ff400:	bf00      	nop
}
 23ff402:	bd10      	pop	{r4, pc}
 23ff404:	00000000 	.word	0x00000000

023ff408 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff408:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff40a:	4c0d      	ldr	r4, [pc, #52]	; (23ff440 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff40c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff40e:	e8d4 3f8f 	ldab	r3, [r4]
 23ff412:	07db      	lsls	r3, r3, #31
 23ff414:	d411      	bmi.n	23ff43a <_Z22__fetch_global_Serial3v+0x32>
 23ff416:	4620      	mov	r0, r4
 23ff418:	f7fd fa38 	bl	23fc88c <__cxa_guard_acquire>
 23ff41c:	b168      	cbz	r0, 23ff43a <_Z22__fetch_global_Serial3v+0x32>
 23ff41e:	a801      	add	r0, sp, #4
 23ff420:	f7ff ff92 	bl	23ff348 <_Z20acquireSerial3Bufferv>
 23ff424:	2102      	movs	r1, #2
 23ff426:	aa01      	add	r2, sp, #4
 23ff428:	4806      	ldr	r0, [pc, #24]	; (23ff444 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff42a:	f7ff fd45 	bl	23feeb8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff42e:	4620      	mov	r0, r4
 23ff430:	f7fd fa31 	bl	23fc896 <__cxa_guard_release>
 23ff434:	4804      	ldr	r0, [pc, #16]	; (23ff448 <_Z22__fetch_global_Serial3v+0x40>)
 23ff436:	f000 f85f 	bl	23ff4f8 <atexit>
	return serial3;
}
 23ff43a:	4802      	ldr	r0, [pc, #8]	; (23ff444 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff43c:	b006      	add	sp, #24
 23ff43e:	bd10      	pop	{r4, pc}
 23ff440:	1007af0c 	.word	0x1007af0c
 23ff444:	1007af38 	.word	0x1007af38
 23ff448:	023ff32d 	.word	0x023ff32d

023ff44c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff44c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff44e:	f7ff ffdb 	bl	23ff408 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff452:	4b07      	ldr	r3, [pc, #28]	; (23ff470 <_Z15serialEventRun3v+0x24>)
 23ff454:	4604      	mov	r4, r0
 23ff456:	b153      	cbz	r3, 23ff46e <_Z15serialEventRun3v+0x22>
 23ff458:	f7ff fd49 	bl	23feeee <_ZN11USARTSerial9isEnabledEv>
 23ff45c:	b138      	cbz	r0, 23ff46e <_Z15serialEventRun3v+0x22>
 23ff45e:	6823      	ldr	r3, [r4, #0]
 23ff460:	4620      	mov	r0, r4
 23ff462:	691b      	ldr	r3, [r3, #16]
 23ff464:	4798      	blx	r3
 23ff466:	2800      	cmp	r0, #0
 23ff468:	dd01      	ble.n	23ff46e <_Z15serialEventRun3v+0x22>
        handler();
 23ff46a:	e000      	b.n	23ff46e <_Z15serialEventRun3v+0x22>
 23ff46c:	bf00      	nop
}
 23ff46e:	bd10      	pop	{r4, pc}
 23ff470:	00000000 	.word	0x00000000

023ff474 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff474:	4770      	bx	lr
	...

023ff478 <_Z17acquireWireBufferv>:
{
 23ff478:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff47a:	4b0a      	ldr	r3, [pc, #40]	; (23ff4a4 <_Z17acquireWireBufferv+0x2c>)
{
 23ff47c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff47e:	6003      	str	r3, [r0, #0]
 23ff480:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff482:	4909      	ldr	r1, [pc, #36]	; (23ff4a8 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff484:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff486:	2020      	movs	r0, #32
 23ff488:	f000 f834 	bl	23ff4f4 <_ZnajRKSt9nothrow_t>
	};
 23ff48c:	2520      	movs	r5, #32
 23ff48e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff490:	4905      	ldr	r1, [pc, #20]	; (23ff4a8 <_Z17acquireWireBufferv+0x30>)
 23ff492:	4628      	mov	r0, r5
	};
 23ff494:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff496:	f000 f82d 	bl	23ff4f4 <_ZnajRKSt9nothrow_t>
	};
 23ff49a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff49e:	4620      	mov	r0, r4
 23ff4a0:	bd38      	pop	{r3, r4, r5, pc}
 23ff4a2:	bf00      	nop
 23ff4a4:	00010018 	.word	0x00010018
 23ff4a8:	023fff38 	.word	0x023fff38

023ff4ac <_Z19__fetch_global_Wirev>:
{
 23ff4ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff4ae:	4d0e      	ldr	r5, [pc, #56]	; (23ff4e8 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff4b0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff4b2:	e8d5 1f8f 	ldab	r1, [r5]
 23ff4b6:	f011 0401 	ands.w	r4, r1, #1
 23ff4ba:	d111      	bne.n	23ff4e0 <_Z19__fetch_global_Wirev+0x34>
 23ff4bc:	4628      	mov	r0, r5
 23ff4be:	f7fd f9e5 	bl	23fc88c <__cxa_guard_acquire>
 23ff4c2:	b168      	cbz	r0, 23ff4e0 <_Z19__fetch_global_Wirev+0x34>
 23ff4c4:	4668      	mov	r0, sp
 23ff4c6:	f7ff ffd7 	bl	23ff478 <_Z17acquireWireBufferv>
 23ff4ca:	466a      	mov	r2, sp
 23ff4cc:	4621      	mov	r1, r4
 23ff4ce:	4807      	ldr	r0, [pc, #28]	; (23ff4ec <_Z19__fetch_global_Wirev+0x40>)
 23ff4d0:	f7ff fd3c 	bl	23fef4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff4d4:	4628      	mov	r0, r5
 23ff4d6:	f7fd f9de 	bl	23fc896 <__cxa_guard_release>
 23ff4da:	4805      	ldr	r0, [pc, #20]	; (23ff4f0 <_Z19__fetch_global_Wirev+0x44>)
 23ff4dc:	f000 f80c 	bl	23ff4f8 <atexit>
	return wire;
}
 23ff4e0:	4802      	ldr	r0, [pc, #8]	; (23ff4ec <_Z19__fetch_global_Wirev+0x40>)
 23ff4e2:	b007      	add	sp, #28
 23ff4e4:	bd30      	pop	{r4, r5, pc}
 23ff4e6:	bf00      	nop
 23ff4e8:	1007af50 	.word	0x1007af50
 23ff4ec:	1007af54 	.word	0x1007af54
 23ff4f0:	023ff475 	.word	0x023ff475

023ff4f4 <_ZnajRKSt9nothrow_t>:
 23ff4f4:	f7fd b9b9 	b.w	23fc86a <_Znaj>

023ff4f8 <atexit>:
 23ff4f8:	2300      	movs	r3, #0
 23ff4fa:	4601      	mov	r1, r0
 23ff4fc:	461a      	mov	r2, r3
 23ff4fe:	4618      	mov	r0, r3
 23ff500:	f000 b844 	b.w	23ff58c <__register_exitproc>

023ff504 <memcpy>:
 23ff504:	440a      	add	r2, r1
 23ff506:	1e43      	subs	r3, r0, #1
 23ff508:	4291      	cmp	r1, r2
 23ff50a:	d100      	bne.n	23ff50e <memcpy+0xa>
 23ff50c:	4770      	bx	lr
 23ff50e:	b510      	push	{r4, lr}
 23ff510:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff514:	4291      	cmp	r1, r2
 23ff516:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff51a:	d1f9      	bne.n	23ff510 <memcpy+0xc>
 23ff51c:	bd10      	pop	{r4, pc}

023ff51e <memset>:
 23ff51e:	4402      	add	r2, r0
 23ff520:	4603      	mov	r3, r0
 23ff522:	4293      	cmp	r3, r2
 23ff524:	d100      	bne.n	23ff528 <memset+0xa>
 23ff526:	4770      	bx	lr
 23ff528:	f803 1b01 	strb.w	r1, [r3], #1
 23ff52c:	e7f9      	b.n	23ff522 <memset+0x4>
	...

023ff530 <srand>:
 23ff530:	b538      	push	{r3, r4, r5, lr}
 23ff532:	4b10      	ldr	r3, [pc, #64]	; (23ff574 <srand+0x44>)
 23ff534:	4604      	mov	r4, r0
 23ff536:	681d      	ldr	r5, [r3, #0]
 23ff538:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff53a:	b9b3      	cbnz	r3, 23ff56a <srand+0x3a>
 23ff53c:	2018      	movs	r0, #24
 23ff53e:	f7fe ffc7 	bl	23fe4d0 <malloc>
 23ff542:	4602      	mov	r2, r0
 23ff544:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff546:	b920      	cbnz	r0, 23ff552 <srand+0x22>
 23ff548:	4b0b      	ldr	r3, [pc, #44]	; (23ff578 <srand+0x48>)
 23ff54a:	2142      	movs	r1, #66	; 0x42
 23ff54c:	480b      	ldr	r0, [pc, #44]	; (23ff57c <srand+0x4c>)
 23ff54e:	f7fe fff7 	bl	23fe540 <__assert_func>
 23ff552:	490b      	ldr	r1, [pc, #44]	; (23ff580 <srand+0x50>)
 23ff554:	4b0b      	ldr	r3, [pc, #44]	; (23ff584 <srand+0x54>)
 23ff556:	e9c0 1300 	strd	r1, r3, [r0]
 23ff55a:	4b0b      	ldr	r3, [pc, #44]	; (23ff588 <srand+0x58>)
 23ff55c:	2100      	movs	r1, #0
 23ff55e:	6083      	str	r3, [r0, #8]
 23ff560:	230b      	movs	r3, #11
 23ff562:	8183      	strh	r3, [r0, #12]
 23ff564:	2001      	movs	r0, #1
 23ff566:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff56a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff56c:	2200      	movs	r2, #0
 23ff56e:	611c      	str	r4, [r3, #16]
 23ff570:	615a      	str	r2, [r3, #20]
 23ff572:	bd38      	pop	{r3, r4, r5, pc}
 23ff574:	1007a240 	.word	0x1007a240
 23ff578:	023fff39 	.word	0x023fff39
 23ff57c:	023fff50 	.word	0x023fff50
 23ff580:	abcd330e 	.word	0xabcd330e
 23ff584:	e66d1234 	.word	0xe66d1234
 23ff588:	0005deec 	.word	0x0005deec

023ff58c <__register_exitproc>:
 23ff58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff590:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff650 <__register_exitproc+0xc4>
 23ff594:	4606      	mov	r6, r0
 23ff596:	461f      	mov	r7, r3
 23ff598:	460d      	mov	r5, r1
 23ff59a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff59e:	4691      	mov	r9, r2
 23ff5a0:	f000 f858 	bl	23ff654 <__retarget_lock_acquire_recursive>
 23ff5a4:	4b26      	ldr	r3, [pc, #152]	; (23ff640 <__register_exitproc+0xb4>)
 23ff5a6:	681c      	ldr	r4, [r3, #0]
 23ff5a8:	b934      	cbnz	r4, 23ff5b8 <__register_exitproc+0x2c>
 23ff5aa:	4c26      	ldr	r4, [pc, #152]	; (23ff644 <__register_exitproc+0xb8>)
 23ff5ac:	601c      	str	r4, [r3, #0]
 23ff5ae:	4b26      	ldr	r3, [pc, #152]	; (23ff648 <__register_exitproc+0xbc>)
 23ff5b0:	b113      	cbz	r3, 23ff5b8 <__register_exitproc+0x2c>
 23ff5b2:	681b      	ldr	r3, [r3, #0]
 23ff5b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff5b8:	6863      	ldr	r3, [r4, #4]
 23ff5ba:	2b1f      	cmp	r3, #31
 23ff5bc:	dd07      	ble.n	23ff5ce <__register_exitproc+0x42>
 23ff5be:	f8d8 0000 	ldr.w	r0, [r8]
 23ff5c2:	f000 f849 	bl	23ff658 <__retarget_lock_release_recursive>
 23ff5c6:	f04f 30ff 	mov.w	r0, #4294967295
 23ff5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff5ce:	b35e      	cbz	r6, 23ff628 <__register_exitproc+0x9c>
 23ff5d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff5d4:	b988      	cbnz	r0, 23ff5fa <__register_exitproc+0x6e>
 23ff5d6:	4b1d      	ldr	r3, [pc, #116]	; (23ff64c <__register_exitproc+0xc0>)
 23ff5d8:	b923      	cbnz	r3, 23ff5e4 <__register_exitproc+0x58>
 23ff5da:	f8d8 0000 	ldr.w	r0, [r8]
 23ff5de:	f000 f83a 	bl	23ff656 <__retarget_lock_release>
 23ff5e2:	e7f0      	b.n	23ff5c6 <__register_exitproc+0x3a>
 23ff5e4:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff5e8:	f7fe ff72 	bl	23fe4d0 <malloc>
 23ff5ec:	2800      	cmp	r0, #0
 23ff5ee:	d0f4      	beq.n	23ff5da <__register_exitproc+0x4e>
 23ff5f0:	2300      	movs	r3, #0
 23ff5f2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff5f6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff5fa:	6863      	ldr	r3, [r4, #4]
 23ff5fc:	2201      	movs	r2, #1
 23ff5fe:	2e02      	cmp	r6, #2
 23ff600:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff604:	fa02 f203 	lsl.w	r2, r2, r3
 23ff608:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff60c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff610:	ea43 0302 	orr.w	r3, r3, r2
 23ff614:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff618:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff61c:	bf02      	ittt	eq
 23ff61e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff622:	4313      	orreq	r3, r2
 23ff624:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff628:	6863      	ldr	r3, [r4, #4]
 23ff62a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff62e:	1c5a      	adds	r2, r3, #1
 23ff630:	3302      	adds	r3, #2
 23ff632:	6062      	str	r2, [r4, #4]
 23ff634:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff638:	f000 f80e 	bl	23ff658 <__retarget_lock_release_recursive>
 23ff63c:	2000      	movs	r0, #0
 23ff63e:	e7c4      	b.n	23ff5ca <__register_exitproc+0x3e>
 23ff640:	1007aff4 	.word	0x1007aff4
 23ff644:	1007af68 	.word	0x1007af68
 23ff648:	00000000 	.word	0x00000000
 23ff64c:	023fe4d1 	.word	0x023fe4d1
 23ff650:	1007a2a4 	.word	0x1007a2a4

023ff654 <__retarget_lock_acquire_recursive>:
 23ff654:	4770      	bx	lr

023ff656 <__retarget_lock_release>:
 23ff656:	4770      	bx	lr

023ff658 <__retarget_lock_release_recursive>:
 23ff658:	4770      	bx	lr
	...

023ff65c <link_const_data_start>:
 23ff65c:	023ff727 	.word	0x023ff727
 23ff660:	023ff72a 	.word	0x023ff72a
 23ff664:	023ff72d 	.word	0x023ff72d
 23ff668:	023ff730 	.word	0x023ff730
 23ff66c:	023ff733 	.word	0x023ff733
 23ff670:	023ff72e 	.word	0x023ff72e
 23ff674:	023ff736 	.word	0x023ff736

023ff678 <dynalib_user>:
 23ff678:	023fc831 023fc859 023fc85d 00000000     1.?.Y.?.].?.....
 23ff688:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff698:	6c617574 4d502400 31334b54 2c302c34     tual.$PMTK314,0,
 23ff6a8:	2c302c31 2c302c31 2c302c30 2c302c30     1,0,1,0,0,0,0,0,
 23ff6b8:	2c302c30 2c302c30 2c302c30 2c302c30     0,0,0,0,0,0,0,0,
 23ff6c8:	2a302c30 24003832 4b544d50 2c303232     0,0*28.$PMTK220,
 23ff6d8:	30303031 0046312a 43475024 332c444d     1000*1F.$PGCMD,3
 23ff6e8:	2a312c33 24004336 4b544d50 2a353036     3,1*6C.$PMTK605*
 23ff6f8:	41003133 30313441 32333134 42383639     31.AA4104132968B
 23ff708:	32323241 39393234 30393730 39353132     A222429907902159
 23ff718:	00424134 53546f49 65647574 4900746e     4AB.IoTStudent.I
 23ff728:	49570049 00504700 47004750 5a5a004e     I.WI.GP.PG.GN.ZZ
 23ff738:	6564005a 6c756166 4d002074 4c004253     Z.default .MSB.L
 23ff748:	3c004253 53495053 69747465 2073676e     SB.<SPISettings 
 23ff758:	61666564 3e746c75 50533c00 74655349     default>.<SPISet
 23ff768:	676e6974 73252073 25207525 4f4d2073     tings %s%u %s MO
 23ff778:	75254544 4747003e 4c470041 5347004c     DE%u>.GGA.GLL.GS
 23ff788:	4d520041 42440043 44480054 4448004d     A.RMC.DBT.HDM.HD
 23ff798:	444d0054 544d0041 574d0057 4d520056     T.MDA.MTW.MWV.RM
 23ff7a8:	4f540042 58540050 48560054 4c560057     B.TOP.TXT.VHW.VL
 23ff7b8:	50560057 57560057 43570052 54580056     W.VPW.VWR.WCV.XT
 23ff7c8:	50410045 50440042 53470054 44480056     E.APB.DPT.GSV.HD
 23ff7d8:	574d0047 4f520044 50520054 5352004d     G.MWD.ROT.RPM.RS
 23ff7e8:	44560041 54560052 445a0047 00000041     A.VDR.VTG.ZDA...

023ff7f8 <_ZTVN8particle11SPISettingsE>:
	...
 23ff800:	023fcfd9 023fcedb 023fcedd              ..?...?...?.

023ff80c <_ZTV12Adafruit_GPS>:
	...
 23ff814:	023fceed 023fcf0d 023fcf23 023fe93d     ..?...?.#.?.=.?.

023ff824 <_ZTV16Adafruit_SSD1306>:
	...
 23ff82c:	023fd66d 023fd6fd 023fdcad 023fe93d     m.?...?...?.=.?.
 23ff83c:	023fd671 023fd9c3 023fd4f5 023fd381     q.?...?...?...?.
 23ff84c:	023fda81 023fdb1f 023fdb55 023fdb71     ..?...?.U.?.q.?.

023ff85c <_ZL4font>:
 23ff85c:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
 23ff86c:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
 23ff87c:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
 23ff88c:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
 23ff89c:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
 23ff8ac:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
 23ff8bc:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
 23ff8cc:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
 23ff8dc:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
 23ff8ec:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
 23ff8fc:	00000000 5f000000 07000000 14000700     ......._........
 23ff90c:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
 23ff91c:	00502056 00030708 41221c00 22410000     V P......."A..A"
 23ff92c:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
 23ff93c:	08080800 00000808 20006060 02040810     ........``. ....
 23ff94c:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
 23ff95c:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
 23ff96c:	41314949 07091121 49494936 49494636     II1A!...6III6FII
 23ff97c:	00001e29 00000014 00003440 22140800     ).......@4....."
 23ff98c:	14141441 41001414 02081422 06095901     A......A"....Y..
 23ff99c:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
 23ff9ac:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
 23ff9bc:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
 23ff9cc:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
 23ff9dc:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
 23ff9ec:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
 23ff9fc:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
 23ffa0c:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
 23ffa1c:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
 23ffa2c:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
 23ffa3c:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
 23ffa4c:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
 23ffa5c:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
 23ffa6c:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
 23ffa7c:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
 23ffa8c:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
 23ffa9c:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
 23ffaac:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
 23ffabc:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
 23ffacc:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
 23ffadc:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
 23ffaec:	41795555 78545421 54552141 54204078     UUyA!TTxA!UTx@ T
 23ffafc:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
 23ffb0c:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
 23ffb1c:	45010042 29f0407c f0f02924 f0282528     B..E|@.)$)..(%(.
 23ffb2c:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
 23ffb3c:	32494949 48484832 484a3232 413a3048     III22HHH22JHH0:A
 23ffb4c:	3a7a2141 78204042 a0a09d00 4444397d     A!z:B@ x....}9DD
 23ffb5c:	403d3944 3c3d4040 2424ff24 43497e48     D9=@@@=<$.$$H~IC
 23ffb6c:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
 23ffb7c:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
 23ffb8c:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
 23ffb9c:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
 23ffbac:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
 23ffbbc:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
 23ffbcc:	005500aa aa55aaaa 0000aa55 1000ff00     ..U...U.U.......
 23ffbdc:	00ff1010 ff141414 ff101000 1010ff00     ................
 23ffbec:	14f010f0 00fc1414 00f71414 ff0000ff     ................
 23ffbfc:	1414ff00 14fc04f4 1f101714 101f1010     ................
 23ffc0c:	1414141f 1010001f 0000f010 101f0000     ................
 23ffc1c:	1f101010 10101010 000010f0 1010ff00     ................
 23ffc2c:	10101010 ff101010 00000010 000014ff     ................
 23ffc3c:	00ff00ff 17101f00 04fc0000 171414f4     ................
 23ffc4c:	14141710 00f404f4 f700ff00 14141414     ................
 23ffc5c:	f7141414 1414f700 10141714 1f101f10     ................
 23ffc6c:	f4141414 f0101014 0000f010 001f101f     ................
 23ffc7c:	141f0000 fc000000 f0000014 1010f010     ................
 23ffc8c:	14ff10ff 14ff1414 1f101010 00000000     ................
 23ffc9c:	ffff10f0 f0ffffff f0f0f0f0 00ffffff     ................
 23ffcac:	00000000 0f0fffff 380f0f0f 44384444     ...........8DD8D
 23ffcbc:	3e2a2a7c 02027e14 7e020606 63027e02     |**>.~.....~.~.c
 23ffccc:	63414955 3c444438 207e4004 0206201e     UIAc8DD<.@~ . ..
 23ffcdc:	9902027e 99a5e7a5 2a492a1c 01724c1c     ~........*I*.Lr.
 23ffcec:	4a304c72 30304d4d 30487848 465a62bc     rL0JMM00HxH0.bZF
 23ffcfc:	49493e3d 017e0049 2a7e0101 2a2a2a2a     =>III.~...~*****
 23ffd0c:	445f4444 4a514044 44404044 0040514a     DD_DD@QJD@@DJQ@.
 23ffd1c:	0301ff00 00ff80e0 6b080800 1236086b     ...........kk.6.
 23ffd2c:	06362436 060f090f 18180000 10000000     6$6.............
 23ffd3c:	40300010 000101ff 1e01011f 171d1900     ..0@............
 23ffd4c:	3c3c0012 00003c3c 00000000              ..<<<<......

023ffd58 <_ZTV12Adafruit_GFX>:
	...
 23ffd68:	023fdcad 023fe93d 023fc875 023fd9c3     ..?.=.?.u.?...?.
 23ffd78:	023fdae9 023fdb05 023fda81 023fdb1f     ..?...?...?...?.
 23ffd88:	023fdb55 023fdb71                       U.?.q.?.

023ffd90 <_ZTVN5spark13EthernetClassE>:
	...
 23ffd98:	023fe5d7 023fe5cd 023fe5c3 023fe5b9     ..?...?...?...?.
 23ffda8:	023fe5ad 023fe5a1 023ff089 023ff091     ..?...?...?...?.
 23ffdb8:	023fe595 023fe58d 023fe583 023fe579     ..?...?...?.y.?.
 23ffdc8:	023ff1b9 023ff0c1 023ff0c9              ..?...?...?.

023ffdd4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffdd4:	18100800 38302820 00707061 252d5925     .... (08app.%Y-%
 23ffde4:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 23ffdf4:	74637361 00656d69                       asctime.

023ffdfc <_ZTV9IPAddress>:
	...
 23ffe04:	023fec51 023fec41 023fec43              Q.?.A.?.C.?.

023ffe10 <_ZTV9USBSerial>:
	...
 23ffe18:	023fed37 023fed9f 023fed75 023fe93d     7.?...?.u.?.=.?.
 23ffe28:	023fed67 023fed39 023fed49 023fed99     g.?.9.?.I.?...?.
 23ffe38:	023fea8f 023fed59 023fed31              ..?.Y.?.1.?.

023ffe44 <_ZTV11USARTSerial>:
	...
 23ffe4c:	023fee3d 023feea9 023fee81 023fe93d     =.?...?...?.=.?.
 23ffe5c:	023fee51 023fee6d 023fee5f 023fee7b     Q.?.m.?._.?.{.?.
 23ffe6c:	023fea8f 023fee3f 023fee43              ..?.?.?.C.?.

023ffe78 <_ZTV7TwoWire>:
	...
 23ffe80:	023feef5 023fef3f 023fef17 023feef7     ..?.?.?...?...?.
 23ffe90:	023fef1f 023fef27 023fef2f 023fef37     ..?.'.?./.?.7.?.
 23ffea0:	023fea8f                                ..?.

023ffea4 <_ZTVN5spark9WiFiClassE>:
	...
 23ffeac:	023ff02b 023ff021 023ff017 023fefcd     +.?.!.?...?...?.
 23ffebc:	023ff00b 023fefff 023ff089 023ff091     ..?...?...?...?.
 23ffecc:	023feff3 023fefeb 023fefe1 023fefd7     ..?...?...?...?.
 23ffedc:	023ff1b9 023ff0c1 023ff0c9              ..?...?...?.

023ffee8 <CSWTCH.109>:
 23ffee8:	1007ae8c 1007aef4 1007aefc              ............

023ffef4 <_ZTVN5spark12NetworkClassE>:
	...
 23ffefc:	023ff049 023ff053 023ff05d 023ff067     I.?.S.?.].?.g.?.
 23fff0c:	023ff071 023ff07d 023ff089 023ff091     q.?.}.?...?...?.
 23fff1c:	023ff099 023ff0a5 023ff0ad 023ff0b7     ..?...?...?...?.
 23fff2c:	023ff1b9 023ff0c1 023ff0c9              ..?...?...?.

023fff38 <_ZSt7nothrow>:
 23fff38:	45455200 6d20544e 6f6c6c61 75732063     .REENT malloc su
 23fff48:	65656363 00646564 746e6d2f 726f772f     cceeded./mnt/wor
 23fff58:	6170736b 772f6563 736b726f 65636170     kspace/workspace
 23fff68:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
 23fff78:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
 23fff88:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
 23fff98:	34323131 3036315f 30383136 2f313436     1124_1606180641/
 23fffa8:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
 23fffb8:	696c2f62 732f6362 696c6474 61722f62     b/libc/stdlib/ra
 23fffc8:	632e646e                                 nd.c.

023fffcd <link_const_data_end>:
 23fffcd:	00          	.byte	0x00
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023fc965 	.word	0x023fc965
 23fffd4:	023fe5e1 	.word	0x023fe5e1
 23fffd8:	023fe859 	.word	0x023fe859
 23fffdc:	023fe92d 	.word	0x023fe92d
 23fffe0:	023feab9 	.word	0x023feab9
 23fffe4:	023feac9 	.word	0x023feac9
 23fffe8:	023feae5 	.word	0x023feae5
 23fffec:	023fefb1 	.word	0x023fefb1
 23ffff0:	023ff035 	.word	0x023ff035
 23ffff4:	023ff1cd 	.word	0x023ff1cd
